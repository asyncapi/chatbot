{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tools/generator/using-private-template",
    "timestamp": "2025-03-12T17:53:12.409Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Using Private Template",
    "hierarchy": {
      "sections": {
        "Private registry using .npmrc:": {
          "level": 2,
          "content": "1npm config set registry http://verdaccio:4873\n2npm config set //verdaccio:4873/:_auth=$(echo -n 'username:password' | base64)\nnpm config set registry : Provide the registry URL that points to the registry URL.\nnpm config set _auth : Provide the base64 encoded value that represents the username and password for basic auth.\nnpm config set _authToken : Provide the access token generated by the registry."
        },
        "Private registry overriding arguments:": {
          "level": 2,
          "content": "registry.url: The URL of the registry where the private template is located. Defaults to registry.npmjs.org.\nregistry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=.\nregistry.token: An optional parameter to pass to the npm registry authentication token. To get the token, you can first authenticate with the registry using npm login and then grab the generated token from the .npmrc file."
        },
        "Pulling private template using library:": {
          "level": 2,
          "content": "1const generator = new Generator('@asyncapi/html-template', 'output',\n2      { \n3        debug: true,\n4        registry: {\n5          url: 'http://verdaccio:4873',  \n6          auth: 'YWRtaW46bmltZGE=' \n7            // base64 encoded username and password \n8            // represented as admin:nimda\n9          \n10        }\n11      });Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tools"
            },
            {
              "text": "Generator",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Installation guide",
              "href": "https://www.asyncapi.com/docs/tools/generator/installation-guide"
            },
            {
              "text": "Usage",
              "href": "https://www.asyncapi.com/docs/tools/generator/usage"
            },
            {
              "text": "AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tools/generator/asyncapi-document"
            },
            {
              "text": "Template",
              "href": "https://www.asyncapi.com/docs/tools/generator/template"
            },
            {
              "text": "Parser",
              "href": "https://www.asyncapi.com/docs/tools/generator/parser"
            },
            {
              "text": "Generator version vs template version",
              "href": "https://www.asyncapi.com/docs/tools/generator/versioning"
            },
            {
              "text": "Library API",
              "href": "https://www.asyncapi.com/docs/tools/generator/api"
            },
            {
              "text": "Template development",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-development"
            },
            {
              "text": "Configuration file",
              "href": "https://www.asyncapi.com/docs/tools/generator/configuration-file"
            },
            {
              "text": "Template context",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-context"
            },
            {
              "text": "React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/react-render-engine"
            },
            {
              "text": "Nunjucks render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/nunjucks-render-engine"
            },
            {
              "text": "Hooks",
              "href": "https://www.asyncapi.com/docs/tools/generator/hooks"
            },
            {
              "text": "File templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/file-templates"
            },
            {
              "text": "TypeScript support",
              "href": "https://www.asyncapi.com/docs/tools/generator/typescript-support"
            },
            {
              "text": "Special file names",
              "href": "https://www.asyncapi.com/docs/tools/generator/special-file-names"
            },
            {
              "text": "Creating a template",
              "href": "https://www.asyncapi.com/docs/tools/generator/generator-template"
            },
            {
              "text": "Using private templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/using-private-template"
            },
            {
              "text": "Adding models generation in template",
              "href": "https://www.asyncapi.com/docs/tools/generator/model-generation"
            },
            {
              "text": "Migrating from Nunjucks to React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-nunjucks-react"
            },
            {
              "text": "Migrating from `ag` CLI to AsyncAPI CLI",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-cli"
            },
            {
              "text": "CLI",
              "href": "https://www.asyncapi.com/docs/tools/cli"
            },
            {
              "text": "Glee",
              "href": "https://www.asyncapi.com/docs/tools/glee"
            }
          ]
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Generator allows fetching the template from private repositories like Verdaccio, Nexus, npm, etc.\nBy default, the generator fetches the template from the public npm registry configured in the npm configuration.\nTo fetch the template from a private registry, you need to provide the registry URL and authentication details in the .npmrc. For more information read the docs.\nHowever, you can override the default behavior by providing the registry URL and authentication details as arguments of the commandline.\nPrivate registry using .npmrc:\n1npm config set registry http://verdaccio:4873\n2npm config set //verdaccio:4873/:_auth=$(echo -n 'username:password' | base64)\n\nnpm config set registry : Provide the registry URL that points to the registry URL.\nnpm config set _auth : Provide the base64 encoded value that represents the username and password for basic auth.\nnpm config set _authToken : Provide the access token generated by the registry.\n\nPrivate registry overriding arguments:\n\nregistry.url: The URL of the registry where the private template is located. Defaults to registry.npmjs.org.\nregistry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=.\nregistry.token: An optional parameter to pass to the npm registry authentication token. To get the token, you can first authenticate with the registry using npm login and then grab the generated token from the .npmrc file.\n\nPulling private template using library:\n1const generator = new Generator('@asyncapi/html-template', 'output',\n2      { \n3        debug: true,\n4        registry: {\n5          url: 'http://verdaccio:4873',  \n6          auth: 'YWRtaW46bmltZGE=' \n7            // base64 encoded username and password \n8            // represented as admin:nimda\n9          \n10        }\n11      });\nAssuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token.",
    "sections": [
      {
        "title": "Private registry using .npmrc:",
        "level": 2,
        "text": "1npm config set registry http://verdaccio:4873\n2npm config set //verdaccio:4873/:_auth=$(echo -n 'username:password' | base64)\nnpm config set registry : Provide the registry URL that points to the registry URL.\nnpm config set _auth : Provide the base64 encoded value that represents the username and password for basic auth.\nnpm config set _authToken : Provide the access token generated by the registry."
      },
      {
        "title": "Private registry overriding arguments:",
        "level": 2,
        "text": "registry.url: The URL of the registry where the private template is located. Defaults to registry.npmjs.org.\nregistry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=.\nregistry.token: An optional parameter to pass to the npm registry authentication token. To get the token, you can first authenticate with the registry using npm login and then grab the generated token from the .npmrc file."
      },
      {
        "title": "Pulling private template using library:",
        "level": 2,
        "text": "1const generator = new Generator('@asyncapi/html-template', 'output',\n2      { \n3        debug: true,\n4        registry: {\n5          url: 'http://verdaccio:4873',  \n6          auth: 'YWRtaW46bmltZGE=' \n7            // base64 encoded username and password \n8            // represented as admin:nimda\n9          \n10        }\n11      });Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1npm config set registry http://verdaccio:4873\n2npm config set //verdaccio:4873/:_auth=$(echo -n 'username:password' | base64)",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>npm config </span><span style=\"color:#7edcda\">set</span><span> registry http://verdaccio:4873\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>npm config </span><span style=\"color:#7edcda\">set</span><span> //verdaccio:4873/:_auth=$(</span><span style=\"color:#7edcda\">echo</span><span> -n </span><span style=\"color:#c0e2a3;font-weight:500\">'username:password'</span><span> | base64)</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1const generator = new Generator('@asyncapi/html-template', 'output',\n2      { \n3        debug: true,\n4        registry: {\n5          url: 'http://verdaccio:4873',  \n6          auth: 'YWRtaW46bmltZGE=' \n7            // base64 encoded username and password \n8            // represented as admin:nimda\n9          \n10        }\n11      });",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">const</span><span> generator = </span><span style=\"color:#64a0dc\">new</span><span> Generator(</span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/html-template'</span><span>, </span><span style=\"color:#c0e2a3;font-weight:500\">'output'</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>      { \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">debug</span><span>: </span><span style=\"color:#64a0dc\">true</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>        </span><span style=\"color:#7edcda\">registry</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>          </span><span style=\"color:#7edcda\">url</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">'http://verdaccio:4873'</span><span>,  \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>          </span><span style=\"color:#7edcda\">auth</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">'YWRtaW46bmltZGE='</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>            </span><span style=\"color:#797f8c\">// base64 encoded username and password </span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>            </span><span style=\"color:#797f8c\">// represented as admin:nimda</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>          \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>        }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span>      });</span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "registry.npmjs.org",
        "context": "registry.url: The URL of the registry where the private template is located. Defaults to registry.npmjs.org."
      },
      {
        "id": "highlight_1",
        "content": "username:password",
        "context": "registry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=."
      },
      {
        "id": "highlight_2",
        "content": "admin",
        "context": "registry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=."
      },
      {
        "id": "highlight_3",
        "content": "nimda",
        "context": "registry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=."
      },
      {
        "id": "highlight_4",
        "content": "admin:nimda",
        "context": "registry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=."
      },
      {
        "id": "highlight_5",
        "content": "YWRtaW46bmltZGE=",
        "context": "registry.auth: An optional parameter to pass the npm registry username and password encoded with base64, formatted as username:password. For example, if the username and password are admin and nimda, you need to encode them with the base64 value like admin:nimda which results in YWRtaW46bmltZGE=."
      },
      {
        "id": "highlight_6",
        "content": "npm login",
        "context": "registry.token: An optional parameter to pass to the npm registry authentication token. To get the token, you can first authenticate with the registry using npm login and then grab the generated token from the .npmrc file."
      },
      {
        "id": "highlight_7",
        "content": ".npmrc",
        "context": "registry.token: An optional parameter to pass to the npm registry authentication token. To get the token, you can first authenticate with the registry using npm login and then grab the generated token from the .npmrc file."
      },
      {
        "id": "highlight_8",
        "content": "@asyncapi/html-template",
        "context": "Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
      },
      {
        "id": "highlight_9",
        "content": "registry.url",
        "context": "Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
      },
      {
        "id": "highlight_10",
        "content": "registry.auth",
        "context": "Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
      },
      {
        "id": "highlight_11",
        "content": "registry.token",
        "context": "Assuming you host @asyncapi/html-template in a private package registry like Verdaccio. To pull this template, you need to provide registry.url option that points to the registry URL and registry.auth as a base64 encoded value that represents the username and password. Instead of username and password, you can also pass registry.token."
      }
    ]
  }
}