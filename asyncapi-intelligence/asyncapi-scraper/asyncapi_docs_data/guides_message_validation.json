{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/guides/message-validation",
    "timestamp": "2025-03-12T17:46:10.319Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Message Validation",
    "hierarchy": {
      "sections": {
        "Introduction": {
          "level": 2,
          "content": "This guide explains different concepts of validating messages in event-driven communication. You will also learn what role AsyncAPI documents play in validation."
        },
        "Message validation": {
          "level": 2,
          "content": "To understand message validation in event-driven communication, we must first understand the basic components involved.\nProducer: responsible for producing messages.\nConsumer: responsible for getting the producer's messages.\nBroker: acts as a bridge between the consumer and the producer because messages travel through the broker.\nMessage validation can occur in different places in your system. This guide highlights three of those:\nBoth producers and consumers can do validation internally during runtime.\nAPI Gateway can handle message validation.\nValidation of messages can be a native solution implemented by the Schema Registry.\nBecause consumers and producers cannot communicate directly, the AsyncAPI file dictates what should be included in the payload when a service produces a message. The AsyncAPI document also tells the consumer about the message's properties.\nLet's further break down how validation works for all.\nRuntime validationMessages produced and consumed are both required for runtime message validation. The AsyncAPI document should include descriptions of payload schemas so that you can read them in your application and validate messages that are consumed and produced by the application.Before messages reach the consumer, runtime validation ensures that any errors are resolved and valid messages are sent to your application.An example implementation of message validation in runtime is the asyncapi-validator library that enables you to validate messages produced/consumed in your application against schemas provided in your AsyncAPI document.\nCheck out the message validation in the runtime tutorial if you want to get your hands dirty with message validation.#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ConsumerProducerMessageNoYesMessageNoYesLogsIs Message valid?Message consumedIs Message valid?Message producedLogsBrokerGateway validationA gateway intercepts all incoming messages and routes them through the middleware and handler pipelines. The gateway sits between the producer and the broker. First, the messages are routed through the gateway, and then the gateway determines whether the message is valid. If the message is invalid, it displays an error and is not forwarded to the broker.An example implementation of message validation in a gateway is the AsyncAPI gateway. It intercepts all incoming messages moving them into a pipeline of middlewares and handlers such as message validation. You can use a Kafka consumer/producer(kcat), a broker, and a simple WebSocket to run the AsyncAPI gateway in your machine.\nCheck out an AsyncAPI file demo with Studio to learn more about how an AsyncAPI file can be used in gateway validation.RememberCurrently, only the Kafka protocol is supported.#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?FailThe AsyncAPI document is important because payload schemas are taken from it, and messages are validated against it in your application.\nYou can spin up the AsyncAPI gateway using an AsyncAPI file. All the messages are forwarded to a WebSocket endpoint; if the message/payload is invalid, it includes a validation error message.Schema Registry validationProducers and consumers do not communicate with each other directly; rather, information transfer happens via Kafka. At the same time, the consumer still needs to know the type of data the producer is sending. Imagine if the producer starts sending bad data to Kafka or if the data type of your data gets changed. We need a way to have a common data type that must be agreed upon.This is where Schema Registry comes into play. It is an application that runs outside your Kafka protocol and handles schema distribution to producers and consumers by storing a copy of the schema in its local cache and validating them in Kafka.#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumerWith the Schema Registry in place, the producer first talks to the Schema Registry and checks if the schema of the message it wants to send is available before sending it to the broker. If it cannot locate the schema, it registers it in the Schema Registry. Then the producer sends a message to the broker prefixed with a unique schema ID. When the consumer processes this message, it will communicate with the Schema Registry using the schema ID obtained from the producer. If there is a schema mismatch, the Schema Registry will throw an error, informing the producer that it violates the schema agreement.AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'"
        },
        "Runtime validation": {
          "level": 3,
          "content": "Messages produced and consumed are both required for runtime message validation. The AsyncAPI document should include descriptions of payload schemas so that you can read them in your application and validate messages that are consumed and produced by the application.Before messages reach the consumer, runtime validation ensures that any errors are resolved and valid messages are sent to your application.An example implementation of message validation in runtime is the asyncapi-validator library that enables you to validate messages produced/consumed in your application against schemas provided in your AsyncAPI document.\nCheck out the message validation in the runtime tutorial if you want to get your hands dirty with message validation."
        },
        "Gateway validation": {
          "level": 3,
          "content": "A gateway intercepts all incoming messages and routes them through the middleware and handler pipelines. The gateway sits between the producer and the broker. First, the messages are routed through the gateway, and then the gateway determines whether the message is valid. If the message is invalid, it displays an error and is not forwarded to the broker.An example implementation of message validation in a gateway is the AsyncAPI gateway. It intercepts all incoming messages moving them into a pipeline of middlewares and handlers such as message validation. You can use a Kafka consumer/producer(kcat), a broker, and a simple WebSocket to run the AsyncAPI gateway in your machine.\nCheck out an AsyncAPI file demo with Studio to learn more about how an AsyncAPI file can be used in gateway validation.RememberCurrently, only the Kafka protocol is supported.#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?FailThe AsyncAPI document is important because payload schemas are taken from it, and messages are validated against it in your application.\nYou can spin up the AsyncAPI gateway using an AsyncAPI file. All the messages are forwarded to a WebSocket endpoint; if the message/payload is invalid, it includes a validation error message."
        },
        "Remember": {
          "level": 5,
          "content": "Currently, only the Kafka protocol is supported."
        },
        "Schema Registry validation": {
          "level": 3,
          "content": "Producers and consumers do not communicate with each other directly; rather, information transfer happens via Kafka. At the same time, the consumer still needs to know the type of data the producer is sending. Imagine if the producer starts sending bad data to Kafka or if the data type of your data gets changed. We need a way to have a common data type that must be agreed upon.This is where Schema Registry comes into play. It is an application that runs outside your Kafka protocol and handles schema distribution to producers and consumers by storing a copy of the schema in its local cache and validating them in Kafka.#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumerWith the Schema Registry in place, the producer first talks to the Schema Registry and checks if the schema of the message it wants to send is available before sending it to the broker. If it cannot locate the schema, it registers it in the Schema Registry. Then the producer sends a message to the broker prefixed with a unique schema ID. When the consumer processes this message, it will communicate with the Schema Registry using the schema ID obtained from the producer. If there is a schema mismatch, the Schema Registry will throw an error, informing the producer that it violates the schema agreement.AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'"
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/guides"
            },
            {
              "text": "Validate AsyncAPI documents",
              "href": "https://www.asyncapi.com/docs/guides/validate"
            },
            {
              "text": "Message validation",
              "href": "https://www.asyncapi.com/docs/guides/message-validation"
            }
          ]
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Introduction\nThis guide explains different concepts of validating messages in event-driven communication. You will also learn what role AsyncAPI documents play in validation.\nMessage validation\nTo understand message validation in event-driven communication, we must first understand the basic components involved.\n\nProducer: responsible for producing messages.\nConsumer: responsible for getting the producer's messages.\nBroker: acts as a bridge between the consumer and the producer because messages travel through the broker.\n\nMessage validation can occur in different places in your system. This guide highlights three of those:\n\nBoth producers and consumers can do validation internally during runtime.\nAPI Gateway can handle message validation.\nValidation of messages can be a native solution implemented by the Schema Registry.\nBecause consumers and producers cannot communicate directly, the AsyncAPI file dictates what should be included in the payload when a service produces a message. The AsyncAPI document also tells the consumer about the message's properties.\nLet's further break down how validation works for all.\n\nRuntime validation\nMessages produced and consumed are both required for runtime message validation. The AsyncAPI document should include descriptions of payload schemas so that you can read them in your application and validate messages that are consumed and produced by the application.\nBefore messages reach the consumer, runtime validation ensures that any errors are resolved and valid messages are sent to your application.\nAn example implementation of message validation in runtime is the asyncapi-validator library that enables you to validate messages produced/consumed in your application against schemas provided in your AsyncAPI document.\nCheck out the message validation in the runtime tutorial if you want to get your hands dirty with message validation.\n#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ConsumerProducerMessageNoYesMessageNoYesLogsIs Message valid?Message consumedIs Message valid?Message producedLogsBroker\nGateway validation\nA gateway intercepts all incoming messages and routes them through the middleware and handler pipelines. The gateway sits between the producer and the broker. First, the messages are routed through the gateway, and then the gateway determines whether the message is valid. If the message is invalid, it displays an error and is not forwarded to the broker.\nAn example implementation of message validation in a gateway is the AsyncAPI gateway. It intercepts all incoming messages moving them into a pipeline of middlewares and handlers such as message validation. You can use a Kafka consumer/producer(kcat), a broker, and a simple WebSocket to run the AsyncAPI gateway in your machine.\nCheck out an AsyncAPI file demo with Studio to learn more about how an AsyncAPI file can be used in gateway validation.\nRememberCurrently, only the Kafka protocol is supported.\n#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?Fail\nThe AsyncAPI document is important because payload schemas are taken from it, and messages are validated against it in your application.\nYou can spin up the AsyncAPI gateway using an AsyncAPI file. All the messages are forwarded to a WebSocket endpoint; if the message/payload is invalid, it includes a validation error message.\nSchema Registry validation\nProducers and consumers do not communicate with each other directly; rather, information transfer happens via Kafka. At the same time, the consumer still needs to know the type of data the producer is sending. Imagine if the producer starts sending bad data to Kafka or if the data type of your data gets changed. We need a way to have a common data type that must be agreed upon.\nThis is where Schema Registry comes into play. It is an application that runs outside your Kafka protocol and handles schema distribution to producers and consumers by storing a copy of the schema in its local cache and validating them in Kafka.\n#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumer\nWith the Schema Registry in place, the producer first talks to the Schema Registry and checks if the schema of the message it wants to send is available before sending it to the broker. If it cannot locate the schema, it registers it in the Schema Registry. Then the producer sends a message to the broker prefixed with a unique schema ID. When the consumer processes this message, it will communicate with the Schema Registry using the schema ID obtained from the producer. If there is a schema mismatch, the Schema Registry will throw an error, informing the producer that it violates the schema agreement.\nAsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:\n1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'",
    "sections": [
      {
        "title": "Introduction",
        "level": 2,
        "text": "This guide explains different concepts of validating messages in event-driven communication. You will also learn what role AsyncAPI documents play in validation."
      },
      {
        "title": "Message validation",
        "level": 2,
        "text": "To understand message validation in event-driven communication, we must first understand the basic components involved.\nProducer: responsible for producing messages.\nConsumer: responsible for getting the producer's messages.\nBroker: acts as a bridge between the consumer and the producer because messages travel through the broker.\nMessage validation can occur in different places in your system. This guide highlights three of those:\nBoth producers and consumers can do validation internally during runtime.\nAPI Gateway can handle message validation.\nValidation of messages can be a native solution implemented by the Schema Registry.\nBecause consumers and producers cannot communicate directly, the AsyncAPI file dictates what should be included in the payload when a service produces a message. The AsyncAPI document also tells the consumer about the message's properties.\nLet's further break down how validation works for all.\nRuntime validationMessages produced and consumed are both required for runtime message validation. The AsyncAPI document should include descriptions of payload schemas so that you can read them in your application and validate messages that are consumed and produced by the application.Before messages reach the consumer, runtime validation ensures that any errors are resolved and valid messages are sent to your application.An example implementation of message validation in runtime is the asyncapi-validator library that enables you to validate messages produced/consumed in your application against schemas provided in your AsyncAPI document.\nCheck out the message validation in the runtime tutorial if you want to get your hands dirty with message validation.#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ConsumerProducerMessageNoYesMessageNoYesLogsIs Message valid?Message consumedIs Message valid?Message producedLogsBrokerGateway validationA gateway intercepts all incoming messages and routes them through the middleware and handler pipelines. The gateway sits between the producer and the broker. First, the messages are routed through the gateway, and then the gateway determines whether the message is valid. If the message is invalid, it displays an error and is not forwarded to the broker.An example implementation of message validation in a gateway is the AsyncAPI gateway. It intercepts all incoming messages moving them into a pipeline of middlewares and handlers such as message validation. You can use a Kafka consumer/producer(kcat), a broker, and a simple WebSocket to run the AsyncAPI gateway in your machine.\nCheck out an AsyncAPI file demo with Studio to learn more about how an AsyncAPI file can be used in gateway validation.RememberCurrently, only the Kafka protocol is supported.#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?FailThe AsyncAPI document is important because payload schemas are taken from it, and messages are validated against it in your application.\nYou can spin up the AsyncAPI gateway using an AsyncAPI file. All the messages are forwarded to a WebSocket endpoint; if the message/payload is invalid, it includes a validation error message.Schema Registry validationProducers and consumers do not communicate with each other directly; rather, information transfer happens via Kafka. At the same time, the consumer still needs to know the type of data the producer is sending. Imagine if the producer starts sending bad data to Kafka or if the data type of your data gets changed. We need a way to have a common data type that must be agreed upon.This is where Schema Registry comes into play. It is an application that runs outside your Kafka protocol and handles schema distribution to producers and consumers by storing a copy of the schema in its local cache and validating them in Kafka.#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumerWith the Schema Registry in place, the producer first talks to the Schema Registry and checks if the schema of the message it wants to send is available before sending it to the broker. If it cannot locate the schema, it registers it in the Schema Registry. Then the producer sends a message to the broker prefixed with a unique schema ID. When the consumer processes this message, it will communicate with the Schema Registry using the schema ID obtained from the producer. If there is a schema mismatch, the Schema Registry will throw an error, informing the producer that it violates the schema agreement.AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'"
      },
      {
        "title": "Runtime validation",
        "level": 3,
        "text": "Messages produced and consumed are both required for runtime message validation. The AsyncAPI document should include descriptions of payload schemas so that you can read them in your application and validate messages that are consumed and produced by the application.Before messages reach the consumer, runtime validation ensures that any errors are resolved and valid messages are sent to your application.An example implementation of message validation in runtime is the asyncapi-validator library that enables you to validate messages produced/consumed in your application against schemas provided in your AsyncAPI document.\nCheck out the message validation in the runtime tutorial if you want to get your hands dirty with message validation."
      },
      {
        "title": "Gateway validation",
        "level": 3,
        "text": "A gateway intercepts all incoming messages and routes them through the middleware and handler pipelines. The gateway sits between the producer and the broker. First, the messages are routed through the gateway, and then the gateway determines whether the message is valid. If the message is invalid, it displays an error and is not forwarded to the broker.An example implementation of message validation in a gateway is the AsyncAPI gateway. It intercepts all incoming messages moving them into a pipeline of middlewares and handlers such as message validation. You can use a Kafka consumer/producer(kcat), a broker, and a simple WebSocket to run the AsyncAPI gateway in your machine.\nCheck out an AsyncAPI file demo with Studio to learn more about how an AsyncAPI file can be used in gateway validation.RememberCurrently, only the Kafka protocol is supported.#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?FailThe AsyncAPI document is important because payload schemas are taken from it, and messages are validated against it in your application.\nYou can spin up the AsyncAPI gateway using an AsyncAPI file. All the messages are forwarded to a WebSocket endpoint; if the message/payload is invalid, it includes a validation error message."
      },
      {
        "title": "Remember",
        "level": 5,
        "text": "Currently, only the Kafka protocol is supported."
      },
      {
        "title": "Schema Registry validation",
        "level": 3,
        "text": "Producers and consumers do not communicate with each other directly; rather, information transfer happens via Kafka. At the same time, the consumer still needs to know the type of data the producer is sending. Imagine if the producer starts sending bad data to Kafka or if the data type of your data gets changed. We need a way to have a common data type that must be agreed upon.This is where Schema Registry comes into play. It is an application that runs outside your Kafka protocol and handles schema distribution to producers and consumers by storing a copy of the schema in its local cache and validating them in Kafka.#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumerWith the Schema Registry in place, the producer first talks to the Schema Registry and checks if the schema of the message it wants to send is available before sending it to the broker. If it cannot locate the schema, it registers it in the Schema Registry. Then the producer sends a message to the broker prefixed with a unique schema ID. When the consumer processes this message, it will communicate with the Schema Registry using the schema ID obtained from the producer. If there is a schema mismatch, the Schema Registry will throw an error, informing the producer that it violates the schema agreement.AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'"
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg id=\"mermaid-0\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width: 583.75px;\" viewBox=\"-8 -8 583.75 965.875\" aria-roledescription=\"flowchart-v2\"><style>#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker id=\"flowchart-pointEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"10\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-pointStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"0\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 5 L 10 10 L 10 0 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-circleEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"11\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-circleStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"-1\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-crossEnd\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"12\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-crossStart\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"-1\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><g class=\"root\"><g class=\"clusters\"><g class=\"cluster default\" id=\"Consumer\"><rect style=\"\" rx=\"0\" ry=\"0\" x=\"161.443359375\" y=\"572.9375\" width=\"406.306640625\" height=\"376.9375\"></rect><g class=\"cluster-label\" transform=\"translate(320.7138671875, 572.9375)\"><foreignObject width=\"87.765625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Consumer</span></div></foreignObject></g></g><g class=\"cluster default\" id=\"Producer\"><rect style=\"\" rx=\"0\" ry=\"0\" x=\"0\" y=\"0\" width=\"277.9375\" height=\"495.9375\"></rect><g class=\"cluster-label\" transform=\"translate(99.97265625, 0)\"><foreignObject width=\"77.9921875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Producer</span></div></foreignObject></g></g></g><g class=\"edgePaths\"><path d=\"M138.969,67L138.969,73.417C138.969,79.833,138.969,92.667,139.052,105.583C139.135,118.5,139.302,131.5,139.385,138L139.469,144.5\" id=\"L-G-B-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-G LE-B\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M117.643,330.611L114.888,340.582C112.133,350.553,106.623,370.495,103.868,386.883C101.113,403.271,101.113,416.104,101.113,422.521L101.113,428.938\" id=\"L-B-A-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-B LE-A\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M167.181,324.725L171.109,335.677C175.036,346.629,182.89,368.533,207.183,387.175C231.475,405.816,272.206,421.194,292.572,428.883L312.938,436.573\" id=\"L-B-C-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-B LE-C\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M348.336,470.938L348.336,475.104C348.336,479.271,348.336,487.604,348.336,498.188C348.336,508.771,348.336,521.604,348.336,534.438C348.336,547.271,348.336,560.104,348.419,570.771C348.503,581.438,348.669,589.938,348.753,594.188L348.836,598.438\" id=\"L-C-E-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-E\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M309.763,767.302L301.895,780.147C294.027,792.993,278.292,818.684,270.424,837.946C262.557,857.208,262.557,870.042,262.557,876.458L262.557,882.875\" id=\"L-E-F-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-E LE-F\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M387.909,767.302L395.61,780.147C403.311,792.993,418.713,818.684,426.414,837.946C434.115,857.208,434.115,870.042,434.115,876.458L434.115,882.875\" id=\"L-E-H-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-E LE-H\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"translate(138.96875, 105.5)\"><g class=\"label\" transform=\"translate(-38.69921875, -13.5)\"><foreignObject width=\"77.3984375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Message</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(101.11328125, 390.4375)\"><g class=\"label\" transform=\"translate(-12.1796875, -13.5)\"><foreignObject width=\"24.359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">No</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(190.744140625, 390.4375)\"><g class=\"label\" transform=\"translate(-15.41796875, -13.5)\"><foreignObject width=\"30.8359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Yes</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(348.3359375, 534.4375)\"><g class=\"label\" transform=\"translate(-38.69921875, -13.5)\"><foreignObject width=\"77.3984375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Message</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(262.556640625, 844.375)\"><g class=\"label\" transform=\"translate(-12.1796875, -13.5)\"><foreignObject width=\"24.359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">No</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(434.115234375, 844.375)\"><g class=\"label\" transform=\"translate(-15.41796875, -13.5)\"><foreignObject width=\"30.8359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Yes</span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node default default\" id=\"flowchart-F-33\" transform=\"translate(262.556640625, 903.875)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-28.2578125\" y=\"-21\" width=\"56.515625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-20.7578125, -13.5)\"><foreignObject width=\"41.515625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Logs</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-E-31\" transform=\"translate(348.3359375, 701.90625)\"><polygon points=\"103.96875,0 207.9375,-103.96875 103.96875,-207.9375 0,-103.96875\" class=\"label-container\" transform=\"translate(-103.96875,103.96875)\" style=\"\"></polygon><g class=\"label\" style=\"\" transform=\"translate(-75.46875, -13.5)\"><foreignObject width=\"150.9375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Is Message valid?</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-H-35\" transform=\"translate(434.115234375, 903.875)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-93.30078125\" y=\"-21\" width=\"186.6015625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-85.80078125, -13.5)\"><foreignObject width=\"171.6015625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Message consumed</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-B-25\" transform=\"translate(138.96875, 247.96875)\"><polygon points=\"103.96875,0 207.9375,-103.96875 103.96875,-207.9375 0,-103.96875\" class=\"label-container\" transform=\"translate(-103.96875,103.96875)\" style=\"\"></polygon><g class=\"label\" style=\"\" transform=\"translate(-75.46875, -13.5)\"><foreignObject width=\"150.9375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Is Message valid?</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-G-24\" transform=\"translate(138.96875, 46)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-89.609375\" y=\"-21\" width=\"179.21875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-82.109375, -13.5)\"><foreignObject width=\"164.21875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Message produced</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-A-27\" transform=\"translate(101.11328125, 449.9375)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-28.2578125\" y=\"-21\" width=\"56.515625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-20.7578125, -13.5)\"><foreignObject width=\"41.515625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Logs</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-C-29\" transform=\"translate(348.3359375, 449.9375)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-35.3984375\" y=\"-21\" width=\"70.796875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-27.8984375, -13.5)\"><foreignObject width=\"55.796875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Broker</span></div></foreignObject></g></g></g></g></g></svg>",
        "context": "#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ConsumerProducerMessageNoYesMessageNoYesLogsIs Message valid?Message consumedIs Message valid?Message producedLogsBroker",
        "description": "SVG containing 10 paths, 2 circles, and 7 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg id=\"mermaid-1\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width: 503.326171875px;\" viewBox=\"-8 -8 503.326171875 864.390625\" aria-roledescription=\"flowchart-v2\"><style>#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker id=\"flowchart-pointEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"10\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-pointStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"0\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 5 L 10 10 L 10 0 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-circleEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"11\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-circleStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"-1\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-crossEnd\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"12\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-crossStart\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"-1\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path d=\"M194.119,42L180.999,48.417C167.88,54.833,141.641,67.667,128.522,80.5C115.402,93.333,115.402,106.167,115.402,112.583L115.402,119\" id=\"L-PR-EG-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-PR LE-EG\" style=\"fill:none;\"></path><path d=\"M115.402,161L115.402,167.417C115.402,173.833,115.402,186.667,115.486,199.583C115.569,212.5,115.736,225.5,115.819,232L115.902,238.5\" id=\"L-EG-EGV-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-EG LE-EGV\" style=\"fill:none;\"></path><path d=\"M79.48,410.015L72.663,422.419C65.847,434.823,52.213,459.63,45.397,495.655C38.58,531.68,38.58,578.922,38.58,626.164C38.58,673.406,38.58,720.648,40.315,750.686C42.05,780.724,45.521,793.557,47.256,799.974L48.991,806.391\" id=\"L-EGV-BR-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-EGV LE-BR\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M152.325,410.015L158.975,422.419C165.625,434.823,178.925,459.63,185.658,478.534C192.391,497.438,192.558,510.438,192.641,516.938L192.725,523.438\" id=\"L-EGV-INV-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-EGV LE-INV\" style=\"fill:none;\"></path><path d=\"M220.2,702.416L224.105,713.328C228.009,724.241,235.819,746.066,256.667,765.307C277.514,784.549,311.4,801.208,328.343,809.537L345.286,817.866\" id=\"L-INV-ERR-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-INV LE-ERR\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M372.031,806.891L373.858,800.391C375.684,793.891,379.337,780.891,381.164,750.77C382.99,720.648,382.99,673.406,382.99,626.164C382.99,578.922,382.99,531.68,382.99,484.314C382.99,436.948,382.99,389.458,382.99,341.969C382.99,294.479,382.99,246.99,382.99,213.328C382.99,179.667,382.99,159.833,382.99,140C382.99,120.167,382.99,100.333,366.417,83.66C349.844,66.986,316.697,53.471,300.124,46.714L283.551,39.957\" id=\"L-ERR-PR-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-ERR LE-PR\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M161.759,698.925L156.715,710.42C151.67,721.914,141.581,744.902,128.252,762.813C114.923,780.724,98.353,793.557,90.068,799.974L81.784,806.391\" id=\"L-INV-BR-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-INV LE-BR\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\" transform=\"translate(115.40234375, 80.5)\"><g class=\"label\" transform=\"translate(-38.69921875, -13.5)\"><foreignObject width=\"77.3984375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Message</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(115.40234375, 199.5)\"><g class=\"label\" transform=\"translate(-38.69921875, -13.5)\"><foreignObject width=\"77.3984375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Message</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(38.580078125, 626.1640625)\"><g class=\"label\" transform=\"translate(-15.41796875, -13.5)\"><foreignObject width=\"30.8359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Yes</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(192.224609375, 484.4375)\"><g class=\"label\" transform=\"translate(-12.1796875, -13.5)\"><foreignObject width=\"24.359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">No</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(243.62890625, 767.890625)\"><g class=\"label\" transform=\"translate(-15.41796875, -13.5)\"><foreignObject width=\"30.8359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Yes</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(382.990234375, 341.96875)\"><g class=\"label\" transform=\"translate(-104.3359375, -13.5)\"><foreignObject width=\"208.671875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">Produce request errored</span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(131.4921875, 767.890625)\"><g class=\"label\" transform=\"translate(-12.1796875, -13.5)\"><foreignObject width=\"24.359375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">No</span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node default default\" id=\"flowchart-PR-64\" transform=\"translate(237.0546875, 21)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-46.49609375\" y=\"-21\" width=\"92.9921875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-38.99609375, -13.5)\"><foreignObject width=\"77.9921875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Producer</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-EG-65\" transform=\"translate(115.40234375, 140)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-115.40234375\" y=\"-21\" width=\"230.8046875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-107.90234375, -13.5)\"><foreignObject width=\"215.8046875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">AsyncAPI Event-Gateway</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-EGV-67\" transform=\"translate(115.40234375, 341.96875)\"><polygon points=\"103.96875,0 207.9375,-103.96875 103.96875,-207.9375 0,-103.96875\" class=\"label-container\" transform=\"translate(-103.96875,103.96875)\" style=\"\"></polygon><g class=\"label\" style=\"\" transform=\"translate(-75.46875, -13.5)\"><foreignObject width=\"150.9375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Is Message valid?</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-BR-69\" transform=\"translate(54.669921875, 827.390625)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-35.3984375\" y=\"-21\" width=\"70.796875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-27.8984375, -13.5)\"><foreignObject width=\"55.796875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Broker</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-INV-71\" transform=\"translate(192.224609375, 626.1640625)\"><polygon points=\"103.2265625,0 206.453125,-103.2265625 103.2265625,-206.453125 0,-103.2265625\" class=\"label-container\" transform=\"translate(-103.2265625,103.2265625)\" style=\"\"></polygon><g class=\"label\" style=\"\" transform=\"translate(-74.7265625, -13.5)\"><foreignObject width=\"149.453125\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Fail when invalid?</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-ERR-73\" transform=\"translate(365.28125, 827.390625)\"><polygon points=\"-14,0 37.015625,0 58.015625,-42 7,-42\" class=\"label-container\" transform=\"translate(-22.0078125,21)\" style=\"\"></polygon><g class=\"label\" style=\"\" transform=\"translate(-14.5078125, -13.5)\"><foreignObject width=\"29.015625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">Fail</span></div></foreignObject></g></g></g></g></g></svg>",
        "context": "#mermaid-1{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-1 .error-icon{fill:#F7F9FA;}#mermaid-1 .error-text{fill:#080605;stroke:#080605;}#mermaid-1 .edge-thickness-normal{stroke-width:2px;}#mermaid-1 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-1 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-1 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-1 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-1 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-1 .marker.cross{stroke:#0b0b0b;}#mermaid-1 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-1 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-1 .cluster-label text{fill:#080605;}#mermaid-1 .cluster-label span{color:#080605;}#mermaid-1 .label text,#mermaid-1 span{fill:#242929;color:#242929;}#mermaid-1 .node rect,#mermaid-1 .node circle,#mermaid-1 .node ellipse,#mermaid-1 .node polygon,#mermaid-1 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-1 .node .label{text-align:center;}#mermaid-1 .node.clickable{cursor:pointer;}#mermaid-1 .arrowheadPath{fill:undefined;}#mermaid-1 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-1 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-1 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-1 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-1 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-1 .cluster text{fill:#080605;}#mermaid-1 .cluster span{color:#080605;}#mermaid-1 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-1 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-1 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}MessageMessageYesNoYesProduce request erroredNoProducerAsyncAPI Event-GatewayIs Message valid?BrokerFail when invalid?Fail",
        "description": "SVG containing 11 paths, 2 circles, and 3 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg id=\"mermaid-2\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width: 989px;\" viewBox=\"-50 -10 989 471\" aria-roledescription=\"sequence\"><style>#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor&gt;tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText&gt;tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText&gt;tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText&gt;tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g></g><defs><symbol id=\"computer\" width=\"24\" height=\"24\"><path transform=\"scale(.5)\" d=\"M2 2v13h20v-13h-20zm18 11h-16v-9h16v9zm-10.228 6l.466-1h3.524l.467 1h-4.457zm14.228 3h-24l2-6h2.104l-1.33 4h18.45l-1.297-4h2.073l2 6zm-5-10h-14v-7h14v7z\"></path></symbol></defs><defs><symbol id=\"database\" fill-rule=\"evenodd\" clip-rule=\"evenodd\"><path transform=\"scale(.5)\" d=\"M12.258.001l.256.004.255.005.253.008.251.01.249.012.247.015.246.016.242.019.241.02.239.023.236.024.233.027.231.028.229.031.225.032.223.034.22.036.217.038.214.04.211.041.208.043.205.045.201.046.198.048.194.05.191.051.187.053.183.054.18.056.175.057.172.059.168.06.163.061.16.063.155.064.15.066.074.033.073.033.071.034.07.034.069.035.068.035.067.035.066.035.064.036.064.036.062.036.06.036.06.037.058.037.058.037.055.038.055.038.053.038.052.038.051.039.05.039.048.039.047.039.045.04.044.04.043.04.041.04.04.041.039.041.037.041.036.041.034.041.033.042.032.042.03.042.029.042.027.042.026.043.024.043.023.043.021.043.02.043.018.044.017.043.015.044.013.044.012.044.011.045.009.044.007.045.006.045.004.045.002.045.001.045v17l-.001.045-.002.045-.004.045-.006.045-.007.045-.009.044-.011.045-.012.044-.013.044-.015.044-.017.043-.018.044-.02.043-.021.043-.023.043-.024.043-.026.043-.027.042-.029.042-.03.042-.032.042-.033.042-.034.041-.036.041-.037.041-.039.041-.04.041-.041.04-.043.04-.044.04-.045.04-.047.039-.048.039-.05.039-.051.039-.052.038-.053.038-.055.038-.055.038-.058.037-.058.037-.06.037-.06.036-.062.036-.064.036-.064.036-.066.035-.067.035-.068.035-.069.035-.07.034-.071.034-.073.033-.074.033-.15.066-.155.064-.16.063-.163.061-.168.06-.172.059-.175.057-.18.056-.183.054-.187.053-.191.051-.194.05-.198.048-.201.046-.205.045-.208.043-.211.041-.214.04-.217.038-.22.036-.223.034-.225.032-.229.031-.231.028-.233.027-.236.024-.239.023-.241.02-.242.019-.246.016-.247.015-.249.012-.251.01-.253.008-.255.005-.256.004-.258.001-.258-.001-.256-.004-.255-.005-.253-.008-.251-.01-.249-.012-.247-.015-.245-.016-.243-.019-.241-.02-.238-.023-.236-.024-.234-.027-.231-.028-.228-.031-.226-.032-.223-.034-.22-.036-.217-.038-.214-.04-.211-.041-.208-.043-.204-.045-.201-.046-.198-.048-.195-.05-.19-.051-.187-.053-.184-.054-.179-.056-.176-.057-.172-.059-.167-.06-.164-.061-.159-.063-.155-.064-.151-.066-.074-.033-.072-.033-.072-.034-.07-.034-.069-.035-.068-.035-.067-.035-.066-.035-.064-.036-.063-.036-.062-.036-.061-.036-.06-.037-.058-.037-.057-.037-.056-.038-.055-.038-.053-.038-.052-.038-.051-.039-.049-.039-.049-.039-.046-.039-.046-.04-.044-.04-.043-.04-.041-.04-.04-.041-.039-.041-.037-.041-.036-.041-.034-.041-.033-.042-.032-.042-.03-.042-.029-.042-.027-.042-.026-.043-.024-.043-.023-.043-.021-.043-.02-.043-.018-.044-.017-.043-.015-.044-.013-.044-.012-.044-.011-.045-.009-.044-.007-.045-.006-.045-.004-.045-.002-.045-.001-.045v-17l.001-.045.002-.045.004-.045.006-.045.007-.045.009-.044.011-.045.012-.044.013-.044.015-.044.017-.043.018-.044.02-.043.021-.043.023-.043.024-.043.026-.043.027-.042.029-.042.03-.042.032-.042.033-.042.034-.041.036-.041.037-.041.039-.041.04-.041.041-.04.043-.04.044-.04.046-.04.046-.039.049-.039.049-.039.051-.039.052-.038.053-.038.055-.038.056-.038.057-.037.058-.037.06-.037.061-.036.062-.036.063-.036.064-.036.066-.035.067-.035.068-.035.069-.035.07-.034.072-.034.072-.033.074-.033.151-.066.155-.064.159-.063.164-.061.167-.06.172-.059.176-.057.179-.056.184-.054.187-.053.19-.051.195-.05.198-.048.201-.046.204-.045.208-.043.211-.041.214-.04.217-.038.22-.036.223-.034.226-.032.228-.031.231-.028.234-.027.236-.024.238-.023.241-.02.243-.019.245-.016.247-.015.249-.012.251-.01.253-.008.255-.005.256-.004.258-.001.258.001zm-9.258 20.499v.01l.001.021.003.021.004.022.005.021.006.022.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.023.018.024.019.024.021.024.022.025.023.024.024.025.052.049.056.05.061.051.066.051.07.051.075.051.079.052.084.052.088.052.092.052.097.052.102.051.105.052.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.048.144.049.147.047.152.047.155.047.16.045.163.045.167.043.171.043.176.041.178.041.183.039.187.039.19.037.194.035.197.035.202.033.204.031.209.03.212.029.216.027.219.025.222.024.226.021.23.02.233.018.236.016.24.015.243.012.246.01.249.008.253.005.256.004.259.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.021.224-.024.22-.026.216-.027.212-.028.21-.031.205-.031.202-.034.198-.034.194-.036.191-.037.187-.039.183-.04.179-.04.175-.042.172-.043.168-.044.163-.045.16-.046.155-.046.152-.047.148-.048.143-.049.139-.049.136-.05.131-.05.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.053.083-.051.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.05.023-.024.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.023.01-.022.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.127l-.077.055-.08.053-.083.054-.085.053-.087.052-.09.052-.093.051-.095.05-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.045-.118.044-.12.043-.122.042-.124.042-.126.041-.128.04-.13.04-.132.038-.134.038-.135.037-.138.037-.139.035-.142.035-.143.034-.144.033-.147.032-.148.031-.15.03-.151.03-.153.029-.154.027-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.01-.179.008-.179.008-.181.006-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.006-.179-.008-.179-.008-.178-.01-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.027-.153-.029-.151-.03-.15-.03-.148-.031-.146-.032-.145-.033-.143-.034-.141-.035-.14-.035-.137-.037-.136-.037-.134-.038-.132-.038-.13-.04-.128-.04-.126-.041-.124-.042-.122-.042-.12-.044-.117-.043-.116-.045-.113-.045-.112-.046-.109-.047-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.05-.093-.052-.09-.051-.087-.052-.085-.053-.083-.054-.08-.054-.077-.054v4.127zm0-5.654v.011l.001.021.003.021.004.021.005.022.006.022.007.022.009.022.01.022.011.023.012.023.013.023.015.024.016.023.017.024.018.024.019.024.021.024.022.024.023.025.024.024.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.052.11.051.114.051.119.052.123.05.127.051.131.05.135.049.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.044.171.042.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.022.23.02.233.018.236.016.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.012.241-.015.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.048.139-.05.136-.049.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.051.051-.049.023-.025.023-.024.021-.025.02-.024.019-.024.018-.024.017-.024.015-.023.014-.023.013-.024.012-.022.01-.023.01-.023.008-.022.006-.022.006-.022.004-.021.004-.022.001-.021.001-.021v-4.139l-.077.054-.08.054-.083.054-.085.052-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.049-.105.048-.106.047-.109.047-.111.046-.114.045-.115.044-.118.044-.12.044-.122.042-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.035-.143.033-.144.033-.147.033-.148.031-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.025-.161.024-.162.023-.163.022-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.011-.178.009-.179.009-.179.007-.181.007-.182.005-.182.004-.184.003-.184.002h-.37l-.184-.002-.184-.003-.182-.004-.182-.005-.181-.007-.179-.007-.179-.009-.178-.009-.176-.011-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.022-.162-.023-.161-.024-.159-.025-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.031-.146-.033-.145-.033-.143-.033-.141-.035-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.04-.126-.041-.124-.042-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.047-.105-.048-.102-.049-.1-.049-.097-.05-.095-.051-.093-.051-.09-.051-.087-.053-.085-.052-.083-.054-.08-.054-.077-.054v4.139zm0-5.666v.011l.001.02.003.022.004.021.005.022.006.021.007.022.009.023.01.022.011.023.012.023.013.023.015.023.016.024.017.024.018.023.019.024.021.025.022.024.023.024.024.025.052.05.056.05.061.05.066.051.07.051.075.052.079.051.084.052.088.052.092.052.097.052.102.052.105.051.11.052.114.051.119.051.123.051.127.05.131.05.135.05.139.049.144.048.147.048.152.047.155.046.16.045.163.045.167.043.171.043.176.042.178.04.183.04.187.038.19.037.194.036.197.034.202.033.204.032.209.03.212.028.216.027.219.025.222.024.226.021.23.02.233.018.236.017.24.014.243.012.246.01.249.008.253.006.256.003.259.001.26-.001.257-.003.254-.006.25-.008.247-.01.244-.013.241-.014.237-.016.233-.018.231-.02.226-.022.224-.024.22-.025.216-.027.212-.029.21-.03.205-.032.202-.033.198-.035.194-.036.191-.037.187-.039.183-.039.179-.041.175-.042.172-.043.168-.044.163-.045.16-.045.155-.047.152-.047.148-.048.143-.049.139-.049.136-.049.131-.051.126-.05.123-.051.118-.052.114-.051.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.052.07-.051.065-.051.06-.051.056-.05.051-.049.023-.025.023-.025.021-.024.02-.024.019-.024.018-.024.017-.024.015-.023.014-.024.013-.023.012-.023.01-.022.01-.023.008-.022.006-.022.006-.022.004-.022.004-.021.001-.021.001-.021v-4.153l-.077.054-.08.054-.083.053-.085.053-.087.053-.09.051-.093.051-.095.051-.097.05-.1.049-.102.048-.105.048-.106.048-.109.046-.111.046-.114.046-.115.044-.118.044-.12.043-.122.043-.124.042-.126.041-.128.04-.13.039-.132.039-.134.038-.135.037-.138.036-.139.036-.142.034-.143.034-.144.033-.147.032-.148.032-.15.03-.151.03-.153.028-.154.028-.156.027-.158.026-.159.024-.161.024-.162.023-.163.023-.165.021-.166.02-.167.019-.169.018-.169.017-.171.016-.173.015-.173.014-.175.013-.175.012-.177.01-.178.01-.179.009-.179.007-.181.006-.182.006-.182.004-.184.003-.184.001-.185.001-.185-.001-.184-.001-.184-.003-.182-.004-.182-.006-.181-.006-.179-.007-.179-.009-.178-.01-.176-.01-.176-.012-.175-.013-.173-.014-.172-.015-.171-.016-.17-.017-.169-.018-.167-.019-.166-.02-.165-.021-.163-.023-.162-.023-.161-.024-.159-.024-.157-.026-.156-.027-.155-.028-.153-.028-.151-.03-.15-.03-.148-.032-.146-.032-.145-.033-.143-.034-.141-.034-.14-.036-.137-.036-.136-.037-.134-.038-.132-.039-.13-.039-.128-.041-.126-.041-.124-.041-.122-.043-.12-.043-.117-.044-.116-.044-.113-.046-.112-.046-.109-.046-.106-.048-.105-.048-.102-.048-.1-.05-.097-.049-.095-.051-.093-.051-.09-.052-.087-.052-.085-.053-.083-.053-.08-.054-.077-.054v4.153zm8.74-8.179l-.257.004-.254.005-.25.008-.247.011-.244.012-.241.014-.237.016-.233.018-.231.021-.226.022-.224.023-.22.026-.216.027-.212.028-.21.031-.205.032-.202.033-.198.034-.194.036-.191.038-.187.038-.183.04-.179.041-.175.042-.172.043-.168.043-.163.045-.16.046-.155.046-.152.048-.148.048-.143.048-.139.049-.136.05-.131.05-.126.051-.123.051-.118.051-.114.052-.11.052-.106.052-.101.052-.096.052-.092.052-.088.052-.083.052-.079.052-.074.051-.07.052-.065.051-.06.05-.056.05-.051.05-.023.025-.023.024-.021.024-.02.025-.019.024-.018.024-.017.023-.015.024-.014.023-.013.023-.012.023-.01.023-.01.022-.008.022-.006.023-.006.021-.004.022-.004.021-.001.021-.001.021.001.021.001.021.004.021.004.022.006.021.006.023.008.022.01.022.01.023.012.023.013.023.014.023.015.024.017.023.018.024.019.024.02.025.021.024.023.024.023.025.051.05.056.05.06.05.065.051.07.052.074.051.079.052.083.052.088.052.092.052.096.052.101.052.106.052.11.052.114.052.118.051.123.051.126.051.131.05.136.05.139.049.143.048.148.048.152.048.155.046.16.046.163.045.168.043.172.043.175.042.179.041.183.04.187.038.191.038.194.036.198.034.202.033.205.032.21.031.212.028.216.027.22.026.224.023.226.022.231.021.233.018.237.016.241.014.244.012.247.011.25.008.254.005.257.004.26.001.26-.001.257-.004.254-.005.25-.008.247-.011.244-.012.241-.014.237-.016.233-.018.231-.021.226-.022.224-.023.22-.026.216-.027.212-.028.21-.031.205-.032.202-.033.198-.034.194-.036.191-.038.187-.038.183-.04.179-.041.175-.042.172-.043.168-.043.163-.045.16-.046.155-.046.152-.048.148-.048.143-.048.139-.049.136-.05.131-.05.126-.051.123-.051.118-.051.114-.052.11-.052.106-.052.101-.052.096-.052.092-.052.088-.052.083-.052.079-.052.074-.051.07-.052.065-.051.06-.05.056-.05.051-.05.023-.025.023-.024.021-.024.02-.025.019-.024.018-.024.017-.023.015-.024.014-.023.013-.023.012-.023.01-.023.01-.022.008-.022.006-.023.006-.021.004-.022.004-.021.001-.021.001-.021-.001-.021-.001-.021-.004-.021-.004-.022-.006-.021-.006-.023-.008-.022-.01-.022-.01-.023-.012-.023-.013-.023-.014-.023-.015-.024-.017-.023-.018-.024-.019-.024-.02-.025-.021-.024-.023-.024-.023-.025-.051-.05-.056-.05-.06-.05-.065-.051-.07-.052-.074-.051-.079-.052-.083-.052-.088-.052-.092-.052-.096-.052-.101-.052-.106-.052-.11-.052-.114-.052-.118-.051-.123-.051-.126-.051-.131-.05-.136-.05-.139-.049-.143-.048-.148-.048-.152-.048-.155-.046-.16-.046-.163-.045-.168-.043-.172-.043-.175-.042-.179-.041-.183-.04-.187-.038-.191-.038-.194-.036-.198-.034-.202-.033-.205-.032-.21-.031-.212-.028-.216-.027-.22-.026-.224-.023-.226-.022-.231-.021-.233-.018-.237-.016-.241-.014-.244-.012-.247-.011-.25-.008-.254-.005-.257-.004-.26-.001-.26.001z\"></path></symbol></defs><defs><symbol id=\"clock\" width=\"24\" height=\"24\"><path transform=\"scale(.5)\" d=\"M12 2c5.514 0 10 4.486 10 10s-4.486 10-10 10-10-4.486-10-10 4.486-10 10-10zm0-2c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm5.848 12.459c.202.038.202.333.001.372-1.907.361-6.045 1.111-6.547 1.111-.719 0-1.301-.582-1.301-1.301 0-.512.77-5.447 1.125-7.445.034-.192.312-.181.343.014l.985 6.238 5.394 1.011z\"></path></symbol></defs><g><line id=\"actor0\" x1=\"75\" y1=\"5\" x2=\"75\" y2=\"405\" class=\"200\" stroke-width=\"0.5px\" stroke=\"#999\"></line><g id=\"root-0\"><rect x=\"0\" y=\"0\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"75\" y=\"32.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"75\" dy=\"0\">Producer</tspan></text></g></g><g><line id=\"actor1\" x1=\"403\" y1=\"5\" x2=\"403\" y2=\"405\" class=\"200\" stroke-width=\"0.5px\" stroke=\"#999\"></line><g id=\"root-1\"><rect x=\"328\" y=\"0\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"403\" y=\"32.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"403\" dy=\"0\">Schema Registry</tspan></text></g></g><g><line id=\"actor2\" x1=\"603\" y1=\"5\" x2=\"603\" y2=\"405\" class=\"200\" stroke-width=\"0.5px\" stroke=\"#999\"></line><g id=\"root-2\"><rect x=\"528\" y=\"0\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"603\" y=\"32.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"603\" dy=\"0\">Kafka</tspan></text></g></g><g><line id=\"actor3\" x1=\"814\" y1=\"5\" x2=\"814\" y2=\"405\" class=\"200\" stroke-width=\"0.5px\" stroke=\"#999\"></line><g id=\"root-3\"><rect x=\"739\" y=\"0\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"814\" y=\"32.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"814\" dy=\"0\">Consumer</tspan></text></g></g><defs><marker id=\"arrowhead\" refX=\"9\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\"></path></marker></defs><defs><marker id=\"crosshead\" markerWidth=\"15\" markerHeight=\"8\" orient=\"auto\" refX=\"4\" refY=\"5\"><path fill=\"none\" stroke=\"#000000\" stroke-width=\"1pt\" d=\"M 1,2 L 6,7 M 6,2 L 1,7\" style=\"stroke-dasharray: 0, 0;\"></path></marker></defs><defs><marker id=\"filled-head\" refX=\"18\" refY=\"7\" markerWidth=\"20\" markerHeight=\"28\" orient=\"auto\"><path d=\"M 18,7 L9,13 L14,7 L9,1 Z\"></path></marker></defs><defs><marker id=\"sequencenumber\" refX=\"15\" refY=\"15\" markerWidth=\"60\" markerHeight=\"40\" orient=\"auto\"><circle cx=\"15\" cy=\"15\" r=\"6\"></circle></marker></defs><text x=\"239\" y=\"80\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Register/checks message schema</text><line x1=\"75\" y1=\"115\" x2=\"403\" y2=\"115\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><text x=\"239\" y=\"130\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Return registration result</text><line x1=\"403\" y1=\"165\" x2=\"75\" y2=\"165\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><text x=\"339\" y=\"180\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Publish message</text><line x1=\"75\" y1=\"215\" x2=\"603\" y2=\"215\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><text x=\"709\" y=\"230\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Recieves message</text><line x1=\"603\" y1=\"265\" x2=\"814\" y2=\"265\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><text x=\"609\" y=\"280\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Validate message schema</text><line x1=\"814\" y1=\"315\" x2=\"403\" y2=\"315\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><text x=\"609\" y=\"330\" text-anchor=\"middle\" dominant-baseline=\"middle\" alignment-baseline=\"middle\" class=\"messageText\" dy=\"1em\" style=\"font-size: 16px; font-weight: 400;\">Return validation result</text><line x1=\"403\" y1=\"365\" x2=\"814\" y2=\"365\" class=\"messageLine0\" stroke-width=\"2\" stroke=\"none\" marker-end=\"url(#arrowhead)\" style=\"fill: none;\"></line><g><rect x=\"0\" y=\"385\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"75\" y=\"417.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"75\" dy=\"0\">Producer</tspan></text></g><g><rect x=\"328\" y=\"385\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"403\" y=\"417.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"403\" dy=\"0\">Schema Registry</tspan></text></g><g><rect x=\"528\" y=\"385\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"603\" y=\"417.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"603\" dy=\"0\">Kafka</tspan></text></g><g><rect x=\"739\" y=\"385\" fill=\"#eaeaea\" stroke=\"#666\" width=\"150\" height=\"65\" rx=\"3\" ry=\"3\" class=\"actor\"></rect><text x=\"814\" y=\"417.5\" dominant-baseline=\"central\" alignment-baseline=\"central\" class=\"actor\" style=\"text-anchor: middle; font-size: 16px; font-weight: 400;\"><tspan x=\"814\" dy=\"0\">Consumer</tspan></text></g></svg>",
        "context": "#mermaid-2{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-2 .error-icon{fill:#F7F9FA;}#mermaid-2 .error-text{fill:#080605;stroke:#080605;}#mermaid-2 .edge-thickness-normal{stroke-width:2px;}#mermaid-2 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-2 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-2 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-2 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-2 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-2 .marker.cross{stroke:#0b0b0b;}#mermaid-2 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-2 .actor{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 text.actor>tspan{fill:#242929;stroke:none;}#mermaid-2 .actor-line{stroke:grey;}#mermaid-2 .messageLine0{stroke-width:1.5;stroke-dasharray:none;stroke:#242929;}#mermaid-2 .messageLine1{stroke-width:1.5;stroke-dasharray:2,2;stroke:#242929;}#mermaid-2 #arrowhead path{fill:#242929;stroke:#242929;}#mermaid-2 .sequenceNumber{fill:#f4f4f4;}#mermaid-2 #sequencenumber{fill:#242929;}#mermaid-2 #crosshead path{fill:#242929;stroke:#242929;}#mermaid-2 .messageText{fill:#242929;stroke:none;}#mermaid-2 .labelBox{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .labelText,#mermaid-2 .labelText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopText,#mermaid-2 .loopText>tspan{fill:#242929;stroke:none;}#mermaid-2 .loopLine{stroke-width:2px;stroke-dasharray:2,2;stroke:#47BCEE;fill:#47BCEE;}#mermaid-2 .note{stroke:hsl(52.6829268293, 60%, 73.9215686275%);fill:#fff5ad;}#mermaid-2 .noteText,#mermaid-2 .noteText>tspan{fill:#333;stroke:none;}#mermaid-2 .activation0{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation1{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .activation2{fill:#F4EFFC;stroke:hsl(263.0769230769, 68.4210526316%, 86.2745098039%);}#mermaid-2 .actorPopupMenu{position:absolute;}#mermaid-2 .actorPopupMenuPanel{position:absolute;fill:#EDFAFF;box-shadow:0px 8px 16px 0px rgba(0,0,0,0.2);filter:drop-shadow(3px 5px 2px rgb(0 0 0 / 0.4));}#mermaid-2 .actor-man line{stroke:#47BCEE;fill:#EDFAFF;}#mermaid-2 .actor-man circle,#mermaid-2 line{stroke:#47BCEE;fill:#EDFAFF;stroke-width:2px;}#mermaid-2 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}ProducerSchema RegistryKafkaConsumerRegister/checks message schemaReturn registration resultPublish messageRecieves messageValidate message schemaReturn validation resultProducerSchema RegistryKafkaConsumer",
        "description": "SVG containing 6 paths, 1 circles, and 8 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1asyncapi: 3.0.0\n2info:\n3  title: Example with Avro\n4  version: 0.1.0\n5\n6channels:\n7  example:\n8    address: 'example'\n9    messages:\n10      avroMessage:\n11        payload:\n12          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n13          schema:\n14            $ref: 'https://raw.githubusercontent.com/asyncapi/website/20a31a0396b41dd24b1bac877ab7ce3f58037c28/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n15\n16operations:\n17  onMessage:\n18    action: receive\n19    channel:\n20      $ref: '#/channels/example'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#d6deeb\">asyncapi</span><span>: </span><span style=\"color:#d8da68\">3</span><span>.</span><span style=\"color:#d8da68\">0</span><span>.</span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#d6deeb\">info</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  </span><span style=\"color:#d6deeb\">title</span><span>: Example with Avro\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#d6deeb\">version</span><span>: </span><span style=\"color:#d8da68\">0</span><span>.</span><span style=\"color:#d8da68\">1</span><span>.</span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span></span><span style=\"color:#d6deeb\">channels</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>  </span><span style=\"color:#d6deeb\">example</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>    </span><span style=\"color:#d6deeb\">address</span><span>: 'example'\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#d6deeb\">messages</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>      </span><span style=\"color:#d6deeb\">avroMessage</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>        </span><span style=\"color:#d6deeb\">payload</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>          </span><span style=\"color:#d6deeb\">schemaFormat</span><span>: 'application/vnd.apache.avro;version=</span><span style=\"color:#d8da68\">1</span><span>.</span><span style=\"color:#d8da68\">9</span><span>.</span><span style=\"color:#d8da68\">0</span><span>'\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>          </span><span style=\"color:#d6deeb\">schema</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>            $</span><span style=\"color:#d6deeb\">ref</span><span>: 'https://raw.githubusercontent.com/asyncapi/website/</span><span style=\"color:#d8da68\">20</span><span>a</span><span style=\"color:#d8da68\">31</span><span>a</span><span style=\"color:#d8da68\">0396</span><span>b</span><span style=\"color:#d8da68\">41</span><span>dd</span><span style=\"color:#d8da68\">24</span><span>b</span><span style=\"color:#d8da68\">1</span><span>bac</span><span style=\"color:#d8da68\">877</span><span>ab</span><span style=\"color:#d8da68\">7</span><span>ce</span><span style=\"color:#d8da68\">3</span><span>f</span><span style=\"color:#d8da68\">58037</span><span>c</span><span style=\"color:#d8da68\">28</span><span>/public/resources/casestudies/adeo/CostingRequestPayload.avsc'\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span></span><span style=\"color:#d6deeb\">operations</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>  </span><span style=\"color:#d6deeb\">onMessage</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>    </span><span style=\"color:#d6deeb\">action</span><span>: receive\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>    </span><span style=\"color:#d6deeb\">channel</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>      $</span><span style=\"color:#d6deeb\">ref</span><span>: '#/channels/example'</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "schemaFormat",
        "context": "AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:"
      },
      {
        "id": "highlight_1",
        "content": "payload",
        "context": "AsyncAPI is not directly involved in validation based on the Schema Registry. The good thing is that you do not have to duplicate schemas in your AsyncAPI document stored in Schema Registry. You can reference schemas from Schema Registry in your AsyncAPI documents.\nHere's an example of an AsyncAPI document where you can see both schemaFormat and payload referenced from the Schema Registry:"
      }
    ]
  }
}