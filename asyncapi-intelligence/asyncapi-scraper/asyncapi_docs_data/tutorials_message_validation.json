{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tutorials/message-validation",
    "timestamp": "2025-03-12T17:45:01.029Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Message Validation",
    "hierarchy": {
      "sections": {
        "Introduction": {
          "level": 2,
          "content": "In this tutorial, you'll learn how to validate messages (events) that are sent to your AsyncAPI application."
        },
        "Background context": {
          "level": 2,
          "content": "Message validation can be performed at both the producer and consumer levels. Message validation requires the participation of the producer, consumer, and broker. We will learn how to validate messages at the consumer level by discarding invalid messages based on the parameters provided.You will be using the Eclipse Mosquitto broker. The MQTT protocol provides a lightweight method of messaging using a publish/subscribe model. You will also use an MQTT client that runs an MQTT library and connects to an MQTT broker over a network. Here producers and consumers are MQTT clients. The producer and consumer labels refer to whether the client is sending or receiving messages.In the previous tutorial, you generated an application that uses Glee framework. Now you will be validating the messages that you will be sending to your application using a Mosquitto broker and an MQTT client.RememberIf you did not follow the previous tutorial and do not have an application generated, then follow these instructions:asyncapi new glee --name=tutorial --template tutorial`.\ncd tutorial && npm install"
        },
        "Remember": {
          "level": 5,
          "content": "If you did not follow the previous tutorial and do not have an application generated, then follow these instructions:asyncapi new glee --name=tutorial --template tutorial`.\ncd tutorial && npm install"
        },
        "Validate messages": {
          "level": 2,
          "content": "In this step, you will send a message to your application using an MQTT broker and check the errors logged when you accidentally send an invalid message.\nStart your generated application:\n1npm run dev\nSend a message:\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": \"3\", \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'Go back to the previous terminal and check if your application logged the streetlight condition you just sent, with errors related to the invalid message. You should see something displayed in the terminal similar to the following:1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: '3', sentAt: '2017-06-07T12:34:32.000Z' }\n3x You have received a malformed event or there has been error processing it. Please review the error below:\n4TYPE should be integer\n5 \n6  1 | {\n7  2 |   \"id\": 1,\n8> 3 |   \"lumens\": \"3\",\n9    |             ^^^ 👈🏽  type should be integer\n10  4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n11  5 | }\n12 \n13ONEOF should match exactly one schema in oneOf\n14 \n15> 1 | {\n16    | ^\n17> 2 |   \"id\": 1,\n18    | ^^^^^^^^^^\n19> 3 |   \"lumens\": \"3\",\n20    | ^^^^^^^^^^\n21> 4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n22    | ^^^^^^^^^^\n23> 5 | }\n24    | ^^ 👈🏽  oneOf should match exactly one schema in oneOfHere, you can see that the property lumens has type integer, but you are sending a message with type string:1  message:\n2        name: lumensInfo\n3        payload:\n4          type: object\n5          properties:\n6            id:\n7              type: integer\n8              minimum: 0\n9              description: Id of the streetlight.\n10            lumens:\n11              type: integer\n12              minimum: 0\n13              description: Light intensity measured in lumens.\nSend a correct message to your application:\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": 3, \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'You can see that your generated application received a message in the terminal:1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: 3, sentAt: '2017-06-07T12:34:32.000Z' }\n3Streetlight with id \"1\" updated its lighting information to 3 lumens at 2017-06-07T12:34:32.000Z.Such a terminal message indicates that your message is valid and the application received it correctly."
        },
        "Summary": {
          "level": 2,
          "content": "In this tutorial, you learned how to connect your generated application to an MQTT broker, send messages through it, identify when an invalid message is sent to your application, and how to correct an invalid message."
        },
        "Next steps": {
          "level": 2,
          "content": "Now that you've completed this tutorial, enjoy our AsyncAPI message validation guide."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tutorials"
            },
            {
              "text": "Getting Started",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started"
            },
            {
              "text": "Create AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tutorials/create-asyncapi-document"
            },
            {
              "text": "Generate code",
              "href": "https://www.asyncapi.com/docs/tutorials/generate-code"
            },
            {
              "text": "Validate AsyncAPI document with Studio",
              "href": "https://www.asyncapi.com/docs/tutorials/studio-document-validation"
            },
            {
              "text": "Message validation in runtime",
              "href": "https://www.asyncapi.com/docs/tutorials/message-validation"
            },
            {
              "text": "Streetlights - Interactive",
              "href": "https://www.asyncapi.com/docs/tutorials/streetlights-interactive"
            },
            {
              "text": "WebSocket",
              "href": "https://www.asyncapi.com/docs/tutorials/websocket"
            },
            {
              "text": "Kafka",
              "href": "https://www.asyncapi.com/docs/tutorials/kafka"
            }
          ]
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Introduction\nIn this tutorial, you'll learn how to validate messages (events) that are sent to your AsyncAPI application.\nBackground context\nMessage validation can be performed at both the producer and consumer levels. Message validation requires the participation of the producer, consumer, and broker. We will learn how to validate messages at the consumer level by discarding invalid messages based on the parameters provided.\nYou will be using the Eclipse Mosquitto broker. The MQTT protocol provides a lightweight method of messaging using a publish/subscribe model. You will also use an MQTT client that runs an MQTT library and connects to an MQTT broker over a network. Here producers and consumers are MQTT clients. The producer and consumer labels refer to whether the client is sending or receiving messages.\nIn the previous tutorial, you generated an application that uses Glee framework. Now you will be validating the messages that you will be sending to your application using a Mosquitto broker and an MQTT client.\nRememberIf you did not follow the previous tutorial and do not have an application generated, then follow these instructions:asyncapi new glee --name=tutorial --template tutorial`.\ncd tutorial && npm install\nValidate messages\nIn this step, you will send a message to your application using an MQTT broker and check the errors logged when you accidentally send an invalid message.\n\nStart your generated application:\n\n1npm run dev\n\nSend a message:\n\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": \"3\", \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'\nGo back to the previous terminal and check if your application logged the streetlight condition you just sent, with errors related to the invalid message. You should see something displayed in the terminal similar to the following:\n1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: '3', sentAt: '2017-06-07T12:34:32.000Z' }\n3x You have received a malformed event or there has been error processing it. Please review the error below:\n4TYPE should be integer\n5 \n6  1 | {\n7  2 |   \"id\": 1,\n8> 3 |   \"lumens\": \"3\",\n9    |             ^^^ 👈🏽  type should be integer\n10  4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n11  5 | }\n12 \n13ONEOF should match exactly one schema in oneOf\n14 \n15> 1 | {\n16    | ^\n17> 2 |   \"id\": 1,\n18    | ^^^^^^^^^^\n19> 3 |   \"lumens\": \"3\",\n20    | ^^^^^^^^^^\n21> 4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n22    | ^^^^^^^^^^\n23> 5 | }\n24    | ^^ 👈🏽  oneOf should match exactly one schema in oneOf\nHere, you can see that the property lumens has type integer, but you are sending a message with type string:\n1  message:\n2        name: lumensInfo\n3        payload:\n4          type: object\n5          properties:\n6            id:\n7              type: integer\n8              minimum: 0\n9              description: Id of the streetlight.\n10            lumens:\n11              type: integer\n12              minimum: 0\n13              description: Light intensity measured in lumens.\n\nSend a correct message to your application:\n\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": 3, \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'\nYou can see that your generated application received a message in the terminal:\n1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: 3, sentAt: '2017-06-07T12:34:32.000Z' }\n3Streetlight with id \"1\" updated its lighting information to 3 lumens at 2017-06-07T12:34:32.000Z.\nSuch a terminal message indicates that your message is valid and the application received it correctly.\nSummary\nIn this tutorial, you learned how to connect your generated application to an MQTT broker, send messages through it, identify when an invalid message is sent to your application, and how to correct an invalid message.\nNext steps\nNow that you've completed this tutorial, enjoy our AsyncAPI message validation guide.",
    "sections": [
      {
        "title": "Introduction",
        "level": 2,
        "text": "In this tutorial, you'll learn how to validate messages (events) that are sent to your AsyncAPI application."
      },
      {
        "title": "Background context",
        "level": 2,
        "text": "Message validation can be performed at both the producer and consumer levels. Message validation requires the participation of the producer, consumer, and broker. We will learn how to validate messages at the consumer level by discarding invalid messages based on the parameters provided.You will be using the Eclipse Mosquitto broker. The MQTT protocol provides a lightweight method of messaging using a publish/subscribe model. You will also use an MQTT client that runs an MQTT library and connects to an MQTT broker over a network. Here producers and consumers are MQTT clients. The producer and consumer labels refer to whether the client is sending or receiving messages.In the previous tutorial, you generated an application that uses Glee framework. Now you will be validating the messages that you will be sending to your application using a Mosquitto broker and an MQTT client.RememberIf you did not follow the previous tutorial and do not have an application generated, then follow these instructions:asyncapi new glee --name=tutorial --template tutorial`.\ncd tutorial && npm install"
      },
      {
        "title": "Remember",
        "level": 5,
        "text": "If you did not follow the previous tutorial and do not have an application generated, then follow these instructions:asyncapi new glee --name=tutorial --template tutorial`.\ncd tutorial && npm install"
      },
      {
        "title": "Validate messages",
        "level": 2,
        "text": "In this step, you will send a message to your application using an MQTT broker and check the errors logged when you accidentally send an invalid message.\nStart your generated application:\n1npm run dev\nSend a message:\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": \"3\", \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'Go back to the previous terminal and check if your application logged the streetlight condition you just sent, with errors related to the invalid message. You should see something displayed in the terminal similar to the following:1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: '3', sentAt: '2017-06-07T12:34:32.000Z' }\n3x You have received a malformed event or there has been error processing it. Please review the error below:\n4TYPE should be integer\n5 \n6  1 | {\n7  2 |   \"id\": 1,\n8> 3 |   \"lumens\": \"3\",\n9    |             ^^^ 👈🏽  type should be integer\n10  4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n11  5 | }\n12 \n13ONEOF should match exactly one schema in oneOf\n14 \n15> 1 | {\n16    | ^\n17> 2 |   \"id\": 1,\n18    | ^^^^^^^^^^\n19> 3 |   \"lumens\": \"3\",\n20    | ^^^^^^^^^^\n21> 4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n22    | ^^^^^^^^^^\n23> 5 | }\n24    | ^^ 👈🏽  oneOf should match exactly one schema in oneOfHere, you can see that the property lumens has type integer, but you are sending a message with type string:1  message:\n2        name: lumensInfo\n3        payload:\n4          type: object\n5          properties:\n6            id:\n7              type: integer\n8              minimum: 0\n9              description: Id of the streetlight.\n10            lumens:\n11              type: integer\n12              minimum: 0\n13              description: Light intensity measured in lumens.\nSend a correct message to your application:\n1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": 3, \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'You can see that your generated application received a message in the terminal:1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: 3, sentAt: '2017-06-07T12:34:32.000Z' }\n3Streetlight with id \"1\" updated its lighting information to 3 lumens at 2017-06-07T12:34:32.000Z.Such a terminal message indicates that your message is valid and the application received it correctly."
      },
      {
        "title": "Summary",
        "level": 2,
        "text": "In this tutorial, you learned how to connect your generated application to an MQTT broker, send messages through it, identify when an invalid message is sent to your application, and how to correct an invalid message."
      },
      {
        "title": "Next steps",
        "level": 2,
        "text": "Now that you've completed this tutorial, enjoy our AsyncAPI message validation guide."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1npm run dev",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>npm run dev</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": \"3\", \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>mqtt pub -t </span><span style=\"color:#c0e2a3;font-weight:500\">'light/measured'</span><span> -h </span><span style=\"color:#c0e2a3;font-weight:500\">'test.mosquitto.org'</span><span> -m </span><span style=\"color:#c0e2a3;font-weight:500\">'{\"id\": 1, \"lumens\": \"3\", \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: '3', sentAt: '2017-06-07T12:34:32.000Z' }\n3x You have received a malformed event or there has been error processing it. Please review the error below:\n4TYPE should be integer\n5 \n6  1 | {\n7  2 |   \"id\": 1,\n8> 3 |   \"lumens\": \"3\",\n9    |             ^^^ 👈🏽  type should be integer\n10  4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n11  5 | }\n12 \n13ONEOF should match exactly one schema in oneOf\n14 \n15> 1 | {\n16    | ^\n17> 2 |   \"id\": 1,\n18    | ^^^^^^^^^^\n19> 3 |   \"lumens\": \"3\",\n20    | ^^^^^^^^^^\n21> 4 |   \"sentAt\": \"2017-06-07T12:34:32.000Z\"\n22    | ^^^^^^^^^^\n23> 5 | }\n24    | ^^ 👈🏽  oneOf should match exactly one schema in oneOf",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>lightMeasured was received from mosquitto:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>{ id: 1, lumens: </span><span style=\"color:#c0e2a3;font-weight:500\">'3'</span><span>, sentAt: </span><span style=\"color:#c0e2a3;font-weight:500\">'2017-06-07T12:34:32.000Z'</span><span> }\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>x You have received a malformed event or there has been error processing it. Please review the error below:\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>TYPE should be </span><span style=\"color:#7edcda\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span> \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>  1 | {\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>  2 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"id\"</span><span>: 1,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>&gt; 3 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"lumens\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"3\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    |             ^^^ 👈🏽  </span><span style=\"color:#7edcda\">type</span><span> should be </span><span style=\"color:#7edcda\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>  4 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"sentAt\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"2017-06-07T12:34:32.000Z\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span>  5 | }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span> \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>ONEOF should match exactly one schema </span><span style=\"color:#64a0dc\">in</span><span> oneOf\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span> \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>&gt; 1 | {\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>    | ^\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>&gt; 2 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"id\"</span><span>: 1,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span>    | ^^^^^^^^^^\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>&gt; 3 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"lumens\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"3\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span>    | ^^^^^^^^^^\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>&gt; 4 |   </span><span style=\"color:#c0e2a3;font-weight:500\">\"sentAt\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"2017-06-07T12:34:32.000Z\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span>    | ^^^^^^^^^^\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span>&gt; 5 | }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span>    | ^^ 👈🏽  oneOf should match exactly one schema </span><span style=\"color:#64a0dc\">in</span><span> oneOf</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1  message:\n2        name: lumensInfo\n3        payload:\n4          type: object\n5          properties:\n6            id:\n7              type: integer\n8              minimum: 0\n9              description: Id of the streetlight.\n10            lumens:\n11              type: integer\n12              minimum: 0\n13              description: Light intensity measured in lumens.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>  </span><span style=\"color:#7edcda\">message:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>        </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lumensInfo</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>            </span><span style=\"color:#7edcda\">id:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>              </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>              </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Id</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">streetlight.</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">10</span><span>            </span><span style=\"color:#7edcda\">lumens:</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">11</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>              </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>              </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Light</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">intensity</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">measured</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lumens.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1mqtt pub -t 'light/measured' -h 'test.mosquitto.org' -m '{\"id\": 1, \"lumens\": 3, \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>mqtt pub -t </span><span style=\"color:#c0e2a3;font-weight:500\">'light/measured'</span><span> -h </span><span style=\"color:#c0e2a3;font-weight:500\">'test.mosquitto.org'</span><span> -m </span><span style=\"color:#c0e2a3;font-weight:500\">'{\"id\": 1, \"lumens\": 3, \"sentAt\": \"2017-06-07T12:34:32.000Z\"}'</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1lightMeasured was received from mosquitto:\n2{ id: 1, lumens: 3, sentAt: '2017-06-07T12:34:32.000Z' }\n3Streetlight with id \"1\" updated its lighting information to 3 lumens at 2017-06-07T12:34:32.000Z.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>lightMeasured was received from mosquitto:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>{ id: 1, lumens: 3, sentAt: </span><span style=\"color:#c0e2a3;font-weight:500\">'2017-06-07T12:34:32.000Z'</span><span> }\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>Streetlight with id </span><span style=\"color:#c0e2a3;font-weight:500\">\"1\"</span><span> updated its lighting information to 3 lumens at 2017-06-07T12:34:32.000Z.</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "lumens",
        "context": "Here, you can see that the property lumens has type integer, but you are sending a message with type string:"
      },
      {
        "id": "highlight_1",
        "content": "integer",
        "context": "Here, you can see that the property lumens has type integer, but you are sending a message with type string:"
      },
      {
        "id": "highlight_2",
        "content": "string",
        "context": "Here, you can see that the property lumens has type integer, but you are sending a message with type string:"
      }
    ]
  }
}