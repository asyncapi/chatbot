{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-messages",
    "timestamp": "2025-03-12T17:47:52.218Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Adding Messages",
    "hierarchy": {
      "sections": {
        "Add messages": {
          "level": 2,
          "content": "In an AsyncAPI document, you define message definitions under channels. However, the best practice is to first define these messages under the 'components' section as reusable definitions. That way, you can reference them easily from a channel.Here is a diagram showing some channel fields and the relation between channel messages and components messages:#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refchannelstitleaddresscomponentsmessagesmessagesChannels sectionDefine the channels section in your AsyncAPI document, including the messages your channel accepts. For example:1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked.messages sectionIn your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was likedYou can reuse messages using the Reference Object. For example:1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'Here's the complete AsyncAPI document with channels reusing the same message:1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unlikedIdentifier of the messageThe key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId.1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked.Messages under operationsOperations specify which channels they interact with. If a channel has several messages, but your operation only involves one, indicate which specific message the operation uses.1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
        },
        "Channels section": {
          "level": 3,
          "content": "Define the channels section in your AsyncAPI document, including the messages your channel accepts. For example:1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked."
        },
        "messages section": {
          "level": 3,
          "content": "In your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was likedYou can reuse messages using the Reference Object. For example:1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'Here's the complete AsyncAPI document with channels reusing the same message:1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unliked"
        },
        "Identifier of the message": {
          "level": 3,
          "content": "The key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId.1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
        },
        "Messages under operations": {
          "level": 3,
          "content": "Operations specify which channels they interact with. If a channel has several messages, but your operation only involves one, indicate which specific message the operation uses.1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/concepts"
            },
            {
              "text": "Server",
              "href": "https://www.asyncapi.com/docs/concepts/server"
            },
            {
              "text": "Producer",
              "href": "https://www.asyncapi.com/docs/concepts/producer"
            },
            {
              "text": "Consumer",
              "href": "https://www.asyncapi.com/docs/concepts/consumer"
            },
            {
              "text": "Channel",
              "href": "https://www.asyncapi.com/docs/concepts/channel"
            },
            {
              "text": "Application",
              "href": "https://www.asyncapi.com/docs/concepts/application"
            },
            {
              "text": "Protocol",
              "href": "https://www.asyncapi.com/docs/concepts/protocol"
            },
            {
              "text": "Message",
              "href": "https://www.asyncapi.com/docs/concepts/message"
            },
            {
              "text": "AsyncAPI Document",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document"
            },
            {
              "text": "AsyncAPI document structure",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/structure"
            },
            {
              "text": "Tags",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/tags"
            },
            {
              "text": "Adding channels",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-channels"
            },
            {
              "text": "Parameters in channel address",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/dynamic-channel-address"
            },
            {
              "text": "Adding operations",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-operations"
            },
            {
              "text": "Operation security",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/securing-operations"
            },
            {
              "text": "Adding messages",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-messages"
            },
            {
              "text": "Reusability with traits",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reusability-with-traits"
            },
            {
              "text": "Server security",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/server-security"
            },
            {
              "text": "Adding reply info",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reply-info"
            },
            {
              "text": "Extending specification",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/extending-specification"
            },
            {
              "text": "Adding bindings",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-bindings"
            },
            {
              "text": "Payload schema",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/define-payload"
            },
            {
              "text": "Server variables",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/variable-url"
            },
            {
              "text": "Reusable parts",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reusable-parts"
            },
            {
              "text": "Add servers",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/add-server"
            }
          ]
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "In an AsyncAPI document, adding messages mainly means setting up channels and operations. This is key for explaining how data moves between your applications. However, sometimes you might just want to use the AsyncAPI document to describe the messages themselves, without anything else.\nAdd messages\nIn an AsyncAPI document, you define message definitions under channels. However, the best practice is to first define these messages under the 'components' section as reusable definitions. That way, you can reference them easily from a channel.\nHere is a diagram showing some channel fields and the relation between channel messages and components messages:\n#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refchannelstitleaddresscomponentsmessagesmessages\nChannels section\nDefine the channels section in your AsyncAPI document, including the messages your channel accepts. For example:\n1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.\nThe above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked.\nmessages section\nIn your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:\n1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was liked\nYou can reuse messages using the Reference Object. For example:\n1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'\nHere's the complete AsyncAPI document with channels reusing the same message:\n1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unliked\nIdentifier of the message\nThe key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId.\n1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.\nThe above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked.\nMessages under operations\nOperations specify which channels they interact with. If a channel has several messages, but your operation only involves one, indicate which specific message the operation uses.\n1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'\nThe above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg.",
    "sections": [
      {
        "title": "Add messages",
        "level": 2,
        "text": "In an AsyncAPI document, you define message definitions under channels. However, the best practice is to first define these messages under the 'components' section as reusable definitions. That way, you can reference them easily from a channel.Here is a diagram showing some channel fields and the relation between channel messages and components messages:#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refchannelstitleaddresscomponentsmessagesmessagesChannels sectionDefine the channels section in your AsyncAPI document, including the messages your channel accepts. For example:1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked.messages sectionIn your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was likedYou can reuse messages using the Reference Object. For example:1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'Here's the complete AsyncAPI document with channels reusing the same message:1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unlikedIdentifier of the messageThe key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId.1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked.Messages under operationsOperations specify which channels they interact with. If a channel has several messages, but your operation only involves one, indicate which specific message the operation uses.1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      },
      {
        "title": "Channels section",
        "level": 3,
        "text": "Define the channels section in your AsyncAPI document, including the messages your channel accepts. For example:1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked."
      },
      {
        "title": "messages section",
        "level": 3,
        "text": "In your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was likedYou can reuse messages using the Reference Object. For example:1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'Here's the complete AsyncAPI document with channels reusing the same message:1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unliked"
      },
      {
        "title": "Identifier of the message",
        "level": 3,
        "text": "The key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId.1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "title": "Messages under operations",
        "level": 3,
        "text": "Operations specify which channels they interact with. If a channel has several messages, but your operation only involves one, indicate which specific message the operation uses.1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg id=\"mermaid-0\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width: 464.8984375px;\" viewBox=\"-8 -8 464.8984375 334\" aria-roledescription=\"flowchart-v2\"><style>#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker id=\"flowchart-pointEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"10\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-pointStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"0\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 5 L 10 10 L 10 0 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-circleEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"11\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-circleStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"-1\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-crossEnd\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"12\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-crossStart\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"-1\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path d=\"M62,92L71.111,80.167C80.221,68.333,98.443,44.667,117.941,32.833C137.439,21,158.214,21,168.601,21L178.988,21\" id=\"L-C-F-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-F\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M91.664,113L95.831,113C99.997,113,108.331,113,119.79,113C131.25,113,145.836,113,153.129,113L160.422,113\" id=\"L-C-I-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-I\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M62,134L71.111,145.833C80.221,157.667,98.443,181.333,113.323,193.167C128.203,205,139.742,205,145.512,205L151.281,205\" id=\"L-C-D-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-D\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M252.688,205L261.389,205C270.091,205,287.495,205,304.647,209.167C321.8,213.333,338.702,221.667,347.152,225.833L355.603,230\" id=\"L-D-B-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-D LE-B\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M262.305,297L269.404,297C276.503,297,290.701,297,306.25,292.833C321.8,288.667,338.702,280.333,347.152,276.167L355.603,272\" id=\"L-A-B-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-A LE-B\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(304.8984375, 205)\"><g class=\"label\" transform=\"translate(-17.59375, -13.5)\"><foreignObject width=\"35.1875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">$ref</span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node default default\" id=\"flowchart-C-36\" transform=\"translate(45.83203125, 113)\"><rect class=\"basic label-container\" style=\"fill:#47BCEE;stroke:#000;\" rx=\"0\" ry=\"0\" x=\"-45.83203125\" y=\"-21\" width=\"91.6640625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-38.33203125, -13.5)\"><foreignObject width=\"76.6640625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">channels</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-F-37\" transform=\"translate(201.984375, 21)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-22.99609375\" y=\"-21\" width=\"45.9921875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-15.49609375, -13.5)\"><foreignObject width=\"30.9921875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">title</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-I-38\" transform=\"translate(201.984375, 113)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-41.5625\" y=\"-21\" width=\"83.125\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-34.0625, -13.5)\"><foreignObject width=\"68.125\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">address</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-A-39\" transform=\"translate(201.984375, 297)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-60.3203125\" y=\"-21\" width=\"120.640625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-52.8203125, -13.5)\"><foreignObject width=\"105.640625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">components</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-B-40\" transform=\"translate(398.1953125, 251)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-50.703125\" y=\"-21\" width=\"101.40625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-43.203125, -13.5)\"><foreignObject width=\"86.40625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">messages</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-D-41\" transform=\"translate(201.984375, 205)\"><rect class=\"basic label-container\" style=\"fill:#47BCEE;stroke:#000;\" rx=\"0\" ry=\"0\" x=\"-50.703125\" y=\"-21\" width=\"101.40625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-43.203125, -13.5)\"><foreignObject width=\"86.40625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">messages</span></div></foreignObject></g></g></g></g></g></svg>",
        "context": "#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refchannelstitleaddresscomponentsmessagesmessages",
        "description": "SVG containing 9 paths, 2 circles, and 6 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        description: Message that is being sent when a comment has been liked by someone.\n7        payload:\n8           type: object\n9           title: commentLikedPayload\n10           additionalProperties: false\n11           properties:\n12               commentId: \n13                 type: string\n14                 description: Id of the comment that was liked\n15    description: Notification channel for all the services that need to know comment is liked.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">allCommentsLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment/liked</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">being</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">has</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">been</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">by</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">someone.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>           </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>           </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">commentLikedPayload</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>           </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>           </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>               </span><span style=\"color:#7edcda\">commentId:</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>                 </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>                 </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Id</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">was</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Notification</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">channel</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">all</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">services</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">need</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">to</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">know</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1components:\n2  messages:\n3    commentLiked:\n4        description: Message that is being sent when a comment has been liked by someone.\n5        payload:\n6           type: object\n7           title: commentLikedPayload\n8           additionalProperties: false\n9           properties:\n10               commentId: \n11                 type: string\n12                 description: Id of the comment that was liked",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">components:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>        </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">being</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">has</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">been</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">by</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">someone.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>           </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>           </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">commentLikedPayload</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>           </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>           </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>               </span><span style=\"color:#7edcda\">commentId:</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>                 </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>                 </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Id</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">was</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1    messages:\n2      commentLiked:\n3        $ref: '#/components/messages/commentLiked'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">    messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">      commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        $ref: </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentLiked'</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1asyncapi: 3.0.0\n2info:\n3  title: Example API\n4  version: '1.0.0'\n5channels:\n6  allCommentsLiked:\n7    address: comment/liked\n8    messages:\n9      commentLiked:\n10        $ref: '#/components/messages/commentLikedUnliked'\n11    description: Notification channel for all the services that need to know comment is liked.\n12  allCommentUnliked:\n13    address: comment/unliked\n14    messages:\n15      commentUnliked:\n16        $ref: '#/components/messages/commentLikedUnliked'\n17    description: Notification channel for all the services that need to know comment is liked.\n18components:\n19  messages:\n20    commentLikedUnliked:\n21        description: Message that is being sent when a comment has been liked or unliked by someone.\n22        payload:\n23           type: object\n24           title: commentInfoPayload\n25           additionalProperties: false\n26           properties:\n27               commentId: \n28                 type: string\n29                 description: Id of the comment that was liked or unliked",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">asyncapi:</span><span> </span><span style=\"color:#d8da68\">3.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">info:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">  title:</span><span> Example API\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#64a0dc\">  version:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'1.0.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#64a0dc\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span></span><span style=\"color:#64a0dc\">  allCommentsLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span></span><span style=\"color:#64a0dc\">    address:</span><span> comment/liked\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span></span><span style=\"color:#64a0dc\">    messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span></span><span style=\"color:#64a0dc\">      commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>        $ref: </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentLikedUnliked'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span></span><span style=\"color:#64a0dc\">    description:</span><span> Notification channel for all the services that need to know comment is liked.\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span></span><span style=\"color:#64a0dc\">  allCommentUnliked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span></span><span style=\"color:#64a0dc\">    address:</span><span> comment/unliked\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span></span><span style=\"color:#64a0dc\">    messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span></span><span style=\"color:#64a0dc\">      commentUnliked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>        $ref: </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentLikedUnliked'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span></span><span style=\"color:#64a0dc\">    description:</span><span> Notification channel for all the services that need to know comment is liked.\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span></span><span style=\"color:#64a0dc\">components:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span></span><span style=\"color:#64a0dc\">  messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span></span><span style=\"color:#64a0dc\">    commentLikedUnliked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span></span><span style=\"color:#64a0dc\">        description:</span><span> Message that is being sent when a comment has been liked or unliked by someone.\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span></span><span style=\"color:#64a0dc\">        payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span><span></span><span style=\"color:#64a0dc\">           type:</span><span> object\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span></span><span style=\"color:#64a0dc\">           title:</span><span> commentInfoPayload\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span><span></span><span style=\"color:#64a0dc\">           additionalProperties:</span><span> false\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">26</span><span></span><span style=\"color:#64a0dc\">           properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">27</span><span></span><span style=\"color:#64a0dc\">               commentId:</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">28</span><span></span><span style=\"color:#64a0dc\">                 type:</span><span> string\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">29</span><span></span><span style=\"color:#64a0dc\">                 description:</span><span> Id of the comment that was liked or unliked</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1channels:\n2  allCommentsLiked:\n3    address: comment/liked\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedUnliked'\n7    description: Notification channel for all the services that need to know comment is liked.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">allCommentsLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment/liked</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentLikedUnliked'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Notification</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">channel</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">all</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">services</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">need</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">to</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">know</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1channels:\n2  allComments:\n3    address: comments\n4    messages:\n5      commentLiked:\n6        $ref: '#/components/messages/commentLikedMsg'\n7      commentUnliked:\n8        $ref: '#/components/messages/commentUnlikedMsg'\n9    description: Notification channel for all the services that need to know comment is liked.\n10operations:\n11  onCommentLiked:\n12    action: receive\n13    channel:\n14      $ref: '#/channels/allComments'\n15    messages:\n16      - $ref: '#/channels/allComments/messages/commentLiked'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">allComments:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comments</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">commentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentLikedMsg'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>      </span><span style=\"color:#7edcda\">commentUnliked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/messages/commentUnlikedMsg'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Notification</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">channel</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">all</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">services</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">need</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">to</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">know</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">comment</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">liked.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span></span><span style=\"color:#7edcda\">operations:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>  </span><span style=\"color:#7edcda\">onCommentLiked:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>    </span><span style=\"color:#7edcda\">action:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">receive</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>    </span><span style=\"color:#7edcda\">channel:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>      </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/channels/allComments'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>      </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/channels/allComments/messages/commentLiked'</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "messages",
        "context": "Define the channels section in your AsyncAPI document, including the messages your channel accepts. For example:"
      },
      {
        "id": "highlight_1",
        "content": "allCommentsLiked",
        "context": "The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked."
      },
      {
        "id": "highlight_2",
        "content": "commentLiked",
        "context": "The above example presents an application that communicates over the allCommentsLiked channel, which only accepts one message called commentLiked."
      },
      {
        "id": "highlight_3",
        "content": "messages",
        "context": "messages section"
      },
      {
        "id": "highlight_4",
        "content": "components.messages",
        "context": "In your AsyncAPI document, create a components.messages section to define each message your application uses as a reusable message. When setting up multiple channels, you won't have to repeat the same message definitions. For example:"
      },
      {
        "id": "highlight_5",
        "content": "messageId",
        "context": "The key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId."
      },
      {
        "id": "highlight_6",
        "content": "messageId",
        "context": "The key name that represents a message in your AsyncAPI document must be interpreted as messageId. If your document defines channels, the message key defined in the channel is the messageId."
      },
      {
        "id": "highlight_7",
        "content": "commentLiked",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_8",
        "content": "allCommentsLiked",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_9",
        "content": "components",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_10",
        "content": "commentLikedUnliked",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_11",
        "content": "commentLiked",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_12",
        "content": "messageId",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_13",
        "content": "commentLikedUnliked",
        "context": "The above example shows a commentLiked message under the allCommentsLiked channel. It references a reusable message definition from the components section represented by the commentLikedUnliked key. In this setup, the commentLiked key is the messageId and not commentLikedUnliked."
      },
      {
        "id": "highlight_14",
        "content": "onCommentsLiked",
        "context": "The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      },
      {
        "id": "highlight_15",
        "content": "allCommentLiked",
        "context": "The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      },
      {
        "id": "highlight_16",
        "content": "messageId",
        "context": "The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      },
      {
        "id": "highlight_17",
        "content": "commentLiked",
        "context": "The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      },
      {
        "id": "highlight_18",
        "content": "commentLikedMsg",
        "context": "The above example demonstrates how to specify the message for the onCommentsLiked operation received from the allCommentLiked channel. It's important to note that the message reference points to the channel, not the components section. That ensures accurate information about the messageId, which in this case is commentLiked, not commentLikedMsg."
      }
    ]
  }
}