{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/guides/validate",
    "timestamp": "2025-03-12T17:46:00.792Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Validate",
    "hierarchy": {
      "sections": {
        "Introduction": {
          "level": 2,
          "content": "In this guide, you'll learn multiple ways to validate AsyncAPI documents."
        },
        "Validate AsyncAPI documents": {
          "level": 2,
          "content": "Validating an AsyncAPI document can mean one of two things:\nValidation against the specification.\nValidation against the best practices or company governance rules also known as linting.\nValidate against specificationValidating against the specification ensures that every content of the document is written in accordance with the AsyncAPI specification. Several tool options exist for validating against the specification: AsyncAPI Studio, AsyncAPI CLI, and Parsers.AsyncAPI Studio validationAsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document.AsyncAPI CLI validationThe following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio.Parsers (code) validationAsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema.Validation against best practices or company governance rulesNow let's discuss options for validating against best practices or company governance rules, also known as linting. When various teams use AsyncAPI, you want to ensure they follow the same rules and are consistent across the organization. It is not enough to validate AsyncAPI documents against official specification rules.RememberLet's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers.One way to do this is to use the Spectral open-source tool. It enables you to define company-specific rules that you can use internally.To get started:\n\nInstall Spectral.\n\n\nCreate a file named .spectral.yaml to begin writing your API description and document rules.\nExample:\n1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}\n\n\nCreate and add your own custom ruleset:\n\n1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }\nAfter setting up Spectral and creating custom rules following steps 1 - 3, validate your AsyncAPI document using this Spectral CLI command:\n  spectral lint asyncapi.yaml"
        },
        "Validate against specification": {
          "level": 3,
          "content": "Validating against the specification ensures that every content of the document is written in accordance with the AsyncAPI specification. Several tool options exist for validating against the specification: AsyncAPI Studio, AsyncAPI CLI, and Parsers.AsyncAPI Studio validationAsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document.AsyncAPI CLI validationThe following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio.Parsers (code) validationAsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema."
        },
        "AsyncAPI Studio validation": {
          "level": 4,
          "content": "AsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document."
        },
        "AsyncAPI CLI validation": {
          "level": 4,
          "content": "The following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio."
        },
        "Remember": {
          "level": 5,
          "content": "Let's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers."
        },
        "Parsers (code) validation": {
          "level": 4,
          "content": "AsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema."
        },
        "Validation against best practices or company governance rules": {
          "level": 3,
          "content": "Now let's discuss options for validating against best practices or company governance rules, also known as linting. When various teams use AsyncAPI, you want to ensure they follow the same rules and are consistent across the organization. It is not enough to validate AsyncAPI documents against official specification rules.RememberLet's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers.One way to do this is to use the Spectral open-source tool. It enables you to define company-specific rules that you can use internally.To get started:\n\nInstall Spectral.\n\n\nCreate a file named .spectral.yaml to begin writing your API description and document rules.\nExample:\n1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}\n\n\nCreate and add your own custom ruleset:\n\n1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }\nAfter setting up Spectral and creating custom rules following steps 1 - 3, validate your AsyncAPI document using this Spectral CLI command:\n  spectral lint asyncapi.yaml"
        },
        "Additional resources": {
          "level": 2,
          "content": "AsyncAPI Studio READme\nAsyncAPI CLI READme\nAsyncAPI JavaScript Parsers READme\nAsyncAPI Go Parsers READme"
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/guides"
            },
            {
              "text": "Validate AsyncAPI documents",
              "href": "https://www.asyncapi.com/docs/guides/validate"
            },
            {
              "text": "Message validation",
              "href": "https://www.asyncapi.com/docs/guides/message-validation"
            }
          ]
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Introduction\nIn this guide, you'll learn multiple ways to validate AsyncAPI documents.\nValidate AsyncAPI documents\nValidating an AsyncAPI document can mean one of two things:\n\nValidation against the specification.\nValidation against the best practices or company governance rules also known as linting.\n\nValidate against specification\nValidating against the specification ensures that every content of the document is written in accordance with the AsyncAPI specification. Several tool options exist for validating against the specification: AsyncAPI Studio, AsyncAPI CLI, and Parsers.\nAsyncAPI Studio validation\nAsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)\nErrors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document.\nAsyncAPI CLI validation\nThe following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:\nasyncapi validate asyncapi.yaml\nRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio.\nParsers (code) validation\nAsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.\nRememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema.\nValidation against best practices or company governance rules\nNow let's discuss options for validating against best practices or company governance rules, also known as linting. When various teams use AsyncAPI, you want to ensure they follow the same rules and are consistent across the organization. It is not enough to validate AsyncAPI documents against official specification rules.\nRememberLet's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers.\nOne way to do this is to use the Spectral open-source tool. It enables you to define company-specific rules that you can use internally.\nTo get started:\n\n\nInstall Spectral.\n\n\nCreate a file named .spectral.yaml to begin writing your API description and document rules.\nExample:\n1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}\n\n\nCreate and add your own custom ruleset:\n\n\n1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }\n\nAfter setting up Spectral and creating custom rules following steps 1 - 3, validate your AsyncAPI document using this Spectral CLI command:\n\n  spectral lint asyncapi.yaml\n\nAdditional resources\n\nAsyncAPI Studio READme\nAsyncAPI CLI READme\nAsyncAPI JavaScript Parsers READme\nAsyncAPI Go Parsers READme",
    "sections": [
      {
        "title": "Introduction",
        "level": 2,
        "text": "In this guide, you'll learn multiple ways to validate AsyncAPI documents."
      },
      {
        "title": "Validate AsyncAPI documents",
        "level": 2,
        "text": "Validating an AsyncAPI document can mean one of two things:\nValidation against the specification.\nValidation against the best practices or company governance rules also known as linting.\nValidate against specificationValidating against the specification ensures that every content of the document is written in accordance with the AsyncAPI specification. Several tool options exist for validating against the specification: AsyncAPI Studio, AsyncAPI CLI, and Parsers.AsyncAPI Studio validationAsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document.AsyncAPI CLI validationThe following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio.Parsers (code) validationAsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema.Validation against best practices or company governance rulesNow let's discuss options for validating against best practices or company governance rules, also known as linting. When various teams use AsyncAPI, you want to ensure they follow the same rules and are consistent across the organization. It is not enough to validate AsyncAPI documents against official specification rules.RememberLet's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers.One way to do this is to use the Spectral open-source tool. It enables you to define company-specific rules that you can use internally.To get started:\n\nInstall Spectral.\n\n\nCreate a file named .spectral.yaml to begin writing your API description and document rules.\nExample:\n1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}\n\n\nCreate and add your own custom ruleset:\n\n1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }\nAfter setting up Spectral and creating custom rules following steps 1 - 3, validate your AsyncAPI document using this Spectral CLI command:\n  spectral lint asyncapi.yaml"
      },
      {
        "title": "Validate against specification",
        "level": 3,
        "text": "Validating against the specification ensures that every content of the document is written in accordance with the AsyncAPI specification. Several tool options exist for validating against the specification: AsyncAPI Studio, AsyncAPI CLI, and Parsers.AsyncAPI Studio validationAsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document.AsyncAPI CLI validationThe following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio.Parsers (code) validationAsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema."
      },
      {
        "title": "AsyncAPI Studio validation",
        "level": 4,
        "text": "AsyncAPI Studio provides a visual and easy way to validate your AsyncAPI documents against the specification. (It uses the AsyncAPI JavaScript parser behind the scenes to perform syntax checks and validate documents.)Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document."
      },
      {
        "title": "AsyncAPI CLI validation",
        "level": 4,
        "text": "The following AsyncAPI CLI command validates AsyncAPI documents in your local computer or in CI/CD automation:asyncapi validate asyncapi.yamlRememberYou can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio."
      },
      {
        "title": "Remember",
        "level": 5,
        "text": "Let's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers."
      },
      {
        "title": "Parsers (code) validation",
        "level": 4,
        "text": "AsyncAPI provides official JavaScript and Go parsers for validating AsyncAPI documents.RememberOfficial parsers use JSON Schema created for AsyncAPI specification. JSON Schema is not enough to fully validate AsyncAPI documents. Learn more about custom JSON Schemas validation needs. Official JavaScript parser supports and validates these special needs.Take it into account if you're thinking about writing your own parser using official JSON Schema."
      },
      {
        "title": "Validation against best practices or company governance rules",
        "level": 3,
        "text": "Now let's discuss options for validating against best practices or company governance rules, also known as linting. When various teams use AsyncAPI, you want to ensure they follow the same rules and are consistent across the organization. It is not enough to validate AsyncAPI documents against official specification rules.RememberLet's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers.One way to do this is to use the Spectral open-source tool. It enables you to define company-specific rules that you can use internally.To get started:\n\nInstall Spectral.\n\n\nCreate a file named .spectral.yaml to begin writing your API description and document rules.\nExample:\n1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}\n\n\nCreate and add your own custom ruleset:\n\n1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }\nAfter setting up Spectral and creating custom rules following steps 1 - 3, validate your AsyncAPI document using this Spectral CLI command:\n  spectral lint asyncapi.yaml"
      },
      {
        "title": "Additional resources",
        "level": 2,
        "text": "AsyncAPI Studio READme\nAsyncAPI CLI READme\nAsyncAPI JavaScript Parsers READme\nAsyncAPI Go Parsers READme"
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "asyncapi validate asyncapi.yaml",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span style=\"color:#c0e2a3;font-weight:500\">asyncapi</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">validate</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">asyncapi.yaml</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1{\n2  \"rules\": {\n3    // add your own rules here\n4  }\n5}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">\"rules\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#797f8c\">// add your own rules here</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span>  }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1 {\n2     \"rules\": {\n3         \"valid-document-version\": {\n4             \"message\": \"Application title must start with upper case\",\n5             \"severity\": \"error\",\n6             \"given\": \"$.info\",\n7             \"then\": [\n8                 {\n9                     \"field\": \"title\",\n10                     \"function\": \"pattern\",\n11                     \"functionOptions\": {\n12                         \"match\": \"^[A-Z]\"\n13                     }\n14                 }\n15             ]\n16         }\n17     }\n18 }",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>     </span><span style=\"color:#7edcda\">\"rules\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>         </span><span style=\"color:#7edcda\">\"valid-document-version\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>             </span><span style=\"color:#7edcda\">\"message\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"Application title must start with upper case\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>             </span><span style=\"color:#7edcda\">\"severity\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"error\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>             </span><span style=\"color:#7edcda\">\"given\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"$.info\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>             </span><span style=\"color:#7edcda\">\"then\"</span><span>: [\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>                 {\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>                     </span><span style=\"color:#7edcda\">\"field\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"title\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>                     </span><span style=\"color:#7edcda\">\"function\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"pattern\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>                     </span><span style=\"color:#7edcda\">\"functionOptions\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>                         </span><span style=\"color:#7edcda\">\"match\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"^[A-Z]\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>                     }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>                 }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>             ]\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>         }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span>     }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span> }</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "spectral lint asyncapi.yaml",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span>  </span><span style=\"color:#c0e2a3;font-weight:500\">spectral</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lint</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">asyncapi.yaml</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "Diagnostics",
        "context": "Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document."
      },
      {
        "id": "highlight_1",
        "content": "Empty or invalid document please fix errors / define AsyncAPI document",
        "context": "Errors in your document are highlighted with a red underline, showing which lines are invalid. The Diagnostics section also provides feedback, allowing you to further troubleshoot with detailed error messages. When a document is invalid, it provides the following error: Empty or invalid document please fix errors / define AsyncAPI document."
      },
      {
        "id": "highlight_2",
        "content": "asyncapi start studio",
        "context": "You can also open AsyncAPI Studio from the CLI by running the command asyncapi start studio."
      },
      {
        "id": "highlight_3",
        "content": "summary",
        "context": "Let's discuss an example. While the summary property is optional in an AsyncAPI document, you could choose to require it for your organization. You would then implement a solution that enables you to enforce internal rules on AsyncAPI documents' providers."
      },
      {
        "id": "highlight_4",
        "content": ".spectral.yaml",
        "context": "Create a file named .spectral.yaml to begin writing your API description and document rules.\nExample:"
      }
    ]
  }
}