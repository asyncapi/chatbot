{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/concepts/asyncapi-document/define-payload",
    "timestamp": "2025-03-12T17:48:43.927Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Define Payload",
    "hierarchy": {
      "sections": {
        "Define schema": {
          "level": 2,
          "content": "Define the schema for the message payload with one of the following methods:\nInline: Define the JSON schema within the message payload property.\nComponents reference: Specify the schema using a reference to the components.schemas section, such as $ref: '#/components/schemas/user.\nRemote reference: Specify the schema using an absolute remote endpoint, such as $ref: 'https://schemas.example.com/user'.\nLocal file reference: Specify the schema using a relative reference, such as $ref: './user-signedup.json'.\nThe diagram below describes how payload referencing works within the component reference:#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refmessagecontentTypeheaderscomponentsschemaspayloadHere is an example of an AsyncAPI document where the payload's schema is defined directly within it:1channels:\n2  exampleChannel:\n3    address: exampleChannel\n4    messages:\n5      SimpleSignup:\n6        payload:\n7          type: object\n8          properties:\n9            name:\n10              type: string\n11            email:\n12              type: string"
        },
        "Attach examples": {
          "level": 2,
          "content": "Although optional, attaching examples to the AsyncAPI document is highly recommended. You can use JSON or YAML format for binary encodings. Attach the examples to the examples property within the message payload definition. For example:1examples:\n2  - name: SimpleSignup\n3    summary: A simple UserSignup example message\n4    payload:\n5      user:\n6        name: Demo\n7        email: demo@demo.io"
        },
        "Reuse schemas between messages": {
          "level": 2,
          "content": "To reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:1components:\n2  messages:\n3    SimpleSignup:\n4      name: SimpleSignup\n5      contentType: application/json\n6      payload:\n7        $ref: '#/components/schemas/SimpleSignup'\n8    examples:\n9    - name: SimpleSignup\n10      payload: \n11        user:\n12          name: Demo\n13          email: demo@demo.io\n14  schemas:\n15    SimpleSignup:\n16      type: object\n17      properties:\n18        name:\n19          type: string\n20        email:\n21          type: string"
        },
        "Schema formats": {
          "level": 2,
          "content": "The default schema in an AsyncAPI document is the AsyncAPI schema itself. However, you can choose from other formats like JSON Schema, Avro, OpenAPI Schema, Protobuf, and more. Remember to indicate in your AsyncAPI document which schema format you're using.You specify the format of the schema inside the payload field. The type of information you can put in payload can be described as a tuple. (A tuple is an ordered sequence of elements that can't be changed during a program's execution.)When using AsyncAPI Schema, the payload must represent a reference or the payload schema definition as described in previous sections.If you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:1  payload:\n2    schemaFormat: application/vnd.apache.avro;version=1.9.0\n3    schema:\n4      $ref: \"https://www.asyncapi.com/resources/casestudies/adeo/CostingRequestPayload.avsc\"The above example specifies that the provided schema of the message payload is in Avro, version 1.9.0. It also specifies where the Avro schema file is located."
        },
        "Schema formats and limitations related to their structures": {
          "level": 2,
          "content": "Some schema formats are too challenging to manage in JSON/YAML. Complex schema formats — Avro, AsyncAPI schemas, and other JSON-based schemas — can be directly included in the AsyncAPI document or referenced using $ref for specific sections.1    payload:\n2        schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n3        schema: # The following is an Avro schema in YAML format (JSON format is also supported)\n4          type: record\n5          name: User\n6          namespace: com.company\n7          doc: User information\n8          fields:\n9            - name: displayName\n10              type: string\n11            - name: email\n12              type: string\n13            - name: age\n14              type: intThe process is more complex for Protobuf schemas, as their Protocol Buffers are not JSON-based. You cannot use $ref to reference parts of the schema. Instead, you must include the entire Protobuf schema definition as a string:1      payload:\n2        schemaFormat: application/vnd.google.protobuf;version=3\n3        schema: |\n4            message Point {\n5                required int32 x = 1;\n6                required int32 y = 2;\n7                optional string label = 3;\n8            }\n9\n10            message Line {\n11                required Point start = 1;\n12                required Point end = 2;\n13                optional string label = 3;\n14            }"
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/concepts"
            },
            {
              "text": "Server",
              "href": "https://www.asyncapi.com/docs/concepts/server"
            },
            {
              "text": "Producer",
              "href": "https://www.asyncapi.com/docs/concepts/producer"
            },
            {
              "text": "Consumer",
              "href": "https://www.asyncapi.com/docs/concepts/consumer"
            },
            {
              "text": "Channel",
              "href": "https://www.asyncapi.com/docs/concepts/channel"
            },
            {
              "text": "Application",
              "href": "https://www.asyncapi.com/docs/concepts/application"
            },
            {
              "text": "Protocol",
              "href": "https://www.asyncapi.com/docs/concepts/protocol"
            },
            {
              "text": "Message",
              "href": "https://www.asyncapi.com/docs/concepts/message"
            },
            {
              "text": "AsyncAPI Document",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document"
            },
            {
              "text": "AsyncAPI document structure",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/structure"
            },
            {
              "text": "Tags",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/tags"
            },
            {
              "text": "Adding channels",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-channels"
            },
            {
              "text": "Parameters in channel address",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/dynamic-channel-address"
            },
            {
              "text": "Adding operations",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-operations"
            },
            {
              "text": "Operation security",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/securing-operations"
            },
            {
              "text": "Adding messages",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-messages"
            },
            {
              "text": "Reusability with traits",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reusability-with-traits"
            },
            {
              "text": "Server security",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/server-security"
            },
            {
              "text": "Adding reply info",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reply-info"
            },
            {
              "text": "Extending specification",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/extending-specification"
            },
            {
              "text": "Adding bindings",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/adding-bindings"
            },
            {
              "text": "Payload schema",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/define-payload"
            },
            {
              "text": "Server variables",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/variable-url"
            },
            {
              "text": "Reusable parts",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/reusable-parts"
            },
            {
              "text": "Add servers",
              "href": "https://www.asyncapi.com/docs/concepts/asyncapi-document/add-server"
            }
          ]
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "The payload schema sets the format, data types, and properties of a message. Such an approach ensures the message's payload follows a specific structure and data format.\nIt's recommended to use AsyncAPI Schema (a superset of JSON Schema) for handling complex messages and structured data.  AsyncAPI Schema helps consumers understand the payload's structure and data types. However, AsyncAPI allows any schema format. For example, when using the Avro schema format, define your message payload in Avro directly instead of trying to represent it in JSON Schema format.\nDefine schema\nDefine the schema for the message payload with one of the following methods:\n\nInline: Define the JSON schema within the message payload property.\nComponents reference: Specify the schema using a reference to the components.schemas section, such as $ref: '#/components/schemas/user.\nRemote reference: Specify the schema using an absolute remote endpoint, such as $ref: 'https://schemas.example.com/user'.\nLocal file reference: Specify the schema using a relative reference, such as $ref: './user-signedup.json'.\n\nThe diagram below describes how payload referencing works within the component reference:\n#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refmessagecontentTypeheaderscomponentsschemaspayload\nHere is an example of an AsyncAPI document where the payload's schema is defined directly within it:\n1channels:\n2  exampleChannel:\n3    address: exampleChannel\n4    messages:\n5      SimpleSignup:\n6        payload:\n7          type: object\n8          properties:\n9            name:\n10              type: string\n11            email:\n12              type: string\nAttach examples\nAlthough optional, attaching examples to the AsyncAPI document is highly recommended. You can use JSON or YAML format for binary encodings. Attach the examples to the examples property within the message payload definition. For example:\n1examples:\n2  - name: SimpleSignup\n3    summary: A simple UserSignup example message\n4    payload:\n5      user:\n6        name: Demo\n7        email: demo@demo.io\nReuse schemas between messages\nTo reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:\n1components:\n2  messages:\n3    SimpleSignup:\n4      name: SimpleSignup\n5      contentType: application/json\n6      payload:\n7        $ref: '#/components/schemas/SimpleSignup'\n8    examples:\n9    - name: SimpleSignup\n10      payload: \n11        user:\n12          name: Demo\n13          email: demo@demo.io\n14  schemas:\n15    SimpleSignup:\n16      type: object\n17      properties:\n18        name:\n19          type: string\n20        email:\n21          type: string\nSchema formats\nThe default schema in an AsyncAPI document is the AsyncAPI schema itself. However, you can choose from other formats like JSON Schema, Avro, OpenAPI Schema, Protobuf, and more. Remember to indicate in your AsyncAPI document which schema format you're using.\nYou specify the format of the schema inside the payload field. The type of information you can put in payload can be described as a tuple. (A tuple is an ordered sequence of elements that can't be changed during a program's execution.)\nWhen using AsyncAPI Schema, the payload must represent a reference or the payload schema definition as described in previous sections.\nIf you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:\n1  payload:\n2    schemaFormat: application/vnd.apache.avro;version=1.9.0\n3    schema:\n4      $ref: \"https://www.asyncapi.com/resources/casestudies/adeo/CostingRequestPayload.avsc\"\nThe above example specifies that the provided schema of the message payload is in Avro, version 1.9.0. It also specifies where the Avro schema file is located.\nSchema formats and limitations related to their structures\nSome schema formats are too challenging to manage in JSON/YAML. Complex schema formats — Avro, AsyncAPI schemas, and other JSON-based schemas — can be directly included in the AsyncAPI document or referenced using $ref for specific sections.\n1    payload:\n2        schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n3        schema: # The following is an Avro schema in YAML format (JSON format is also supported)\n4          type: record\n5          name: User\n6          namespace: com.company\n7          doc: User information\n8          fields:\n9            - name: displayName\n10              type: string\n11            - name: email\n12              type: string\n13            - name: age\n14              type: int\nThe process is more complex for Protobuf schemas, as their Protocol Buffers are not JSON-based. You cannot use $ref to reference parts of the schema. Instead, you must include the entire Protobuf schema definition as a string:\n1      payload:\n2        schemaFormat: application/vnd.google.protobuf;version=3\n3        schema: |\n4            message Point {\n5                required int32 x = 1;\n6                required int32 y = 2;\n7                optional string label = 3;\n8            }\n9\n10            message Line {\n11                required Point start = 1;\n12                required Point end = 2;\n13                optional string label = 3;\n14            }",
    "sections": [
      {
        "title": "Define schema",
        "level": 2,
        "text": "Define the schema for the message payload with one of the following methods:\nInline: Define the JSON schema within the message payload property.\nComponents reference: Specify the schema using a reference to the components.schemas section, such as $ref: '#/components/schemas/user.\nRemote reference: Specify the schema using an absolute remote endpoint, such as $ref: 'https://schemas.example.com/user'.\nLocal file reference: Specify the schema using a relative reference, such as $ref: './user-signedup.json'.\nThe diagram below describes how payload referencing works within the component reference:#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refmessagecontentTypeheaderscomponentsschemaspayloadHere is an example of an AsyncAPI document where the payload's schema is defined directly within it:1channels:\n2  exampleChannel:\n3    address: exampleChannel\n4    messages:\n5      SimpleSignup:\n6        payload:\n7          type: object\n8          properties:\n9            name:\n10              type: string\n11            email:\n12              type: string"
      },
      {
        "title": "Attach examples",
        "level": 2,
        "text": "Although optional, attaching examples to the AsyncAPI document is highly recommended. You can use JSON or YAML format for binary encodings. Attach the examples to the examples property within the message payload definition. For example:1examples:\n2  - name: SimpleSignup\n3    summary: A simple UserSignup example message\n4    payload:\n5      user:\n6        name: Demo\n7        email: demo@demo.io"
      },
      {
        "title": "Reuse schemas between messages",
        "level": 2,
        "text": "To reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:1components:\n2  messages:\n3    SimpleSignup:\n4      name: SimpleSignup\n5      contentType: application/json\n6      payload:\n7        $ref: '#/components/schemas/SimpleSignup'\n8    examples:\n9    - name: SimpleSignup\n10      payload: \n11        user:\n12          name: Demo\n13          email: demo@demo.io\n14  schemas:\n15    SimpleSignup:\n16      type: object\n17      properties:\n18        name:\n19          type: string\n20        email:\n21          type: string"
      },
      {
        "title": "Schema formats",
        "level": 2,
        "text": "The default schema in an AsyncAPI document is the AsyncAPI schema itself. However, you can choose from other formats like JSON Schema, Avro, OpenAPI Schema, Protobuf, and more. Remember to indicate in your AsyncAPI document which schema format you're using.You specify the format of the schema inside the payload field. The type of information you can put in payload can be described as a tuple. (A tuple is an ordered sequence of elements that can't be changed during a program's execution.)When using AsyncAPI Schema, the payload must represent a reference or the payload schema definition as described in previous sections.If you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:1  payload:\n2    schemaFormat: application/vnd.apache.avro;version=1.9.0\n3    schema:\n4      $ref: \"https://www.asyncapi.com/resources/casestudies/adeo/CostingRequestPayload.avsc\"The above example specifies that the provided schema of the message payload is in Avro, version 1.9.0. It also specifies where the Avro schema file is located."
      },
      {
        "title": "Schema formats and limitations related to their structures",
        "level": 2,
        "text": "Some schema formats are too challenging to manage in JSON/YAML. Complex schema formats — Avro, AsyncAPI schemas, and other JSON-based schemas — can be directly included in the AsyncAPI document or referenced using $ref for specific sections.1    payload:\n2        schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n3        schema: # The following is an Avro schema in YAML format (JSON format is also supported)\n4          type: record\n5          name: User\n6          namespace: com.company\n7          doc: User information\n8          fields:\n9            - name: displayName\n10              type: string\n11            - name: email\n12              type: string\n13            - name: age\n14              type: intThe process is more complex for Protobuf schemas, as their Protocol Buffers are not JSON-based. You cannot use $ref to reference parts of the schema. Instead, you must include the entire Protobuf schema definition as a string:1      payload:\n2        schemaFormat: application/vnd.google.protobuf;version=3\n3        schema: |\n4            message Point {\n5                required int32 x = 1;\n6                required int32 y = 2;\n7                optional string label = 3;\n8            }\n9\n10            message Line {\n11                required Point start = 1;\n12                required Point end = 2;\n13                optional string label = 3;\n14            }"
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg id=\"mermaid-0\" width=\"100%\" xmlns=\"http://www.w3.org/2000/svg\" style=\"max-width: 455.359375px;\" viewBox=\"-8 -8 455.359375 334\" aria-roledescription=\"flowchart-v2\"><style>#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}</style><g><marker id=\"flowchart-pointEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"10\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 0 L 10 5 L 0 10 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-pointStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"0\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"12\" markerHeight=\"12\" orient=\"auto\"><path d=\"M 0 5 L 10 10 L 10 0 z\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-circleEnd\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"11\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-circleStart\" class=\"marker flowchart\" viewBox=\"0 0 10 10\" refX=\"-1\" refY=\"5\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><circle cx=\"5\" cy=\"5\" r=\"5\" class=\"arrowMarkerPath\" style=\"stroke-width: 1; stroke-dasharray: 1, 0;\"></circle></marker><marker id=\"flowchart-crossEnd\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"12\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><marker id=\"flowchart-crossStart\" class=\"marker cross flowchart\" viewBox=\"0 0 11 11\" refX=\"-1\" refY=\"5.2\" markerUnits=\"userSpaceOnUse\" markerWidth=\"11\" markerHeight=\"11\" orient=\"auto\"><path d=\"M 1,1 l 9,9 M 10,1 l -9,9\" class=\"arrowMarkerPath\" style=\"stroke-width: 2; stroke-dasharray: 1, 0;\"></path></marker><g class=\"root\"><g class=\"clusters\"></g><g class=\"edgePaths\"><path d=\"M62.149,92L71.275,80.167C80.401,68.333,98.654,44.667,111.947,32.833C125.24,21,133.573,21,137.74,21L141.906,21\" id=\"L-C-F-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-F\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M91.906,113L96.073,113C100.24,113,108.573,113,119.968,113C131.363,113,145.82,113,153.049,113L160.277,113\" id=\"L-C-I-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-I\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M62.149,134L71.275,145.833C80.401,157.667,98.654,181.333,115.135,193.167C131.616,205,146.326,205,153.68,205L161.035,205\" id=\"L-C-D-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-C LE-D\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M243.738,205L254.025,205C264.313,205,284.887,205,303.167,209.167C321.448,213.333,337.434,221.667,345.427,225.833L353.421,230\" id=\"L-D-B-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-D LE-B\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path><path d=\"M262.707,297L269.833,297C276.958,297,291.21,297,306.329,292.833C321.448,288.667,337.434,280.333,345.427,276.167L353.421,272\" id=\"L-A-B-0\" class=\" edge-thickness-normal edge-pattern-solid flowchart-link LS-A LE-B\" style=\"fill:none;\" marker-end=\"url(#flowchart-pointEnd)\"></path></g><g class=\"edgeLabels\"><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g><g class=\"edgeLabel\" transform=\"translate(305.4609375, 205)\"><g class=\"label\" transform=\"translate(-17.59375, -13.5)\"><foreignObject width=\"35.1875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\">$ref</span></div></foreignObject></g></g><g class=\"edgeLabel\"><g class=\"label\" transform=\"translate(0, 0)\"><foreignObject width=\"0\" height=\"0\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"edgeLabel\"></span></div></foreignObject></g></g></g><g class=\"nodes\"><g class=\"node default default\" id=\"flowchart-C-36\" transform=\"translate(45.953125, 113)\"><rect class=\"basic label-container\" style=\"fill:#47BCEE;stroke:#000;\" rx=\"0\" ry=\"0\" x=\"-45.953125\" y=\"-21\" width=\"91.90625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-38.453125, -13.5)\"><foreignObject width=\"76.90625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">message</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-F-37\" transform=\"translate(202.38671875, 21)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-60.48046875\" y=\"-21\" width=\"120.9609375\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-52.98046875, -13.5)\"><foreignObject width=\"105.9609375\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">contentType</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-I-38\" transform=\"translate(202.38671875, 113)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-42.109375\" y=\"-21\" width=\"84.21875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-34.609375, -13.5)\"><foreignObject width=\"69.21875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">headers</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-A-39\" transform=\"translate(202.38671875, 297)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-60.3203125\" y=\"-21\" width=\"120.640625\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-52.8203125, -13.5)\"><foreignObject width=\"105.640625\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">components</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-B-40\" transform=\"translate(393.70703125, 251)\"><rect class=\"basic label-container\" style=\"\" rx=\"0\" ry=\"0\" x=\"-45.65234375\" y=\"-21\" width=\"91.3046875\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-38.15234375, -13.5)\"><foreignObject width=\"76.3046875\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">schemas</span></div></foreignObject></g></g><g class=\"node default default\" id=\"flowchart-D-41\" transform=\"translate(202.38671875, 205)\"><rect class=\"basic label-container\" style=\"fill:#47BCEE;stroke:#000;\" rx=\"0\" ry=\"0\" x=\"-41.3515625\" y=\"-21\" width=\"82.703125\" height=\"42\"></rect><g class=\"label\" style=\"\" transform=\"translate(-33.8515625, -13.5)\"><foreignObject width=\"67.703125\" height=\"27\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: inline-block; white-space: nowrap;\"><span class=\"nodeLabel\">payload</span></div></foreignObject></g></g></g></g></g></svg>",
        "context": "#mermaid-0{font-family:Inter,sans-serif;font-size:18px;fill:#242929;}#mermaid-0 .error-icon{fill:#F7F9FA;}#mermaid-0 .error-text{fill:#080605;stroke:#080605;}#mermaid-0 .edge-thickness-normal{stroke-width:2px;}#mermaid-0 .edge-thickness-thick{stroke-width:3.5px;}#mermaid-0 .edge-pattern-solid{stroke-dasharray:0;}#mermaid-0 .edge-pattern-dashed{stroke-dasharray:3;}#mermaid-0 .edge-pattern-dotted{stroke-dasharray:2;}#mermaid-0 .marker{fill:#0b0b0b;stroke:#0b0b0b;}#mermaid-0 .marker.cross{stroke:#0b0b0b;}#mermaid-0 svg{font-family:Inter,sans-serif;font-size:18px;}#mermaid-0 .label{font-family:Inter,sans-serif;color:#242929;}#mermaid-0 .cluster-label text{fill:#080605;}#mermaid-0 .cluster-label span{color:#080605;}#mermaid-0 .label text,#mermaid-0 span{fill:#242929;color:#242929;}#mermaid-0 .node rect,#mermaid-0 .node circle,#mermaid-0 .node ellipse,#mermaid-0 .node polygon,#mermaid-0 .node path{fill:#EDFAFF;stroke:#47BCEE;stroke-width:1px;}#mermaid-0 .node .label{text-align:center;}#mermaid-0 .node.clickable{cursor:pointer;}#mermaid-0 .arrowheadPath{fill:undefined;}#mermaid-0 .edgePath .path{stroke:#0b0b0b;stroke-width:2.0px;}#mermaid-0 .flowchart-link{stroke:#0b0b0b;fill:none;}#mermaid-0 .edgeLabel{background-color:#F4EFFC;text-align:center;}#mermaid-0 .edgeLabel rect{opacity:0.5;background-color:#F4EFFC;fill:#F4EFFC;}#mermaid-0 .cluster rect{fill:#F7F9FA;stroke:#BFC6C7;stroke-width:1px;}#mermaid-0 .cluster text{fill:#080605;}#mermaid-0 .cluster span{color:#080605;}#mermaid-0 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:Inter,sans-serif;font-size:12px;background:#F7F9FA;border:1px solid undefined;border-radius:2px;pointer-events:none;z-index:100;}#mermaid-0 .flowchartTitleText{text-anchor:middle;font-size:18px;fill:#242929;}#mermaid-0 :root{--mermaid-font-family:\"trebuchet ms\",verdana,arial,sans-serif;}$refmessagecontentTypeheaderscomponentsschemaspayload",
        "description": "SVG containing 9 paths, 2 circles, and 6 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1channels:\n2  exampleChannel:\n3    address: exampleChannel\n4    messages:\n5      SimpleSignup:\n6        payload:\n7          type: object\n8          properties:\n9            name:\n10              type: string\n11            email:\n12              type: string",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">exampleChannel:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">exampleChannel</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">SimpleSignup:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>            </span><span style=\"color:#7edcda\">name:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>            </span><span style=\"color:#7edcda\">email:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1examples:\n2  - name: SimpleSignup\n3    summary: A simple UserSignup example message\n4    payload:\n5      user:\n6        name: Demo\n7        email: demo@demo.io",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">examples:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">SimpleSignup</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">summary:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">A</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">simple</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">UserSignup</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">example</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">message</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">user:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Demo</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#7edcda\">email:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">demo@demo.io</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1components:\n2  messages:\n3    SimpleSignup:\n4      name: SimpleSignup\n5      contentType: application/json\n6      payload:\n7        $ref: '#/components/schemas/SimpleSignup'\n8    examples:\n9    - name: SimpleSignup\n10      payload: \n11        user:\n12          name: Demo\n13          email: demo@demo.io\n14  schemas:\n15    SimpleSignup:\n16      type: object\n17      properties:\n18        name:\n19          type: string\n20        email:\n21          type: string",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">components:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">SimpleSignup:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>      </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">SimpleSignup</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">contentType:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">application/json</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>      </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/components/schemas/SimpleSignup'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>    </span><span style=\"color:#7edcda\">examples:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">SimpleSignup</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>      </span><span style=\"color:#7edcda\">payload:</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>        </span><span style=\"color:#7edcda\">user:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>          </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Demo</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>          </span><span style=\"color:#7edcda\">email:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">demo@demo.io</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>  </span><span style=\"color:#7edcda\">schemas:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>    </span><span style=\"color:#7edcda\">SimpleSignup:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>      </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>      </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>        </span><span style=\"color:#7edcda\">name:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>        </span><span style=\"color:#7edcda\">email:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1  payload:\n2    schemaFormat: application/vnd.apache.avro;version=1.9.0\n3    schema:\n4      $ref: \"https://www.asyncapi.com/resources/casestudies/adeo/CostingRequestPayload.avsc\"",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>  </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>    </span><span style=\"color:#7edcda\">schemaFormat:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">application/vnd.apache.avro;version=1.9.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">schema:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>      </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">\"https://www.asyncapi.com/resources/casestudies/adeo/CostingRequestPayload.avsc\"</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1    payload:\n2        schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n3        schema: # The following is an Avro schema in YAML format (JSON format is also supported)\n4          type: record\n5          name: User\n6          namespace: com.company\n7          doc: User information\n8          fields:\n9            - name: displayName\n10              type: string\n11            - name: email\n12              type: string\n13            - name: age\n14              type: int",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>    </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>        </span><span style=\"color:#7edcda\">schemaFormat:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'application/vnd.apache.avro;version=1.9.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">schema:</span><span> </span><span style=\"color:#797f8c\"># The following is an Avro schema in YAML format (JSON format is also supported)</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">record</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>          </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">User</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>          </span><span style=\"color:#7edcda\">namespace:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">com.company</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>          </span><span style=\"color:#7edcda\">doc:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">User</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">information</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>          </span><span style=\"color:#7edcda\">fields:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>            </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">displayName</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>            </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">email</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>            </span><span style=\"color:#64a0dc\">-</span><span> </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">age</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">int</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1      payload:\n2        schemaFormat: application/vnd.google.protobuf;version=3\n3        schema: |\n4            message Point {\n5                required int32 x = 1;\n6                required int32 y = 2;\n7                optional string label = 3;\n8            }\n9\n10            message Line {\n11                required Point start = 1;\n12                required Point end = 2;\n13                optional string label = 3;\n14            }",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>      </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>        </span><span style=\"color:#7edcda\">schemaFormat:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">application/vnd.google.protobuf;version=3</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">schema:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">|\n</span></span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span>            message Point {\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>                required int32 x = 1;\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>                required int32 y = 2;\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>                optional string label = 3;\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>            }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span style=\"color:#c0e2a3;font-weight:500\"></span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>            </span><span style=\"color:#c0e2a3;font-weight:500\">message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Line</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>                </span><span style=\"color:#c0e2a3;font-weight:500\">required</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Point</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">start</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">=</span><span> </span><span style=\"color:#d8da68\">1</span><span style=\"color:#c0e2a3;font-weight:500\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>                </span><span style=\"color:#c0e2a3;font-weight:500\">required</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Point</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">end</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">=</span><span> </span><span style=\"color:#d8da68\">2</span><span style=\"color:#c0e2a3;font-weight:500\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>                </span><span style=\"color:#c0e2a3;font-weight:500\">optional</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">label</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">=</span><span> </span><span style=\"color:#d8da68\">3</span><span style=\"color:#c0e2a3;font-weight:500\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>            }</span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "components.schemas",
        "context": "Components reference: Specify the schema using a reference to the components.schemas section, such as $ref: '#/components/schemas/user."
      },
      {
        "id": "highlight_1",
        "content": "$ref: '#/components/schemas/user",
        "context": "Components reference: Specify the schema using a reference to the components.schemas section, such as $ref: '#/components/schemas/user."
      },
      {
        "id": "highlight_2",
        "content": "$ref: 'https://schemas.example.com/user'",
        "context": "Remote reference: Specify the schema using an absolute remote endpoint, such as $ref: 'https://schemas.example.com/user'."
      },
      {
        "id": "highlight_3",
        "content": "$ref: './user-signedup.json'",
        "context": "Local file reference: Specify the schema using a relative reference, such as $ref: './user-signedup.json'."
      },
      {
        "id": "highlight_4",
        "content": "components/schemas",
        "context": "To reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:"
      },
      {
        "id": "highlight_5",
        "content": "$ref",
        "context": "To reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:"
      },
      {
        "id": "highlight_6",
        "content": "$ref",
        "context": "To reuse a schema in your AsyncAPI document, define it in the components/schemas section and reference it using the $ref keyword. Using $ref avoids duplication and ensures consistency. Here's an example of reusing a schema from components in AsyncAPI:"
      },
      {
        "id": "highlight_7",
        "content": "payload",
        "context": "You specify the format of the schema inside the payload field. The type of information you can put in payload can be described as a tuple. (A tuple is an ordered sequence of elements that can't be changed during a program's execution.)"
      },
      {
        "id": "highlight_8",
        "content": "payload",
        "context": "You specify the format of the schema inside the payload field. The type of information you can put in payload can be described as a tuple. (A tuple is an ordered sequence of elements that can't be changed during a program's execution.)"
      },
      {
        "id": "highlight_9",
        "content": "payload",
        "context": "When using AsyncAPI Schema, the payload must represent a reference or the payload schema definition as described in previous sections."
      },
      {
        "id": "highlight_10",
        "content": "payload",
        "context": "If you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:"
      },
      {
        "id": "highlight_11",
        "content": "payload.schemaFormat",
        "context": "If you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:"
      },
      {
        "id": "highlight_12",
        "content": "payload.schema",
        "context": "If you're using various formats, the payload field should include both payload.schemaFormat and payload.schema. For example:"
      },
      {
        "id": "highlight_13",
        "content": "$ref",
        "context": "Some schema formats are too challenging to manage in JSON/YAML. Complex schema formats — Avro, AsyncAPI schemas, and other JSON-based schemas — can be directly included in the AsyncAPI document or referenced using $ref for specific sections."
      },
      {
        "id": "highlight_14",
        "content": "$ref",
        "context": "The process is more complex for Protobuf schemas, as their Protocol Buffers are not JSON-based. You cannot use $ref to reference parts of the schema. Instead, you must include the entire Protobuf schema definition as a string:"
      }
    ]
  }
}