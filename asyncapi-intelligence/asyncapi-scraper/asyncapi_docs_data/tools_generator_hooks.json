{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tools/generator/hooks",
    "timestamp": "2025-03-12T17:52:28.329Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Hooks",
    "hierarchy": {
      "sections": {
        "Types": {
          "level": 2,
          "content": "The following types of hooks are currently supported:Hook typeDescriptionReturn typeArgumentsgenerate:beforeCalled after registration of all filters and before the generator starts processing of the template.void : Nothing is expected to be returned.The generator instancegenerate:afterCalled at the very end of the generation.void : Nothing is expected to be returned.The generator instancesetFileTemplateNameCalled right before saving a new file generated by file template.string : a new filename for the generator to use for the file template.The generator instance and object in the form of { \"originalFilename\" : string }"
        },
        "Location": {
          "level": 2,
          "content": "The generator parses:\nAll the files in the .hooks directory inside the template.\nAll modules listed in the template configuration and triggers only hooks whose names were added to the config. You can use an official hooks library that is bundled together with the generator. To learn how to add hooks to configuration read more about the configuration file."
        },
        "Examples": {
          "level": 2,
          "content": "Some of the examples have names of hook functions provided and some not. Keep in mind that hook functions kept in template in default location do not require a name. Name is required only if you keep hooks in non default location or in a separate library, because such hooks need to be explicitly configured in the configuration file. For more details on hooks configuration read more about the configuration file.\nMost basic modules with hooks look like this:1module.exports = {\n2  'generate:after': generator => console.log('This runs after generation is complete')\n3}Below you have an example Hook that after generation creates an AsyncAPI file.1const fs = require('fs');\n2const path = require('path');\n3\n4module.exports = {\n5  'generate:after': generator => {\n6    const asyncapi = generator.originalAsyncAPI;\n7    let extension;\n8\n9    try {\n10      JSON.parse(asyncapi);\n11      extension = 'json';\n12    } catch (e) {\n13      extension = 'yaml';\n14    }\n15\n16    fs.writeFileSync(path.resolve(generator.targetDir, `asyncapi.${extension}`), asyncapi);\n17  }\n18};And here an example Hook that before generation switches publish and subscribe operations for each channel.1module.exports = {\n2  'generate:before': function switchOperations(generator) {\n3    const asyncapi = generator.asyncapi;\n4    for (let [key, value] of Object.entries(asyncapi.channels())) {\n5      let publish = value._json.publish;\n6      value._json.publish = value._json.subscribe;\n7      value._json.subscribe = publish;\n8      if (!value._json.subscribe) {\n9        delete value._json.subscribe;\n10      }\n11      if (!value._json.publish) {\n12        delete value._json.publish;\n13      }\n14    }\n15  };\n16};Example hook for changing the filename of a template file. Replaces all '-' characters with '_'.1module.exports = {\n2\t'setFileTemplateName': (generator, hookArguments) => {\n3\t\tconst currentFilename = hookArguments.originalFilename ;\n4\t\treturn currentFilename.replace('-', '_')\n5\t};\n6};"
        },
        "Official library": {
          "level": 2,
          "content": "It is a library of reusable hooks that you can use in your templates. You only have to add its name to the configuration: @asyncapi/generator-hooks and specify which hook you want to enable.This library consists of the following hooks:Hook nameHook typeDescriptioncreateAsyncapiFilegenerate:afterIt creates an AsyncAPI file with the content of the spec file passed to the generator. By default, it creates the file in the root of the generation output directory. This hook also supports custom parameters that the user can pass to template generation. The parameter called asyncapiFileDir allows the user to specify the location where the spec file should be created. To make your template users use this parameter, you need to add it to the configuration of your template like other parameters\nIn your template configuration in package.json specify you want to use this library and what hook exactly:\n1{\n2  \"generator\": {\n3      \"hooks\": {\n4          \"@asyncapi/generator-hooks\": \"createAsyncapiFile\"\n5      }\n6  }\n7}\n\nSome hooks support custom parameters that template's user can use to specify different behaviour of the hook. To enable these, you need to also add them to the list of your template's parameters:\n1{\n2  \"generator\": {\n3      \"parameters\": {\n4        \"asyncapiFileDir\": {\n5            \"description\": \"This template by default also outputs the AsyncAPI document that was passed as input. You can specify with this parameter what should be the location of this AsyncAPI document, relative to specified template output.\"\n6        }\n7    }\n8  }\n9}"
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tools"
            },
            {
              "text": "Generator",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Installation guide",
              "href": "https://www.asyncapi.com/docs/tools/generator/installation-guide"
            },
            {
              "text": "Usage",
              "href": "https://www.asyncapi.com/docs/tools/generator/usage"
            },
            {
              "text": "AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tools/generator/asyncapi-document"
            },
            {
              "text": "Template",
              "href": "https://www.asyncapi.com/docs/tools/generator/template"
            },
            {
              "text": "Parser",
              "href": "https://www.asyncapi.com/docs/tools/generator/parser"
            },
            {
              "text": "Generator version vs template version",
              "href": "https://www.asyncapi.com/docs/tools/generator/versioning"
            },
            {
              "text": "Library API",
              "href": "https://www.asyncapi.com/docs/tools/generator/api"
            },
            {
              "text": "Template development",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-development"
            },
            {
              "text": "Configuration file",
              "href": "https://www.asyncapi.com/docs/tools/generator/configuration-file"
            },
            {
              "text": "Template context",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-context"
            },
            {
              "text": "React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/react-render-engine"
            },
            {
              "text": "Nunjucks render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/nunjucks-render-engine"
            },
            {
              "text": "Hooks",
              "href": "https://www.asyncapi.com/docs/tools/generator/hooks"
            },
            {
              "text": "File templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/file-templates"
            },
            {
              "text": "TypeScript support",
              "href": "https://www.asyncapi.com/docs/tools/generator/typescript-support"
            },
            {
              "text": "Special file names",
              "href": "https://www.asyncapi.com/docs/tools/generator/special-file-names"
            },
            {
              "text": "Creating a template",
              "href": "https://www.asyncapi.com/docs/tools/generator/generator-template"
            },
            {
              "text": "Using private templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/using-private-template"
            },
            {
              "text": "Adding models generation in template",
              "href": "https://www.asyncapi.com/docs/tools/generator/model-generation"
            },
            {
              "text": "Migrating from Nunjucks to React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-nunjucks-react"
            },
            {
              "text": "Migrating from `ag` CLI to AsyncAPI CLI",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-cli"
            },
            {
              "text": "CLI",
              "href": "https://www.asyncapi.com/docs/tools/cli"
            },
            {
              "text": "Glee",
              "href": "https://www.asyncapi.com/docs/tools/glee"
            }
          ]
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Hooks are functions called by the generator on a specific moment in the generation process. Hooks can be anonymous functions but you can also add function names. These hooks can have arguments provided to them or being expected to return a value.\nTypes\nThe following types of hooks are currently supported:\nHook typeDescriptionReturn typeArgumentsgenerate:beforeCalled after registration of all filters and before the generator starts processing of the template.void : Nothing is expected to be returned.The generator instancegenerate:afterCalled at the very end of the generation.void : Nothing is expected to be returned.The generator instancesetFileTemplateNameCalled right before saving a new file generated by file template.string : a new filename for the generator to use for the file template.The generator instance and object in the form of { \"originalFilename\" : string }\nLocation\nThe generator parses:\n\nAll the files in the .hooks directory inside the template.\nAll modules listed in the template configuration and triggers only hooks whose names were added to the config. You can use an official hooks library that is bundled together with the generator. To learn how to add hooks to configuration read more about the configuration file.\n\nExamples\n\nSome of the examples have names of hook functions provided and some not. Keep in mind that hook functions kept in template in default location do not require a name. Name is required only if you keep hooks in non default location or in a separate library, because such hooks need to be explicitly configured in the configuration file. For more details on hooks configuration read more about the configuration file.\n\nMost basic modules with hooks look like this:\n1module.exports = {\n2  'generate:after': generator => console.log('This runs after generation is complete')\n3}\nBelow you have an example Hook that after generation creates an AsyncAPI file.\n1const fs = require('fs');\n2const path = require('path');\n3\n4module.exports = {\n5  'generate:after': generator => {\n6    const asyncapi = generator.originalAsyncAPI;\n7    let extension;\n8\n9    try {\n10      JSON.parse(asyncapi);\n11      extension = 'json';\n12    } catch (e) {\n13      extension = 'yaml';\n14    }\n15\n16    fs.writeFileSync(path.resolve(generator.targetDir, `asyncapi.${extension}`), asyncapi);\n17  }\n18};\nAnd here an example Hook that before generation switches publish and subscribe operations for each channel.\n1module.exports = {\n2  'generate:before': function switchOperations(generator) {\n3    const asyncapi = generator.asyncapi;\n4    for (let [key, value] of Object.entries(asyncapi.channels())) {\n5      let publish = value._json.publish;\n6      value._json.publish = value._json.subscribe;\n7      value._json.subscribe = publish;\n8      if (!value._json.subscribe) {\n9        delete value._json.subscribe;\n10      }\n11      if (!value._json.publish) {\n12        delete value._json.publish;\n13      }\n14    }\n15  };\n16};\nExample hook for changing the filename of a template file. Replaces all '-' characters with '_'.\n1module.exports = {\n2\t'setFileTemplateName': (generator, hookArguments) => {\n3\t\tconst currentFilename = hookArguments.originalFilename ;\n4\t\treturn currentFilename.replace('-', '_')\n5\t};\n6};\nOfficial library\nIt is a library of reusable hooks that you can use in your templates. You only have to add its name to the configuration: @asyncapi/generator-hooks and specify which hook you want to enable.\nThis library consists of the following hooks:\nHook nameHook typeDescriptioncreateAsyncapiFilegenerate:afterIt creates an AsyncAPI file with the content of the spec file passed to the generator. By default, it creates the file in the root of the generation output directory. This hook also supports custom parameters that the user can pass to template generation. The parameter called asyncapiFileDir allows the user to specify the location where the spec file should be created. To make your template users use this parameter, you need to add it to the configuration of your template like other parameters\n\nIn your template configuration in package.json specify you want to use this library and what hook exactly:\n1{\n2  \"generator\": {\n3      \"hooks\": {\n4          \"@asyncapi/generator-hooks\": \"createAsyncapiFile\"\n5      }\n6  }\n7}\n\nSome hooks support custom parameters that template's user can use to specify different behaviour of the hook. To enable these, you need to also add them to the list of your template's parameters:\n1{\n2  \"generator\": {\n3      \"parameters\": {\n4        \"asyncapiFileDir\": {\n5            \"description\": \"This template by default also outputs the AsyncAPI document that was passed as input. You can specify with this parameter what should be the location of this AsyncAPI document, relative to specified template output.\"\n6        }\n7    }\n8  }\n9}",
    "sections": [
      {
        "title": "Types",
        "level": 2,
        "text": "The following types of hooks are currently supported:Hook typeDescriptionReturn typeArgumentsgenerate:beforeCalled after registration of all filters and before the generator starts processing of the template.void : Nothing is expected to be returned.The generator instancegenerate:afterCalled at the very end of the generation.void : Nothing is expected to be returned.The generator instancesetFileTemplateNameCalled right before saving a new file generated by file template.string : a new filename for the generator to use for the file template.The generator instance and object in the form of { \"originalFilename\" : string }"
      },
      {
        "title": "Location",
        "level": 2,
        "text": "The generator parses:\nAll the files in the .hooks directory inside the template.\nAll modules listed in the template configuration and triggers only hooks whose names were added to the config. You can use an official hooks library that is bundled together with the generator. To learn how to add hooks to configuration read more about the configuration file."
      },
      {
        "title": "Examples",
        "level": 2,
        "text": "Some of the examples have names of hook functions provided and some not. Keep in mind that hook functions kept in template in default location do not require a name. Name is required only if you keep hooks in non default location or in a separate library, because such hooks need to be explicitly configured in the configuration file. For more details on hooks configuration read more about the configuration file.\nMost basic modules with hooks look like this:1module.exports = {\n2  'generate:after': generator => console.log('This runs after generation is complete')\n3}Below you have an example Hook that after generation creates an AsyncAPI file.1const fs = require('fs');\n2const path = require('path');\n3\n4module.exports = {\n5  'generate:after': generator => {\n6    const asyncapi = generator.originalAsyncAPI;\n7    let extension;\n8\n9    try {\n10      JSON.parse(asyncapi);\n11      extension = 'json';\n12    } catch (e) {\n13      extension = 'yaml';\n14    }\n15\n16    fs.writeFileSync(path.resolve(generator.targetDir, `asyncapi.${extension}`), asyncapi);\n17  }\n18};And here an example Hook that before generation switches publish and subscribe operations for each channel.1module.exports = {\n2  'generate:before': function switchOperations(generator) {\n3    const asyncapi = generator.asyncapi;\n4    for (let [key, value] of Object.entries(asyncapi.channels())) {\n5      let publish = value._json.publish;\n6      value._json.publish = value._json.subscribe;\n7      value._json.subscribe = publish;\n8      if (!value._json.subscribe) {\n9        delete value._json.subscribe;\n10      }\n11      if (!value._json.publish) {\n12        delete value._json.publish;\n13      }\n14    }\n15  };\n16};Example hook for changing the filename of a template file. Replaces all '-' characters with '_'.1module.exports = {\n2\t'setFileTemplateName': (generator, hookArguments) => {\n3\t\tconst currentFilename = hookArguments.originalFilename ;\n4\t\treturn currentFilename.replace('-', '_')\n5\t};\n6};"
      },
      {
        "title": "Official library",
        "level": 2,
        "text": "It is a library of reusable hooks that you can use in your templates. You only have to add its name to the configuration: @asyncapi/generator-hooks and specify which hook you want to enable.This library consists of the following hooks:Hook nameHook typeDescriptioncreateAsyncapiFilegenerate:afterIt creates an AsyncAPI file with the content of the spec file passed to the generator. By default, it creates the file in the root of the generation output directory. This hook also supports custom parameters that the user can pass to template generation. The parameter called asyncapiFileDir allows the user to specify the location where the spec file should be created. To make your template users use this parameter, you need to add it to the configuration of your template like other parameters\nIn your template configuration in package.json specify you want to use this library and what hook exactly:\n1{\n2  \"generator\": {\n3      \"hooks\": {\n4          \"@asyncapi/generator-hooks\": \"createAsyncapiFile\"\n5      }\n6  }\n7}\n\nSome hooks support custom parameters that template's user can use to specify different behaviour of the hook. To enable these, you need to also add them to the list of your template's parameters:\n1{\n2  \"generator\": {\n3      \"parameters\": {\n4        \"asyncapiFileDir\": {\n5            \"description\": \"This template by default also outputs the AsyncAPI document that was passed as input. You can specify with this parameter what should be the location of this AsyncAPI document, relative to specified template output.\"\n6        }\n7    }\n8  }\n9}"
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1module.exports = {\n2  'generate:after': generator => console.log('This runs after generation is complete')\n3}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">module</span><span>.</span><span style=\"color:#7edcda\">exports</span><span> = {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#c0e2a3;font-weight:500\">'generate:after'</span><span>: generator =&gt; </span><span style=\"color:#7edcda\">console</span><span>.log(</span><span style=\"color:#c0e2a3;font-weight:500\">'This runs after generation is complete'</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1const fs = require('fs');\n2const path = require('path');\n3\n4module.exports = {\n5  'generate:after': generator => {\n6    const asyncapi = generator.originalAsyncAPI;\n7    let extension;\n8\n9    try {\n10      JSON.parse(asyncapi);\n11      extension = 'json';\n12    } catch (e) {\n13      extension = 'yaml';\n14    }\n15\n16    fs.writeFileSync(path.resolve(generator.targetDir, `asyncapi.${extension}`), asyncapi);\n17  }\n18};",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>const </span><span style=\"color:#7edcda\">fs</span><span> = require(</span><span style=\"color:#c0e2a3;font-weight:500\">'fs'</span><span>)</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>const </span><span style=\"color:#7edcda\">path</span><span> = require(</span><span style=\"color:#c0e2a3;font-weight:500\">'path'</span><span>)</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#7edcda\">module.exports</span><span> = {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  'generate:after': </span><span style=\"color:#7edcda\">generator</span><span> =&gt; {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>    const </span><span style=\"color:#7edcda\">asyncapi</span><span> = generator.originalAsyncAPI</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    let extension</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>    try {\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>      JSON.parse(asyncapi)</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>      </span><span style=\"color:#7edcda\">extension</span><span> = </span><span style=\"color:#c0e2a3;font-weight:500\">'json'</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span>    } catch (e) {\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>      </span><span style=\"color:#7edcda\">extension</span><span> = </span><span style=\"color:#c0e2a3;font-weight:500\">'yaml'</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>    }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>    fs.writeFileSync(path.resolve(generator.targetDir, `asyncapi.${extension}`), asyncapi)</span><span style=\"color:#797f8c\">;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span>  }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>}</span><span style=\"color:#797f8c\">;</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1module.exports = {\n2  'generate:before': function switchOperations(generator) {\n3    const asyncapi = generator.asyncapi;\n4    for (let [key, value] of Object.entries(asyncapi.channels())) {\n5      let publish = value._json.publish;\n6      value._json.publish = value._json.subscribe;\n7      value._json.subscribe = publish;\n8      if (!value._json.subscribe) {\n9        delete value._json.subscribe;\n10      }\n11      if (!value._json.publish) {\n12        delete value._json.publish;\n13      }\n14    }\n15  };\n16};",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">module</span><span>.exports = {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  'generate:before': </span><span style=\"color:#64a0dc\">function</span><span> switch</span><span class=\"hljs-constructor\">Operations(</span><span class=\"hljs-constructor\" style=\"color:#d6deeb\">generator</span><span class=\"hljs-constructor\">)</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>    const asyncapi = generator.asyncapi;\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#64a0dc\">for</span><span> (</span><span style=\"color:#64a0dc\">let</span><span> </span><span style=\"color:#64a0dc\">[</span><span class=\"hljs-identifier\" style=\"color:#64a0dc\">key</span><span style=\"color:#64a0dc\">, </span><span class=\"hljs-identifier\" style=\"color:#64a0dc\">value</span><span style=\"color:#64a0dc\">]</span><span> </span><span style=\"color:#64a0dc\">of</span><span> </span><span class=\"hljs-module-access hljs-module hljs-identifier\">Object</span><span class=\"hljs-module-access hljs-module\">.</span><span>entries(asyncapi.channels</span><span style=\"color:#64a0dc\">()</span><span>)) {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#64a0dc\">let</span><span> publish = value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>publish;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>      value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>publish = value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>subscribe;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>      value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>subscribe = publish;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>      </span><span style=\"color:#64a0dc\">if</span><span> (!value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>subscribe) {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>        delete value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>subscribe;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>      }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>      </span><span style=\"color:#64a0dc\">if</span><span> (!value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>publish) {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>        delete value.</span><span class=\"hljs-module-access hljs-module hljs-identifier\">_json</span><span class=\"hljs-module-access hljs-module\">.</span><span>publish;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>      }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>    }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>  };\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>};</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1module.exports = {\n2\t'setFileTemplateName': (generator, hookArguments) => {\n3\t\tconst currentFilename = hookArguments.originalFilename ;\n4\t\treturn currentFilename.replace('-', '_')\n5\t};\n6};",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">module</span><span>.</span><span style=\"color:#7edcda\">exports</span><span> = {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>\t</span><span style=\"color:#c0e2a3;font-weight:500\">'setFileTemplateName'</span><span>: </span><span style=\"color:#d6deeb\">(generator, hookArguments)</span><span style=\"color:#74e287\"> =&gt;</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>\t\tconst currentFilename = hookArguments.originalFilename ;\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>\t\t</span><span style=\"color:#64a0dc\">return</span><span> currentFilename.replace(</span><span style=\"color:#c0e2a3;font-weight:500\">'-'</span><span>, </span><span style=\"color:#c0e2a3;font-weight:500\">'_'</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>\t};\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>};</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1{\n2  \"generator\": {\n3      \"hooks\": {\n4          \"@asyncapi/generator-hooks\": \"createAsyncapiFile\"\n5      }\n6  }\n7}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">\"generator\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>      </span><span style=\"color:#7edcda\">\"hooks\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>          </span><span style=\"color:#7edcda\">\"@asyncapi/generator-hooks\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"createAsyncapiFile\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>      }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>  }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1{\n2  \"generator\": {\n3      \"parameters\": {\n4        \"asyncapiFileDir\": {\n5            \"description\": \"This template by default also outputs the AsyncAPI document that was passed as input. You can specify with this parameter what should be the location of this AsyncAPI document, relative to specified template output.\"\n6        }\n7    }\n8  }\n9}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">\"generator\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>      </span><span style=\"color:#7edcda\">\"parameters\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>        </span><span style=\"color:#7edcda\">\"asyncapiFileDir\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>            </span><span style=\"color:#7edcda\">\"description\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"This template by default also outputs the AsyncAPI document that was passed as input. You can specify with this parameter what should be the location of this AsyncAPI document, relative to specified template output.\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>        }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>    }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>  }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>}</span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [
      {
        "id": "table_0",
        "headers": [
          "Hook type",
          "Description",
          "Return type",
          "Arguments"
        ],
        "rows": [
          {
            "Hook type": "generate:before",
            "Description": "Called after registration of all filters and before the generator starts processing of the template.",
            "Return type": "void : Nothing is expected to be returned.",
            "Arguments": "The generator instance"
          },
          {
            "Hook type": "generate:after",
            "Description": "Called at the very end of the generation.",
            "Return type": "void : Nothing is expected to be returned.",
            "Arguments": "The generator instance"
          },
          {
            "Hook type": "setFileTemplateName",
            "Description": "Called right before saving a new file generated by file template.",
            "Return type": "string : a new filename for the generator to use for the file template.",
            "Arguments": "The generator instance and object in the form of { \"originalFilename\" : string }"
          }
        ],
        "context": ""
      },
      {
        "id": "table_1",
        "headers": [
          "Hook name",
          "Hook type",
          "Description"
        ],
        "rows": [
          {
            "Hook name": "createAsyncapiFile",
            "Hook type": "generate:after",
            "Description": "It creates an AsyncAPI file with the content of the spec file passed to the generator. By default, it creates the file in the root of the generation output directory. This hook also supports custom parameters that the user can pass to template generation. The parameter called asyncapiFileDir allows the user to specify the location where the spec file should be created. To make your template users use this parameter, you need to add it to the configuration of your template like other parameters"
          }
        ],
        "context": ""
      }
    ],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "generate:before",
        "context": "generate:before"
      },
      {
        "id": "highlight_1",
        "content": "generate:after",
        "context": "generate:after"
      },
      {
        "id": "highlight_2",
        "content": "setFileTemplateName",
        "context": "setFileTemplateName"
      },
      {
        "id": "highlight_3",
        "content": "{ \"originalFilename\" : string }",
        "context": "The generator instance and object in the form of { \"originalFilename\" : string }"
      },
      {
        "id": "highlight_4",
        "content": ".hooks",
        "context": "All the files in the .hooks directory inside the template."
      },
      {
        "id": "highlight_5",
        "content": "publish",
        "context": "And here an example Hook that before generation switches publish and subscribe operations for each channel."
      },
      {
        "id": "highlight_6",
        "content": "subscribe",
        "context": "And here an example Hook that before generation switches publish and subscribe operations for each channel."
      },
      {
        "id": "highlight_7",
        "content": "@asyncapi/generator-hooks",
        "context": "It is a library of reusable hooks that you can use in your templates. You only have to add its name to the configuration: @asyncapi/generator-hooks and specify which hook you want to enable."
      },
      {
        "id": "highlight_8",
        "content": "createAsyncapiFile",
        "context": "createAsyncapiFile"
      },
      {
        "id": "highlight_9",
        "content": "generate:after",
        "context": "generate:after"
      },
      {
        "id": "highlight_10",
        "content": "asyncapiFileDir",
        "context": "It creates an AsyncAPI file with the content of the spec file passed to the generator. By default, it creates the file in the root of the generation output directory. This hook also supports custom parameters that the user can pass to template generation. The parameter called asyncapiFileDir allows the user to specify the location where the spec file should be created. To make your template users use this parameter, you need to add it to the configuration of your template like other parameters"
      },
      {
        "id": "highlight_11",
        "content": "package.json",
        "context": "In your template configuration in package.json specify you want to use this library and what hook exactly:\n1{\n2  \"generator\": {\n3      \"hooks\": {\n4          \"@asyncapi/generator-hooks\": \"createAsyncapiFile\"\n5      }\n6  }\n7}"
      }
    ]
  }
}