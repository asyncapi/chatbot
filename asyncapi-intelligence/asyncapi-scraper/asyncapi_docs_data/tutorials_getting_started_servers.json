{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tutorials/getting-started/servers",
    "timestamp": "2025-03-12T17:50:02.640Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Servers",
    "hierarchy": {
      "sections": {
        "Remember": {
          "level": 5,
          "content": "The servers section defines where your application should connect to start sending and receiving messages.\nIf you are using a broker-centric architecture such as Kafka or RabbitMQ, specify the broker URL.\nIf you have the classic client-server model such as for REST APIs, then your server should be the URL of the server."
        },
        "Conclusion": {
          "level": 2,
          "content": "Now you know where the Hello world application connects to, and you can start receiving hello {name} messages.In the next section, you'll learn how to add security requirements to your server."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tutorials"
            },
            {
              "text": "Getting Started",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started"
            },
            {
              "text": "Event-Driven Architectures",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/event-driven-architectures"
            },
            {
              "text": "Coming from OpenAPI",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/coming-from-openapi"
            },
            {
              "text": "Hello world",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/hello-world"
            },
            {
              "text": "Request/reply pattern",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/request-reply"
            },
            {
              "text": "AsyncAPI documents",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/asyncapi-documents"
            },
            {
              "text": "Servers",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/servers"
            },
            {
              "text": "Adding security",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started/security"
            },
            {
              "text": "Create AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tutorials/create-asyncapi-document"
            },
            {
              "text": "Generate code",
              "href": "https://www.asyncapi.com/docs/tutorials/generate-code"
            },
            {
              "text": "Validate AsyncAPI document with Studio",
              "href": "https://www.asyncapi.com/docs/tutorials/studio-document-validation"
            },
            {
              "text": "Message validation in runtime",
              "href": "https://www.asyncapi.com/docs/tutorials/message-validation"
            },
            {
              "text": "Streetlights - Interactive",
              "href": "https://www.asyncapi.com/docs/tutorials/streetlights-interactive"
            },
            {
              "text": "WebSocket",
              "href": "https://www.asyncapi.com/docs/tutorials/websocket"
            },
            {
              "text": "Kafka",
              "href": "https://www.asyncapi.com/docs/tutorials/kafka"
            }
          ]
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "In the previous lesson, you learned how to create the definition of a simple Hello World application. Let's take it from there.\nIn this tutorial, you'll learn how to add servers to your AsyncAPI document. Adding and defining servers is useful because it specifies where and how to connect. The connection facilitates where to send and receive messages.\n1asyncapi: 3.0.0\n2info:\n3  title: Hello world application\n4  version: '0.1.0'\n5servers:\n6  production:\n7    host: broker.mycompany.com\n8    protocol: amqp\n9    description: This is \"My Company\" broker.\n10channels:\n11  hello:\n12    address: 'hello'\n13    messages:\n14      sayHelloMessage:\n15        payload:\n16          type: string\n17          pattern: '^hello .+$'\n18operations:\n19  receiveHello:\n20    action: 'receive'\n21    channel:\n22      $ref: '#/channels/hello'\nYou've now added a new section called servers in your AsyncAPI document.\nYou might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs).\nRememberThe servers section defines where your application should connect to start sending and receiving messages.\nIf you are using a broker-centric architecture such as Kafka or RabbitMQ, specify the broker URL.\nIf you have the classic client-server model such as for REST APIs, then your server should be the URL of the server.\n\nConclusion\nNow you know where the Hello world application connects to, and you can start receiving hello {name} messages.\nIn the next section, you'll learn how to add security requirements to your server.",
    "sections": [
      {
        "title": "Remember",
        "level": 5,
        "text": "The servers section defines where your application should connect to start sending and receiving messages.\nIf you are using a broker-centric architecture such as Kafka or RabbitMQ, specify the broker URL.\nIf you have the classic client-server model such as for REST APIs, then your server should be the URL of the server."
      },
      {
        "title": "Conclusion",
        "level": 2,
        "text": "Now you know where the Hello world application connects to, and you can start receiving hello {name} messages.In the next section, you'll learn how to add security requirements to your server."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1asyncapi: 3.0.0\n2info:\n3  title: Hello world application\n4  version: '0.1.0'\n5servers:\n6  production:\n7    host: broker.mycompany.com\n8    protocol: amqp\n9    description: This is \"My Company\" broker.\n10channels:\n11  hello:\n12    address: 'hello'\n13    messages:\n14      sayHelloMessage:\n15        payload:\n16          type: string\n17          pattern: '^hello .+$'\n18operations:\n19  receiveHello:\n20    action: 'receive'\n21    channel:\n22      $ref: '#/channels/hello'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">asyncapi:</span><span> </span><span style=\"color:#d8da68\">3.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#7edcda\">info:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Hello</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">world</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">application</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#7edcda\">version:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'0.1.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#7edcda\">servers:</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">6</span><span>  </span><span style=\"color:#7edcda\">production:</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">7</span><span>    </span><span style=\"color:#7edcda\">host:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">broker.mycompany.com</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">8</span><span>    </span><span style=\"color:#7edcda\">protocol:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">amqp</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">9</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">This</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">\"My Company\"</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">broker.</span><span>\n</span></span><span style=\"padding-right:2rem;display:block;width:100%;background-color:#3e4d64\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#3e4d64;color:#A3ACAD\">10</span><span></span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>  </span><span style=\"color:#7edcda\">hello:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'hello'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>      </span><span style=\"color:#7edcda\">sayHelloMessage:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>          </span><span style=\"color:#7edcda\">pattern:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'^hello .+$'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span></span><span style=\"color:#7edcda\">operations:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>  </span><span style=\"color:#7edcda\">receiveHello:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>    </span><span style=\"color:#7edcda\">action:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'receive'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>    </span><span style=\"color:#7edcda\">channel:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span>      </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/channels/hello'</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "servers",
        "context": "In this tutorial, you'll learn how to add servers to your AsyncAPI document. Adding and defining servers is useful because it specifies where and how to connect. The connection facilitates where to send and receive messages."
      },
      {
        "id": "highlight_1",
        "content": "servers",
        "context": "You've now added a new section called servers in your AsyncAPI document."
      },
      {
        "id": "highlight_2",
        "content": "amqp",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_3",
        "content": "amqp",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_4",
        "content": "mqtt",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_5",
        "content": "kafka",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_6",
        "content": "ws",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_7",
        "content": "http",
        "context": "You might have noticed that our example mentions amqp, a very common protocol that was popularized by RabbitMQ (among others). While our example uses amqp, you can use any protocol. The most common protocols used are mqtt (widely adopted by the Internet of Things and mobile apps), kafka (popular for its streaming solution), ws (WebSockets are frequently used in browsers), and http (used in HTTP streaming APIs)."
      },
      {
        "id": "highlight_8",
        "content": "servers",
        "context": "The servers section defines where your application should connect to start sending and receiving messages."
      },
      {
        "id": "highlight_9",
        "content": "server",
        "context": "If you have the classic client-server model such as for REST APIs, then your server should be the URL of the server."
      },
      {
        "id": "highlight_10",
        "content": "Hello world application",
        "context": "Now you know where the Hello world application connects to, and you can start receiving hello {name} messages."
      },
      {
        "id": "highlight_11",
        "content": "hello {name}",
        "context": "Now you know where the Hello world application connects to, and you can start receiving hello {name} messages."
      }
    ]
  }
}