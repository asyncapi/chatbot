{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tutorials/create-asyncapi-document",
    "timestamp": "2025-03-12T17:44:36.596Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Create Asyncapi Document",
    "hierarchy": {
      "sections": {
        "Introduction": {
          "level": 2,
          "content": "In this tutorial, you'll learn how to create an AsyncAPI document based on a sample real-world use case. Additionally, you will learn about event-driven architecture, message brokers, pub/sub pattern.Let's pretend you have a company called Smarty Lighting, and you install smart-city streetlight lighting systems. Such a smart lighting system is an Internet of Things (IoT) use case. You will create a Smarty Lighting Streetlights application using Node.js and Mosquitto (MQTT) as the message broker. Your application will allow you to manage city lights remotely.You want to build a system that can turn streetlights on and off based on their environmental conditions:\n\nYou will implement an event-driven architecture (EDA) with a message broker in its \"center.\"\n\n\nThe Streetlights application will receive information about environmental lighting conditions.\n\n\nThe Streetlights application will connect to the broker and receive a stream of events from all the streetlights devices reporting their conditions.\n\n\nThe Streetlights application is unaware of how many streetlights devices send measurement events to the broker; it just connects to the broker and receives all events."
        },
        "Background context": {
          "level": 2,
          "content": "Event-driven architecture (EDA) is a design pattern built around the production, detection, and reaction to events that take place in time. In this pattern, a message broker, event publishers, and subscribers are its main components for event exchange within microservices.Message brokers enables asynchronous communications between services so that the sending service need not wait for the receiving service’s reply. That allows interdependent services to “talk” with one another directly, even if they were written in different languages or implemented on different platforms.Furthermore, the Pub/sub is appealing for IoT use cases due to two key features: support for flexible coupling between publishers/subscribers and inherent support for point-to-multipoint transmission.MQTT, is a well-known protocol that is widely used in IoT applications because it was created particularly to address machine-to-machine (M2M) communication."
        },
        "Create AsyncAPI document": {
          "level": 2,
          "content": "In this step, you will create an AsyncAPI document to describe the Streelights application. It will help you generate the code and the documentation later on.To create one, you can either use the AsyncAPI Studio or the AsyncAPI CLI, depending on your project's needs.RememberYou can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty.Create the following specification document titled asyncapi with a .yaml extension.1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n11servers:\n12  mosquitto:\n13    host: test.mosquitto.org\n14    protocol: mqtt\n15channels:\n16  lightMeasured:\n17    address: 'light/measured'\n18    messages:\n19      lightMeasuredMessage:\n20        name: LightMeasured\n21        payload:\n22          type: object\n23          properties:\n24            id:\n25              type: integer\n26              minimum: 0\n27              description: ID of the streetlight.\n28            lumens:\n29              type: integer\n30              minimum: 0\n31              description: Light intensity measured in lumens.\n32            sentAt:\n33              type: string\n34              format: date-time\n35              description: Date and time when the message was sent.\n36operations:\n37  onLightMeasured:\n38    action: 'receive'\n39    summary: Information about environmental lighting conditions for a particular streetlight.\n40    channel:\n41      $ref: '#/channels/lightMeasured'Let's break the above code snippet down into pieces:1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n\nThe asyncapi field indicates you use the AsyncAPI version 3.0.0.\n\n\nThe info field holds information about the Streetlights application. Here, the title, version, description, and license were defined.\n\nMoving on, let's talk about the servers section:1servers:\n2  mosquitto:\n3    host: test.mosquitto.org\n4    protocol: mqttIn this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost.Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)1channels:\n2  lightMeasured:\n3    address: 'light/measured'\n4    messages:\n5      lightMeasuredMessage:\n6        name: LightMeasured\n7        payload:\n8          redacted for brevityIn this example, light/measured is the channel address. From the Streetlight application example perspective, it means that light/measured is the topic's name in the MQTT broker.Next is the payload property. It is used to understand how the event should look like when publishing to that channel1      payload:\n2        type: object\n3        properties:\n4          id:\n5            type: integer\n6            minimum: 0\n7            description: Id of the streetlight.\n8          lumens:\n9            type: integer\n10            minimum: 0\n11            description: Light intensity measured in lumens.\n12          sentAt:\n13            type: string\n14            format: date-time\n15            description: Date and time when the message was sent.The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time.\nJSON Schema Draft 07 is 100% compatible with AsyncAPI schemas. You can also use other standards to describe payload schema, such as Avro.\nThe last section is operations, where you describe what the application described in the AsyncAPI document is doing.1operations:\n2  onLightMeasured:\n3    action: 'receive'\n4    summary: Information about environmental lighting conditions for a particular streetlight.\n5    channel:\n6      $ref: '#/channels/lightMeasured'You can see that the Streetlight application is a consumer that only receives events from the broker. Using the mandatory channel field, you specify with $ref what channel the events come from.The onLightMeasured key property describes the function or method name that takes care of this functionality in the generated code. It is a unique ID of the operation across the whole document."
        },
        "Remember": {
          "level": 5,
          "content": "You can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty."
        },
        "Summary": {
          "level": 2,
          "content": "In this tutorial, you learned how to create an AsyncAPI specification document via a real-life example with an IoT use case.Your finished document is just a starting point; you must add your business logic. Take some time to play with it. There are still lots of things to be covered, but the intent of this tutorial is to make it simple for you to get an idea of the potential."
        },
        "Next steps": {
          "level": 2,
          "content": "Now that you've completed this tutorial, you can proceed to learn how to validate your AsyncAPI document with AsyncAPI Studio."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tutorials"
            },
            {
              "text": "Getting Started",
              "href": "https://www.asyncapi.com/docs/tutorials/getting-started"
            },
            {
              "text": "Create AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tutorials/create-asyncapi-document"
            },
            {
              "text": "Generate code",
              "href": "https://www.asyncapi.com/docs/tutorials/generate-code"
            },
            {
              "text": "Validate AsyncAPI document with Studio",
              "href": "https://www.asyncapi.com/docs/tutorials/studio-document-validation"
            },
            {
              "text": "Message validation in runtime",
              "href": "https://www.asyncapi.com/docs/tutorials/message-validation"
            },
            {
              "text": "Streetlights - Interactive",
              "href": "https://www.asyncapi.com/docs/tutorials/streetlights-interactive"
            },
            {
              "text": "WebSocket",
              "href": "https://www.asyncapi.com/docs/tutorials/websocket"
            },
            {
              "text": "Kafka",
              "href": "https://www.asyncapi.com/docs/tutorials/kafka"
            }
          ]
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": []
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "Introduction\nIn this tutorial, you'll learn how to create an AsyncAPI document based on a sample real-world use case. Additionally, you will learn about event-driven architecture, message brokers, pub/sub pattern.\nLet's pretend you have a company called Smarty Lighting, and you install smart-city streetlight lighting systems. Such a smart lighting system is an Internet of Things (IoT) use case. You will create a Smarty Lighting Streetlights application using Node.js and Mosquitto (MQTT) as the message broker. Your application will allow you to manage city lights remotely.\nYou want to build a system that can turn streetlights on and off based on their environmental conditions:\n\n\nYou will implement an event-driven architecture (EDA) with a message broker in its \"center.\"\n\n\nThe Streetlights application will receive information about environmental lighting conditions.\n\n\nThe Streetlights application will connect to the broker and receive a stream of events from all the streetlights devices reporting their conditions.\n\n\nThe Streetlights application is unaware of how many streetlights devices send measurement events to the broker; it just connects to the broker and receives all events.\n\n\nBackground context\nEvent-driven architecture (EDA) is a design pattern built around the production, detection, and reaction to events that take place in time. In this pattern, a message broker, event publishers, and subscribers are its main components for event exchange within microservices.\nMessage brokers enables asynchronous communications between services so that the sending service need not wait for the receiving service’s reply. That allows interdependent services to “talk” with one another directly, even if they were written in different languages or implemented on different platforms.\nFurthermore, the Pub/sub is appealing for IoT use cases due to two key features: support for flexible coupling between publishers/subscribers and inherent support for point-to-multipoint transmission.\nMQTT, is a well-known protocol that is widely used in IoT applications because it was created particularly to address machine-to-machine (M2M) communication.\nCreate AsyncAPI document\nIn this step, you will create an AsyncAPI document to describe the Streelights application. It will help you generate the code and the documentation later on.\nTo create one, you can either use the AsyncAPI Studio or the AsyncAPI CLI, depending on your project's needs.\nRememberYou can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty.\nCreate the following specification document titled asyncapi with a .yaml extension.\n1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n11servers:\n12  mosquitto:\n13    host: test.mosquitto.org\n14    protocol: mqtt\n15channels:\n16  lightMeasured:\n17    address: 'light/measured'\n18    messages:\n19      lightMeasuredMessage:\n20        name: LightMeasured\n21        payload:\n22          type: object\n23          properties:\n24            id:\n25              type: integer\n26              minimum: 0\n27              description: ID of the streetlight.\n28            lumens:\n29              type: integer\n30              minimum: 0\n31              description: Light intensity measured in lumens.\n32            sentAt:\n33              type: string\n34              format: date-time\n35              description: Date and time when the message was sent.\n36operations:\n37  onLightMeasured:\n38    action: 'receive'\n39    summary: Information about environmental lighting conditions for a particular streetlight.\n40    channel:\n41      $ref: '#/channels/lightMeasured'\nLet's break the above code snippet down into pieces:\n1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n\n\nThe asyncapi field indicates you use the AsyncAPI version 3.0.0.\n\n\nThe info field holds information about the Streetlights application. Here, the title, version, description, and license were defined.\n\n\nMoving on, let's talk about the servers section:\n1servers:\n2  mosquitto:\n3    host: test.mosquitto.org\n4    protocol: mqtt\nIn this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost.\nNow, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)\n1channels:\n2  lightMeasured:\n3    address: 'light/measured'\n4    messages:\n5      lightMeasuredMessage:\n6        name: LightMeasured\n7        payload:\n8          redacted for brevity\nIn this example, light/measured is the channel address. From the Streetlight application example perspective, it means that light/measured is the topic's name in the MQTT broker.\nNext is the payload property. It is used to understand how the event should look like when publishing to that channel\n1      payload:\n2        type: object\n3        properties:\n4          id:\n5            type: integer\n6            minimum: 0\n7            description: Id of the streetlight.\n8          lumens:\n9            type: integer\n10            minimum: 0\n11            description: Light intensity measured in lumens.\n12          sentAt:\n13            type: string\n14            format: date-time\n15            description: Date and time when the message was sent.\nThe payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time.\n\nJSON Schema Draft 07 is 100% compatible with AsyncAPI schemas. You can also use other standards to describe payload schema, such as Avro.\n\nThe last section is operations, where you describe what the application described in the AsyncAPI document is doing.\n1operations:\n2  onLightMeasured:\n3    action: 'receive'\n4    summary: Information about environmental lighting conditions for a particular streetlight.\n5    channel:\n6      $ref: '#/channels/lightMeasured'\nYou can see that the Streetlight application is a consumer that only receives events from the broker. Using the mandatory channel field, you specify with $ref what channel the events come from.\nThe onLightMeasured key property describes the function or method name that takes care of this functionality in the generated code. It is a unique ID of the operation across the whole document.\nSummary\nIn this tutorial, you learned how to create an AsyncAPI specification document via a real-life example with an IoT use case.\nYour finished document is just a starting point; you must add your business logic. Take some time to play with it. There are still lots of things to be covered, but the intent of this tutorial is to make it simple for you to get an idea of the potential.\nNext steps\nNow that you've completed this tutorial, you can proceed to learn how to validate your AsyncAPI document with AsyncAPI Studio.",
    "sections": [
      {
        "title": "Introduction",
        "level": 2,
        "text": "In this tutorial, you'll learn how to create an AsyncAPI document based on a sample real-world use case. Additionally, you will learn about event-driven architecture, message brokers, pub/sub pattern.Let's pretend you have a company called Smarty Lighting, and you install smart-city streetlight lighting systems. Such a smart lighting system is an Internet of Things (IoT) use case. You will create a Smarty Lighting Streetlights application using Node.js and Mosquitto (MQTT) as the message broker. Your application will allow you to manage city lights remotely.You want to build a system that can turn streetlights on and off based on their environmental conditions:\n\nYou will implement an event-driven architecture (EDA) with a message broker in its \"center.\"\n\n\nThe Streetlights application will receive information about environmental lighting conditions.\n\n\nThe Streetlights application will connect to the broker and receive a stream of events from all the streetlights devices reporting their conditions.\n\n\nThe Streetlights application is unaware of how many streetlights devices send measurement events to the broker; it just connects to the broker and receives all events."
      },
      {
        "title": "Background context",
        "level": 2,
        "text": "Event-driven architecture (EDA) is a design pattern built around the production, detection, and reaction to events that take place in time. In this pattern, a message broker, event publishers, and subscribers are its main components for event exchange within microservices.Message brokers enables asynchronous communications between services so that the sending service need not wait for the receiving service’s reply. That allows interdependent services to “talk” with one another directly, even if they were written in different languages or implemented on different platforms.Furthermore, the Pub/sub is appealing for IoT use cases due to two key features: support for flexible coupling between publishers/subscribers and inherent support for point-to-multipoint transmission.MQTT, is a well-known protocol that is widely used in IoT applications because it was created particularly to address machine-to-machine (M2M) communication."
      },
      {
        "title": "Create AsyncAPI document",
        "level": 2,
        "text": "In this step, you will create an AsyncAPI document to describe the Streelights application. It will help you generate the code and the documentation later on.To create one, you can either use the AsyncAPI Studio or the AsyncAPI CLI, depending on your project's needs.RememberYou can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty.Create the following specification document titled asyncapi with a .yaml extension.1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n11servers:\n12  mosquitto:\n13    host: test.mosquitto.org\n14    protocol: mqtt\n15channels:\n16  lightMeasured:\n17    address: 'light/measured'\n18    messages:\n19      lightMeasuredMessage:\n20        name: LightMeasured\n21        payload:\n22          type: object\n23          properties:\n24            id:\n25              type: integer\n26              minimum: 0\n27              description: ID of the streetlight.\n28            lumens:\n29              type: integer\n30              minimum: 0\n31              description: Light intensity measured in lumens.\n32            sentAt:\n33              type: string\n34              format: date-time\n35              description: Date and time when the message was sent.\n36operations:\n37  onLightMeasured:\n38    action: 'receive'\n39    summary: Information about environmental lighting conditions for a particular streetlight.\n40    channel:\n41      $ref: '#/channels/lightMeasured'Let's break the above code snippet down into pieces:1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n\nThe asyncapi field indicates you use the AsyncAPI version 3.0.0.\n\n\nThe info field holds information about the Streetlights application. Here, the title, version, description, and license were defined.\n\nMoving on, let's talk about the servers section:1servers:\n2  mosquitto:\n3    host: test.mosquitto.org\n4    protocol: mqttIn this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost.Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)1channels:\n2  lightMeasured:\n3    address: 'light/measured'\n4    messages:\n5      lightMeasuredMessage:\n6        name: LightMeasured\n7        payload:\n8          redacted for brevityIn this example, light/measured is the channel address. From the Streetlight application example perspective, it means that light/measured is the topic's name in the MQTT broker.Next is the payload property. It is used to understand how the event should look like when publishing to that channel1      payload:\n2        type: object\n3        properties:\n4          id:\n5            type: integer\n6            minimum: 0\n7            description: Id of the streetlight.\n8          lumens:\n9            type: integer\n10            minimum: 0\n11            description: Light intensity measured in lumens.\n12          sentAt:\n13            type: string\n14            format: date-time\n15            description: Date and time when the message was sent.The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time.\nJSON Schema Draft 07 is 100% compatible with AsyncAPI schemas. You can also use other standards to describe payload schema, such as Avro.\nThe last section is operations, where you describe what the application described in the AsyncAPI document is doing.1operations:\n2  onLightMeasured:\n3    action: 'receive'\n4    summary: Information about environmental lighting conditions for a particular streetlight.\n5    channel:\n6      $ref: '#/channels/lightMeasured'You can see that the Streetlight application is a consumer that only receives events from the broker. Using the mandatory channel field, you specify with $ref what channel the events come from.The onLightMeasured key property describes the function or method name that takes care of this functionality in the generated code. It is a unique ID of the operation across the whole document."
      },
      {
        "title": "Remember",
        "level": 5,
        "text": "You can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty."
      },
      {
        "title": "Summary",
        "level": 2,
        "text": "In this tutorial, you learned how to create an AsyncAPI specification document via a real-life example with an IoT use case.Your finished document is just a starting point; you must add your business logic. Take some time to play with it. There are still lots of things to be covered, but the intent of this tutorial is to make it simple for you to get an idea of the potential."
      },
      {
        "title": "Next steps",
        "level": 2,
        "text": "Now that you've completed this tutorial, you can proceed to learn how to validate your AsyncAPI document with AsyncAPI Studio."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'\n11servers:\n12  mosquitto:\n13    host: test.mosquitto.org\n14    protocol: mqtt\n15channels:\n16  lightMeasured:\n17    address: 'light/measured'\n18    messages:\n19      lightMeasuredMessage:\n20        name: LightMeasured\n21        payload:\n22          type: object\n23          properties:\n24            id:\n25              type: integer\n26              minimum: 0\n27              description: ID of the streetlight.\n28            lumens:\n29              type: integer\n30              minimum: 0\n31              description: Light intensity measured in lumens.\n32            sentAt:\n33              type: string\n34              format: date-time\n35              description: Date and time when the message was sent.\n36operations:\n37  onLightMeasured:\n38    action: 'receive'\n39    summary: Information about environmental lighting conditions for a particular streetlight.\n40    channel:\n41      $ref: '#/channels/lightMeasured'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">asyncapi:</span><span> </span><span style=\"color:#d8da68\">3.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#7edcda\">info:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Streetlights</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">App</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#7edcda\">version:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'1.0.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">|\n</span></span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>    The Smartylighting Streetlights application allows you\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>    to remotely manage the city lights.\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span style=\"color:#c0e2a3;font-weight:500\"></span><span>  </span><span style=\"color:#7edcda\">license:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Apache</span><span> </span><span style=\"color:#d8da68\">2.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>    </span><span style=\"color:#7edcda\">url:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'https://www.apache.org/licenses/LICENSE-2.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span></span><span style=\"color:#7edcda\">servers:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>  </span><span style=\"color:#7edcda\">mosquitto:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>    </span><span style=\"color:#7edcda\">host:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test.mosquitto.org</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>    </span><span style=\"color:#7edcda\">protocol:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">mqtt</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span></span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>  </span><span style=\"color:#7edcda\">lightMeasured:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'light/measured'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>      </span><span style=\"color:#7edcda\">lightMeasuredMessage:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>        </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">LightMeasured</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span>            </span><span style=\"color:#7edcda\">id:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">26</span><span>              </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">27</span><span>              </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">ID</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">streetlight.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">28</span><span>            </span><span style=\"color:#7edcda\">lumens:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">29</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">30</span><span>              </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">31</span><span>              </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Light</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">intensity</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">measured</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lumens.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">32</span><span>            </span><span style=\"color:#7edcda\">sentAt:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">33</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">34</span><span>              </span><span style=\"color:#7edcda\">format:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">date-time</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">35</span><span>              </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Date</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">and</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">time</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">was</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">36</span><span></span><span style=\"color:#7edcda\">operations:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">37</span><span>  </span><span style=\"color:#7edcda\">onLightMeasured:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">38</span><span>    </span><span style=\"color:#7edcda\">action:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'receive'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">39</span><span>    </span><span style=\"color:#7edcda\">summary:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Information</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">about</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">environmental</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lighting</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">conditions</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">particular</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">streetlight.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">40</span><span>    </span><span style=\"color:#7edcda\">channel:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">41</span><span>      </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/channels/lightMeasured'</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1asyncapi: 3.0.0\n2info:\n3  title: Streetlights App\n4  version: '1.0.0'\n5  description: |\n6    The Smartylighting Streetlights application allows you\n7    to remotely manage the city lights.\n8  license:\n9    name: Apache 2.0\n10    url: 'https://www.apache.org/licenses/LICENSE-2.0'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">asyncapi:</span><span> </span><span style=\"color:#d8da68\">3.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#7edcda\">info:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Streetlights</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">App</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#7edcda\">version:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'1.0.0'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">|\n</span></span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>    The Smartylighting Streetlights application allows you\n</span><span style=\"padding-right:2rem;color:#c0e2a3;font-weight:500\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>    to remotely manage the city lights.\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span style=\"color:#c0e2a3;font-weight:500\"></span><span>  </span><span style=\"color:#7edcda\">license:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Apache</span><span> </span><span style=\"color:#d8da68\">2.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>    </span><span style=\"color:#7edcda\">url:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'https://www.apache.org/licenses/LICENSE-2.0'</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1servers:\n2  mosquitto:\n3    host: test.mosquitto.org\n4    protocol: mqtt",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">servers:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">mosquitto:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">host:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test.mosquitto.org</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">protocol:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">mqtt</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1channels:\n2  lightMeasured:\n3    address: 'light/measured'\n4    messages:\n5      lightMeasuredMessage:\n6        name: LightMeasured\n7        payload:\n8          redacted for brevity",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">lightMeasured:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">address:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'light/measured'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">messages:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">lightMeasuredMessage:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#7edcda\">name:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">LightMeasured</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>          </span><span style=\"color:#c0e2a3;font-weight:500\">redacted</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">brevity</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1      payload:\n2        type: object\n3        properties:\n4          id:\n5            type: integer\n6            minimum: 0\n7            description: Id of the streetlight.\n8          lumens:\n9            type: integer\n10            minimum: 0\n11            description: Light intensity measured in lumens.\n12          sentAt:\n13            type: string\n14            format: date-time\n15            description: Date and time when the message was sent.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>      </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>        </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>          </span><span style=\"color:#7edcda\">id:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>            </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>            </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>            </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Id</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">streetlight.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>          </span><span style=\"color:#7edcda\">lumens:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>            </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">integer</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>            </span><span style=\"color:#7edcda\">minimum:</span><span> </span><span style=\"color:#d8da68\">0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>            </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Light</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">intensity</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">measured</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lumens.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>          </span><span style=\"color:#7edcda\">sentAt:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>            </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>            </span><span style=\"color:#7edcda\">format:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">date-time</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>            </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Date</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">and</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">time</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">was</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1operations:\n2  onLightMeasured:\n3    action: 'receive'\n4    summary: Information about environmental lighting conditions for a particular streetlight.\n5    channel:\n6      $ref: '#/channels/lightMeasured'",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">operations:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">onLightMeasured:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">action:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'receive'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">summary:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Information</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">about</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">environmental</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">lighting</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">conditions</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">for</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">particular</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">streetlight.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>    </span><span style=\"color:#7edcda\">channel:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>      </span><span style=\"color:#c0e2a3;font-weight:500\">$ref:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'#/channels/lightMeasured'</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "asyncapi.yaml",
        "context": "You can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty."
      },
      {
        "id": "highlight_1",
        "content": "asyncapi new --example=tutorial.yml --no-tty",
        "context": "You can create a new asyncapi.yaml document by running:\nasyncapi new --example=tutorial.yml --no-tty."
      },
      {
        "id": "highlight_2",
        "content": "asyncapi",
        "context": "Create the following specification document titled asyncapi with a .yaml extension."
      },
      {
        "id": "highlight_3",
        "content": ".yaml",
        "context": "Create the following specification document titled asyncapi with a .yaml extension."
      },
      {
        "id": "highlight_4",
        "content": "asyncapi",
        "context": "The asyncapi field indicates you use the AsyncAPI version 3.0.0."
      },
      {
        "id": "highlight_5",
        "content": "info",
        "context": "The info field holds information about the Streetlights application. Here, the title, version, description, and license were defined."
      },
      {
        "id": "highlight_6",
        "content": "servers",
        "context": "Moving on, let's talk about the servers section:"
      },
      {
        "id": "highlight_7",
        "content": "url",
        "context": "In this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost."
      },
      {
        "id": "highlight_8",
        "content": "protocol",
        "context": "In this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost."
      },
      {
        "id": "highlight_9",
        "content": "docker run -it -p 1883:1883 eclipse-mosquitto:1.5",
        "context": "In this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost."
      },
      {
        "id": "highlight_10",
        "content": "url",
        "context": "In this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost."
      },
      {
        "id": "highlight_11",
        "content": "mqtt://localhost",
        "context": "In this section, you point to the Eclipse Mosquitto message broker. The url points to a real broker instance hosted by the Mosquitto community, and the protocol is MQTT. If you do not want to use the test instance, you can spin up your own broker locally with docker run -it -p 1883:1883 eclipse-mosquitto:1.5. Remember to change the url to mqtt://localhost."
      },
      {
        "id": "highlight_12",
        "content": "channels",
        "context": "Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)"
      },
      {
        "id": "highlight_13",
        "content": "servers",
        "context": "Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)"
      },
      {
        "id": "highlight_14",
        "content": "channels",
        "context": "Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)"
      },
      {
        "id": "highlight_15",
        "content": "address",
        "context": "Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)"
      },
      {
        "id": "highlight_16",
        "content": "messages",
        "context": "Now, let's move on to the channels section. In the servers section, you specified how to connect to the broker where the application sends messages to or receives messages from. In channels, you go into more details about the connection address inside the broker. (Example: A topic name that specifies what messages are available in the channel.)"
      },
      {
        "id": "highlight_17",
        "content": "light/measured",
        "context": "In this example, light/measured is the channel address. From the Streetlight application example perspective, it means that light/measured is the topic's name in the MQTT broker."
      },
      {
        "id": "highlight_18",
        "content": "light/measured",
        "context": "In this example, light/measured is the channel address. From the Streetlight application example perspective, it means that light/measured is the topic's name in the MQTT broker."
      },
      {
        "id": "highlight_19",
        "content": "payload",
        "context": "The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time."
      },
      {
        "id": "highlight_20",
        "content": "id",
        "context": "The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time."
      },
      {
        "id": "highlight_21",
        "content": "lumens",
        "context": "The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time."
      },
      {
        "id": "highlight_22",
        "content": "sentAt",
        "context": "The payload property defines the event's content using AsyncAPI schemas. It means that your event payload should contain an id and a lumens property —which are integers bigger than zero—and a sentAt property which should be a string containing a date and time."
      },
      {
        "id": "highlight_23",
        "content": "operations",
        "context": "The last section is operations, where you describe what the application described in the AsyncAPI document is doing."
      },
      {
        "id": "highlight_24",
        "content": "channel",
        "context": "You can see that the Streetlight application is a consumer that only receives events from the broker. Using the mandatory channel field, you specify with $ref what channel the events come from."
      },
      {
        "id": "highlight_25",
        "content": "$ref",
        "context": "You can see that the Streetlight application is a consumer that only receives events from the broker. Using the mandatory channel field, you specify with $ref what channel the events come from."
      },
      {
        "id": "highlight_26",
        "content": "onLightMeasured",
        "context": "The onLightMeasured key property describes the function or method name that takes care of this functionality in the generated code. It is a unique ID of the operation across the whole document."
      }
    ]
  }
}