{
  "metadata": {
    "url": "https://www.asyncapi.com/docs/tools/generator/generator-template",
    "timestamp": "2025-03-12T17:53:05.264Z",
    "source": "asyncapi_docs"
  },
  "content": {
    "title": "Generator Template",
    "hierarchy": {
      "sections": {
        "Background context": {
          "level": 2,
          "content": "There is a list of community maintained templates, but what if you do not find what you need? In that case, you'll create a user-defined template that generates custom output from the generator.\nBefore you create the template, you'll need to have an AsyncAPI document that defines the properties you want to use in your template to test against. In this tutorial, you'll use the following template saved in the test/fixtures/asyncapi.yml file in your template project directory.1\n2asyncapi: 2.6.0\n3\n4info:\n5  title: Temperature Service\n6  version: 1.0.0\n7  description: This service is in charge of processing all the events related to temperature.\n8\n9servers:\n10  dev:\n11    url: test.mosquitto.org\n12    protocol: mqtt\n13\n14channels:\n15  temperature/changed:\n16    description: Updates the bedroom temperature in the database when the temperatures drops or goes up.\n17    publish:\n18      operationId: temperatureChange\n19      message:\n20        description: Message that is being sent when the temperature in the bedroom changes.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string\n27components:\n28  schemas:\n29    temperatureId:\n30      type: object\n31      additionalProperties: false\n32      properties:\n33        temperatureId:\n34          type: stringRemember\nTo generate code, use the AsyncAPI CLI. If you don't have the CLI installed, follow CLI installation guide.\nIf you are new to AsyncAPI Generator, check out the following docs: template development, which explains the minimum requirements for a template and possible features."
        },
        "Remember": {
          "level": 5,
          "content": "To generate code, use the AsyncAPI CLI. If you don't have the CLI installed, follow CLI installation guide.\nIf you are new to AsyncAPI Generator, check out the following docs: template development, which explains the minimum requirements for a template and possible features."
        },
        "Overview of steps": {
          "level": 2,
          "content": "Create a new directory for your template named python-mqtt-client-template.\nInstall the AsyncAPI CLI using the command npm install -g @asyncapi/cli.\nCreate a new folder test/fixtures with a file named asyncapi.yml in your fixtures directory. This file is used to define the structure of your template. You can copy the above example and paste it in your asyncapi.yml document.\nCreate a new file named package.json in your python-mqtt-client-template directory. This file is used to define the dependencies for your template.\nCreate a new folder python-mqtt-client-template/template. Create a new file named index.js in your template directory. This file is used to define the logic for your template.\nCreate a test.py file to validate the logic of your application. Don't worry about this file for now. The tutorial will tell you how to create it later.\nNow your directory should look like this:1python-mqtt-client-template \n2├── template\n3│   └── index.js\n4├── test\n5│   └── fixtures\n6│       └── asyncapi.yml\n7└── package.jsonLets break it down:package.json fileThe package.json file is used to define the dependencies for your template. Add the following code snippet to your package.json file:1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}Here's what is contained in the code snippet above:\nname -the name of your template.\nversion - the current version of your template.\ndescription - a description of what your template does.\ngenerator - specify generator specific configuration.\n\nrenderer - can either be react or nunjucks. In this case the generator will pass your template to the react render engine to generate the output.\napiVersion - specifies which major version of the Parser-API your template will use.\ngenerator - a string representing the generator version-range your template is compatible with.\nsupportedProtocols - A list that specifies which protocols are supported by your template.\n\n\ndependencies - specifies which version of @asyncapi/generator-react-sdk should be used.\nNavigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json.index.js fileThe index.js file is used to define the logic for your template. Inside the template folder, create an index.js file and add the code snippet below:1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}The code snippet above does the following:\nImport the generator-react-sdk dependency.\nThe asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions.\nThe asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:\n1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.The asyncapi.info().title() returns Temperature Service.Test using AsyncAPI CLITo see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.Navigating to the test/project directory. You should see a client.py file; the only content is Temperature Service.Let's break down the previous command:\nasyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI.\ntest/fixtures/asyncapi.yml points to your AsyncAPI document.\n./ specifies the location of your template.\n-o specifies where to output the result."
        },
        "package.json file": {
          "level": 3,
          "content": "The package.json file is used to define the dependencies for your template. Add the following code snippet to your package.json file:1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}Here's what is contained in the code snippet above:\nname -the name of your template.\nversion - the current version of your template.\ndescription - a description of what your template does.\ngenerator - specify generator specific configuration.\n\nrenderer - can either be react or nunjucks. In this case the generator will pass your template to the react render engine to generate the output.\napiVersion - specifies which major version of the Parser-API your template will use.\ngenerator - a string representing the generator version-range your template is compatible with.\nsupportedProtocols - A list that specifies which protocols are supported by your template.\n\n\ndependencies - specifies which version of @asyncapi/generator-react-sdk should be used.\nNavigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json."
        },
        "index.js file": {
          "level": 3,
          "content": "The index.js file is used to define the logic for your template. Inside the template folder, create an index.js file and add the code snippet below:1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}The code snippet above does the following:\nImport the generator-react-sdk dependency.\nThe asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions.\nThe asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:\n1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.The asyncapi.info().title() returns Temperature Service."
        },
        "Test using AsyncAPI CLI": {
          "level": 3,
          "content": "To see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.Navigating to the test/project directory. You should see a client.py file; the only content is Temperature Service.Let's break down the previous command:\nasyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI.\ntest/fixtures/asyncapi.yml points to your AsyncAPI document.\n./ specifies the location of your template.\n-o specifies where to output the result."
        },
        "Creating a template": {
          "level": 2,
          "content": "You will create an MQTT-supported template that will generate a Python client from the template and the AsyncAPI document above.In this section, you'll:\nWrite the MQTT client code.\nWrite code to test the client works.\nUpdate the template to use the client code.\nSetup a script to help you run this code.\nTemplate your code.\n1. Create the clientHere is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package.1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)Make sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library.Let's break down the previous code snippet:\nImports the MQTT module from the Paho package, which provides the MQTT client functionality.\nAssigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to.\nDefines an instance of the MQTT client object. This object will be used to establish a connection with the MQTT broker and perform MQTT operations.\nDefines that on client instance creation, it connects to the broker.\nThe sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic.\nIn summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called.2. Test the clientYou'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:Now your directory should look like this:1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16Navigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changedTo make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal.3. Update the template with client codeOpen index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}4. Write script to run the test codeIn package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }The 4 scripts added in package.json do the following:\ntest:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test.\ntest:generate: This script uses the AsyncAPI CLI to generate a new version of client.py.\ntest:start: This script runs the python code using client.py.\ntest: This script runs all the other scripts in proper order.\nRun npm test on your terminal to ensure everything works as expected.5. Template your code5a. Add parameters to the configuration fileYou often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected.5b. Templating index.js with ReactPython takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React.\n5c. Creating a reusable componentSuppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected.5d. Update AsyncAPI documentUpdate the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen"
        },
        "1. Create the client": {
          "level": 3,
          "content": "Here is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package.1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)Make sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library.Let's break down the previous code snippet:\nImports the MQTT module from the Paho package, which provides the MQTT client functionality.\nAssigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to.\nDefines an instance of the MQTT client object. This object will be used to establish a connection with the MQTT broker and perform MQTT operations.\nDefines that on client instance creation, it connects to the broker.\nThe sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic.\nIn summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called."
        },
        "2. Test the client": {
          "level": 3,
          "content": "You'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:Now your directory should look like this:1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16Navigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changedTo make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal."
        },
        "3. Update the template with client code": {
          "level": 3,
          "content": "Open index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}"
        },
        "4. Write script to run the test code": {
          "level": 3,
          "content": "In package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }The 4 scripts added in package.json do the following:\ntest:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test.\ntest:generate: This script uses the AsyncAPI CLI to generate a new version of client.py.\ntest:start: This script runs the python code using client.py.\ntest: This script runs all the other scripts in proper order.\nRun npm test on your terminal to ensure everything works as expected."
        },
        "5. Template your code": {
          "level": 3,
          "content": "5a. Add parameters to the configuration fileYou often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected.5b. Templating index.js with ReactPython takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React.\n5c. Creating a reusable componentSuppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected.5d. Update AsyncAPI documentUpdate the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen"
        },
        "5a. Add parameters to the configuration file": {
          "level": 4,
          "content": "You often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected."
        },
        "5b. Templating index.js with React": {
          "level": 4,
          "content": "Python takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React."
        },
        "5c. Creating a reusable component": {
          "level": 4,
          "content": "Suppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected."
        },
        "5d. Update AsyncAPI document": {
          "level": 4,
          "content": "Update the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risenWhere to go from here?Great job completing this tutorial! You have learnt how to use an AsyncAPI file to create a Python MQTT template and used it with the Paho-MQTT library in Python to connect to an MQTT broker and publish messages.😃If you want to tinker with a completed template and see what it would look like in production, check out the Paho-MQTT template. You can also check out the accompanying article about creating MQTT client code.You can also check out the MQTT beginners guide tutorial to learn more about asynchronous messaging using MQTT."
        },
        "Where to go from here?": {
          "level": 2,
          "content": "Great job completing this tutorial! You have learnt how to use an AsyncAPI file to create a Python MQTT template and used it with the Paho-MQTT library in Python to connect to an MQTT broker and publish messages.😃If you want to tinker with a completed template and see what it would look like in production, check out the Paho-MQTT template. You can also check out the accompanying article about creating MQTT client code.You can also check out the MQTT beginners guide tutorial to learn more about asynchronous messaging using MQTT."
        }
      },
      "navigation": [
        {
          "text": "Welcome",
          "href": "https://www.asyncapi.com/docs",
          "subItems": []
        },
        {
          "text": "Concepts",
          "href": "https://www.asyncapi.com/docs/concepts",
          "subItems": []
        },
        {
          "text": "Tutorials",
          "href": "https://www.asyncapi.com/docs/tutorials",
          "subItems": []
        },
        {
          "text": "Tools",
          "href": "https://www.asyncapi.com/docs/tools",
          "subItems": [
            {
              "text": "Overview",
              "href": "https://www.asyncapi.com/docs/tools"
            },
            {
              "text": "Generator",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Introduction",
              "href": "https://www.asyncapi.com/docs/tools/generator"
            },
            {
              "text": "Installation guide",
              "href": "https://www.asyncapi.com/docs/tools/generator/installation-guide"
            },
            {
              "text": "Usage",
              "href": "https://www.asyncapi.com/docs/tools/generator/usage"
            },
            {
              "text": "AsyncAPI document",
              "href": "https://www.asyncapi.com/docs/tools/generator/asyncapi-document"
            },
            {
              "text": "Template",
              "href": "https://www.asyncapi.com/docs/tools/generator/template"
            },
            {
              "text": "Parser",
              "href": "https://www.asyncapi.com/docs/tools/generator/parser"
            },
            {
              "text": "Generator version vs template version",
              "href": "https://www.asyncapi.com/docs/tools/generator/versioning"
            },
            {
              "text": "Library API",
              "href": "https://www.asyncapi.com/docs/tools/generator/api"
            },
            {
              "text": "Template development",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-development"
            },
            {
              "text": "Configuration file",
              "href": "https://www.asyncapi.com/docs/tools/generator/configuration-file"
            },
            {
              "text": "Template context",
              "href": "https://www.asyncapi.com/docs/tools/generator/template-context"
            },
            {
              "text": "React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/react-render-engine"
            },
            {
              "text": "Nunjucks render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/nunjucks-render-engine"
            },
            {
              "text": "Hooks",
              "href": "https://www.asyncapi.com/docs/tools/generator/hooks"
            },
            {
              "text": "File templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/file-templates"
            },
            {
              "text": "TypeScript support",
              "href": "https://www.asyncapi.com/docs/tools/generator/typescript-support"
            },
            {
              "text": "Special file names",
              "href": "https://www.asyncapi.com/docs/tools/generator/special-file-names"
            },
            {
              "text": "Creating a template",
              "href": "https://www.asyncapi.com/docs/tools/generator/generator-template"
            },
            {
              "text": "Using private templates",
              "href": "https://www.asyncapi.com/docs/tools/generator/using-private-template"
            },
            {
              "text": "Adding models generation in template",
              "href": "https://www.asyncapi.com/docs/tools/generator/model-generation"
            },
            {
              "text": "Migrating from Nunjucks to React render engine",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-nunjucks-react"
            },
            {
              "text": "Migrating from `ag` CLI to AsyncAPI CLI",
              "href": "https://www.asyncapi.com/docs/tools/generator/migration-cli"
            },
            {
              "text": "CLI",
              "href": "https://www.asyncapi.com/docs/tools/cli"
            },
            {
              "text": "Glee",
              "href": "https://www.asyncapi.com/docs/tools/glee"
            }
          ]
        },
        {
          "text": "Guides",
          "href": "https://www.asyncapi.com/docs/guides",
          "subItems": []
        },
        {
          "text": "Reference",
          "href": "https://www.asyncapi.com/docs/reference",
          "subItems": []
        },
        {
          "text": "Migrations",
          "href": "https://www.asyncapi.com/docs/migration",
          "subItems": []
        },
        {
          "text": "Community",
          "href": "https://www.asyncapi.com/docs/community",
          "subItems": []
        }
      ]
    },
    "full_text": "This tutorial teaches you how to create a simple generator template using a Python MQTT client. You'll use the AsyncAPI document and the template you develop to generate Python code. Additionally, you'll create template code with a reusable component to reuse the custom functionality you create and test your code using an MQTT client.\nSuppose you can only sleep when the AC in your bedroom is set to 22 °C, and you can't sleep when the temperature drops or rises above that. You can install a smart monitor in your bedroom that keeps track of the temperature and notifies you to adjust it to your optimum temperature when it fluctuates. You will create a template to alert you when the bedroom's temperature fluctuates from 22 °C.\nIn this tutorial:\n\nYou'll use the Eclipse Mosquito MQTT broker, which you'll connect to subscribe and publish messages using an MQTT client.\nYou'll use Python Paho-MQTT as the MQTT client in this project.\nYou'll create a React template that will use the MQTT broker to allow you to monitor your bedroom's temperature and notify you when the temperature drops or rises above 22 °C.\nLastly, create a reusable component for the output code's sendTemperatureDrop and sendTemperatureRise functions.\n\nBackground context\nThere is a list of community maintained templates, but what if you do not find what you need? In that case, you'll create a user-defined template that generates custom output from the generator.\nBefore you create the template, you'll need to have an AsyncAPI document that defines the properties you want to use in your template to test against. In this tutorial, you'll use the following template saved in the test/fixtures/asyncapi.yml file in your template project directory.\n1\n2asyncapi: 2.6.0\n3\n4info:\n5  title: Temperature Service\n6  version: 1.0.0\n7  description: This service is in charge of processing all the events related to temperature.\n8\n9servers:\n10  dev:\n11    url: test.mosquitto.org\n12    protocol: mqtt\n13\n14channels:\n15  temperature/changed:\n16    description: Updates the bedroom temperature in the database when the temperatures drops or goes up.\n17    publish:\n18      operationId: temperatureChange\n19      message:\n20        description: Message that is being sent when the temperature in the bedroom changes.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string\n27components:\n28  schemas:\n29    temperatureId:\n30      type: object\n31      additionalProperties: false\n32      properties:\n33        temperatureId:\n34          type: string\nRemember\nTo generate code, use the AsyncAPI CLI. If you don't have the CLI installed, follow CLI installation guide.\nIf you are new to AsyncAPI Generator, check out the following docs: template development, which explains the minimum requirements for a template and possible features.\n\nOverview of steps\n\nCreate a new directory for your template named python-mqtt-client-template.\nInstall the AsyncAPI CLI using the command npm install -g @asyncapi/cli.\nCreate a new folder test/fixtures with a file named asyncapi.yml in your fixtures directory. This file is used to define the structure of your template. You can copy the above example and paste it in your asyncapi.yml document.\nCreate a new file named package.json in your python-mqtt-client-template directory. This file is used to define the dependencies for your template.\nCreate a new folder python-mqtt-client-template/template. Create a new file named index.js in your template directory. This file is used to define the logic for your template.\nCreate a test.py file to validate the logic of your application. Don't worry about this file for now. The tutorial will tell you how to create it later.\n\nNow your directory should look like this:\n1python-mqtt-client-template \n2├── template\n3│   └── index.js\n4├── test\n5│   └── fixtures\n6│       └── asyncapi.yml\n7└── package.json\nLets break it down:\npackage.json file\nThe package.json file is used to define the dependencies for your template. Add the following code snippet to your package.json file:\n1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}\nHere's what is contained in the code snippet above:\n\nname -the name of your template.\nversion - the current version of your template.\ndescription - a description of what your template does.\ngenerator - specify generator specific configuration.\n\nrenderer - can either be react or nunjucks. In this case the generator will pass your template to the react render engine to generate the output.\napiVersion - specifies which major version of the Parser-API your template will use.\ngenerator - a string representing the generator version-range your template is compatible with.\nsupportedProtocols - A list that specifies which protocols are supported by your template.\n\n\ndependencies - specifies which version of @asyncapi/generator-react-sdk should be used.\n\nNavigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json.\nindex.js file\nThe index.js file is used to define the logic for your template. Inside the template folder, create an index.js file and add the code snippet below:\n1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}\nThe code snippet above does the following:\n\nImport the generator-react-sdk dependency.\nThe asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions.\nThe asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:\n\n1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.\nThe asyncapi.info().title() returns Temperature Service.\nTest using AsyncAPI CLI\nTo see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:\n1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.\nNavigating to the test/project directory. You should see a client.py file; the only content is Temperature Service.\nLet's break down the previous command:\n\nasyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI.\ntest/fixtures/asyncapi.yml points to your AsyncAPI document.\n./ specifies the location of your template.\n-o specifies where to output the result.\n\nCreating a template\nYou will create an MQTT-supported template that will generate a Python client from the template and the AsyncAPI document above.\nIn this section, you'll:\n\nWrite the MQTT client code.\nWrite code to test the client works.\nUpdate the template to use the client code.\nSetup a script to help you run this code.\nTemplate your code.\n\n1. Create the client\nHere is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package.\n1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)\nMake sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library.\nLet's break down the previous code snippet:\n\nImports the MQTT module from the Paho package, which provides the MQTT client functionality.\nAssigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to.\nDefines an instance of the MQTT client object. This object will be used to establish a connection with the MQTT broker and perform MQTT operations.\nDefines that on client instance creation, it connects to the broker.\nThe sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic.\n\nIn summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called.\n2. Test the client\nYou'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:\nNow your directory should look like this:\n1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py\n1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16\nNavigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:\n1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changed\nTo make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal.\n3. Update the template with client code\nOpen index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:\n1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}\n4. Write script to run the test code\nIn package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:\n1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }\nThe 4 scripts added in package.json do the following:\n\ntest:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test.\ntest:generate: This script uses the AsyncAPI CLI to generate a new version of client.py.\ntest:start: This script runs the python code using client.py.\ntest: This script runs all the other scripts in proper order.\n\nRun npm test on your terminal to ensure everything works as expected.\n5. Template your code\n5a. Add parameters to the configuration file\nYou often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:\n1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqtt\nThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.\nThe generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:\n1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\n\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:\nGenerator Error: This template requires the following missing params: server.\nUpdate your test:generate script in package.json to include the server param\n\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"\nYou can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.\nNow the template code looks like this:\n1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}\nRun npm test to validate that your code still works as expected.\n5b. Templating index.js with React\nPython takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:\n1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\n\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React.\n\n5c. Creating a reusable component\nSuppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:\n1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17\nYou'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:\n1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>\nIt's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:\n1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}\n{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.\nImport the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:\n1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25\nNow your directory should look like this:\n1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.py\nRun npm test on your terminal to ensure everything works as expected.\nIn the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected.\n5d. Update AsyncAPI document\nUpdate the AsyncAPI document to use two channels:\n1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string\nAnd update your test script in test.py to test the two functions as below:\n1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")\nRun npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:\n1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen\nWhere to go from here?\nGreat job completing this tutorial! You have learnt how to use an AsyncAPI file to create a Python MQTT template and used it with the Paho-MQTT library in Python to connect to an MQTT broker and publish messages.😃\nIf you want to tinker with a completed template and see what it would look like in production, check out the Paho-MQTT template. You can also check out the accompanying article about creating MQTT client code.\nYou can also check out the MQTT beginners guide tutorial to learn more about asynchronous messaging using MQTT.",
    "sections": [
      {
        "title": "Background context",
        "level": 2,
        "text": "There is a list of community maintained templates, but what if you do not find what you need? In that case, you'll create a user-defined template that generates custom output from the generator.\nBefore you create the template, you'll need to have an AsyncAPI document that defines the properties you want to use in your template to test against. In this tutorial, you'll use the following template saved in the test/fixtures/asyncapi.yml file in your template project directory.1\n2asyncapi: 2.6.0\n3\n4info:\n5  title: Temperature Service\n6  version: 1.0.0\n7  description: This service is in charge of processing all the events related to temperature.\n8\n9servers:\n10  dev:\n11    url: test.mosquitto.org\n12    protocol: mqtt\n13\n14channels:\n15  temperature/changed:\n16    description: Updates the bedroom temperature in the database when the temperatures drops or goes up.\n17    publish:\n18      operationId: temperatureChange\n19      message:\n20        description: Message that is being sent when the temperature in the bedroom changes.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string\n27components:\n28  schemas:\n29    temperatureId:\n30      type: object\n31      additionalProperties: false\n32      properties:\n33        temperatureId:\n34          type: stringRemember\nTo generate code, use the AsyncAPI CLI. If you don't have the CLI installed, follow CLI installation guide.\nIf you are new to AsyncAPI Generator, check out the following docs: template development, which explains the minimum requirements for a template and possible features."
      },
      {
        "title": "Remember",
        "level": 5,
        "text": "To generate code, use the AsyncAPI CLI. If you don't have the CLI installed, follow CLI installation guide.\nIf you are new to AsyncAPI Generator, check out the following docs: template development, which explains the minimum requirements for a template and possible features."
      },
      {
        "title": "Overview of steps",
        "level": 2,
        "text": "Create a new directory for your template named python-mqtt-client-template.\nInstall the AsyncAPI CLI using the command npm install -g @asyncapi/cli.\nCreate a new folder test/fixtures with a file named asyncapi.yml in your fixtures directory. This file is used to define the structure of your template. You can copy the above example and paste it in your asyncapi.yml document.\nCreate a new file named package.json in your python-mqtt-client-template directory. This file is used to define the dependencies for your template.\nCreate a new folder python-mqtt-client-template/template. Create a new file named index.js in your template directory. This file is used to define the logic for your template.\nCreate a test.py file to validate the logic of your application. Don't worry about this file for now. The tutorial will tell you how to create it later.\nNow your directory should look like this:1python-mqtt-client-template \n2├── template\n3│   └── index.js\n4├── test\n5│   └── fixtures\n6│       └── asyncapi.yml\n7└── package.jsonLets break it down:package.json fileThe package.json file is used to define the dependencies for your template. Add the following code snippet to your package.json file:1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}Here's what is contained in the code snippet above:\nname -the name of your template.\nversion - the current version of your template.\ndescription - a description of what your template does.\ngenerator - specify generator specific configuration.\n\nrenderer - can either be react or nunjucks. In this case the generator will pass your template to the react render engine to generate the output.\napiVersion - specifies which major version of the Parser-API your template will use.\ngenerator - a string representing the generator version-range your template is compatible with.\nsupportedProtocols - A list that specifies which protocols are supported by your template.\n\n\ndependencies - specifies which version of @asyncapi/generator-react-sdk should be used.\nNavigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json.index.js fileThe index.js file is used to define the logic for your template. Inside the template folder, create an index.js file and add the code snippet below:1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}The code snippet above does the following:\nImport the generator-react-sdk dependency.\nThe asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions.\nThe asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:\n1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.The asyncapi.info().title() returns Temperature Service.Test using AsyncAPI CLITo see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.Navigating to the test/project directory. You should see a client.py file; the only content is Temperature Service.Let's break down the previous command:\nasyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI.\ntest/fixtures/asyncapi.yml points to your AsyncAPI document.\n./ specifies the location of your template.\n-o specifies where to output the result."
      },
      {
        "title": "package.json file",
        "level": 3,
        "text": "The package.json file is used to define the dependencies for your template. Add the following code snippet to your package.json file:1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}Here's what is contained in the code snippet above:\nname -the name of your template.\nversion - the current version of your template.\ndescription - a description of what your template does.\ngenerator - specify generator specific configuration.\n\nrenderer - can either be react or nunjucks. In this case the generator will pass your template to the react render engine to generate the output.\napiVersion - specifies which major version of the Parser-API your template will use.\ngenerator - a string representing the generator version-range your template is compatible with.\nsupportedProtocols - A list that specifies which protocols are supported by your template.\n\n\ndependencies - specifies which version of @asyncapi/generator-react-sdk should be used.\nNavigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json."
      },
      {
        "title": "index.js file",
        "level": 3,
        "text": "The index.js file is used to define the logic for your template. Inside the template folder, create an index.js file and add the code snippet below:1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}The code snippet above does the following:\nImport the generator-react-sdk dependency.\nThe asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions.\nThe asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:\n1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.The asyncapi.info().title() returns Temperature Service."
      },
      {
        "title": "Test using AsyncAPI CLI",
        "level": 3,
        "text": "To see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.Navigating to the test/project directory. You should see a client.py file; the only content is Temperature Service.Let's break down the previous command:\nasyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI.\ntest/fixtures/asyncapi.yml points to your AsyncAPI document.\n./ specifies the location of your template.\n-o specifies where to output the result."
      },
      {
        "title": "Creating a template",
        "level": 2,
        "text": "You will create an MQTT-supported template that will generate a Python client from the template and the AsyncAPI document above.In this section, you'll:\nWrite the MQTT client code.\nWrite code to test the client works.\nUpdate the template to use the client code.\nSetup a script to help you run this code.\nTemplate your code.\n1. Create the clientHere is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package.1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)Make sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library.Let's break down the previous code snippet:\nImports the MQTT module from the Paho package, which provides the MQTT client functionality.\nAssigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to.\nDefines an instance of the MQTT client object. This object will be used to establish a connection with the MQTT broker and perform MQTT operations.\nDefines that on client instance creation, it connects to the broker.\nThe sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic.\nIn summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called.2. Test the clientYou'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:Now your directory should look like this:1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16Navigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changedTo make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal.3. Update the template with client codeOpen index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}4. Write script to run the test codeIn package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }The 4 scripts added in package.json do the following:\ntest:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test.\ntest:generate: This script uses the AsyncAPI CLI to generate a new version of client.py.\ntest:start: This script runs the python code using client.py.\ntest: This script runs all the other scripts in proper order.\nRun npm test on your terminal to ensure everything works as expected.5. Template your code5a. Add parameters to the configuration fileYou often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected.5b. Templating index.js with ReactPython takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React.\n5c. Creating a reusable componentSuppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected.5d. Update AsyncAPI documentUpdate the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen"
      },
      {
        "title": "1. Create the client",
        "level": 3,
        "text": "Here is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package.1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)Make sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library.Let's break down the previous code snippet:\nImports the MQTT module from the Paho package, which provides the MQTT client functionality.\nAssigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to.\nDefines an instance of the MQTT client object. This object will be used to establish a connection with the MQTT broker and perform MQTT operations.\nDefines that on client instance creation, it connects to the broker.\nThe sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic.\nIn summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called."
      },
      {
        "title": "2. Test the client",
        "level": 3,
        "text": "You'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:Now your directory should look like this:1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16Navigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changedTo make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal."
      },
      {
        "title": "3. Update the template with client code",
        "level": 3,
        "text": "Open index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}"
      },
      {
        "title": "4. Write script to run the test code",
        "level": 3,
        "text": "In package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }The 4 scripts added in package.json do the following:\ntest:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test.\ntest:generate: This script uses the AsyncAPI CLI to generate a new version of client.py.\ntest:start: This script runs the python code using client.py.\ntest: This script runs all the other scripts in proper order.\nRun npm test on your terminal to ensure everything works as expected."
      },
      {
        "title": "5. Template your code",
        "level": 3,
        "text": "5a. Add parameters to the configuration fileYou often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected.5b. Templating index.js with ReactPython takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React.\n5c. Creating a reusable componentSuppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected.5d. Update AsyncAPI documentUpdate the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen"
      },
      {
        "title": "5a. Add parameters to the configuration file",
        "level": 4,
        "text": "You often have different runtime environments in programming, e.g., development and production. You will use different servers to spin both of these instances. You'll have two broker versions, one for production and the other for development. You have defined a dev server in the AsyncAPI document:1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqttThis will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment.The generator has a parameters object used to define parameters you use to dynamically modify your template code at runtime. It also supports the server parameter that defines the server configuration value. Navigate to package.json and add the snippet below:1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:Generator Error: This template requires the following missing params: server.Update your test:generate script in package.json to include the server param\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js.Now the template code looks like this:1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}Run npm test to validate that your code still works as expected."
      },
      {
        "title": "5b. Templating index.js with React",
        "level": 4,
        "text": "Python takes indentation very seriously, and our generated output will be Python code. We, therefore, need to make sure the indentation in index.js looks right so the generated code is indented correctly. After templating the code in index.js, it will look like the following code snippet:1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}\nImport the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'.\nWhen the Paho module import is rendered in client.py file, it will add two extra new lines.\nThe broker url is templated in a Text component removing the $ from the string template.\nDynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix.\nThere is no templating needed in the __init__ function, there is only hardcoded information.\n\nIf you're on the fence about which templating engine you should use in your template, check out the React render engine and nunjucks render engine documentation.\nIn the next section, you'll refactor your template to use React."
      },
      {
        "title": "5c. Creating a reusable component",
        "level": 4,
        "text": "Suppose you have two channels, one to watch if the temperature drop below 22 °C and one to check if the temperature is above 22 °C, the generated output code would look like this:1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic.Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25Now your directory should look like this:1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.pyRun npm test on your terminal to ensure everything works as expected.In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected."
      },
      {
        "title": "5d. Update AsyncAPI document",
        "level": 4,
        "text": "Update the AsyncAPI document to use two channels:1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: stringAnd update your test script in test.py to test the two functions as below:1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risenWhere to go from here?Great job completing this tutorial! You have learnt how to use an AsyncAPI file to create a Python MQTT template and used it with the Paho-MQTT library in Python to connect to an MQTT broker and publish messages.😃If you want to tinker with a completed template and see what it would look like in production, check out the Paho-MQTT template. You can also check out the accompanying article about creating MQTT client code.You can also check out the MQTT beginners guide tutorial to learn more about asynchronous messaging using MQTT."
      },
      {
        "title": "Where to go from here?",
        "level": 2,
        "text": "Great job completing this tutorial! You have learnt how to use an AsyncAPI file to create a Python MQTT template and used it with the Paho-MQTT library in Python to connect to an MQTT broker and publish messages.😃If you want to tinker with a completed template and see what it would look like in production, check out the Paho-MQTT template. You can also check out the accompanying article about creating MQTT client code.You can also check out the MQTT beginners guide tutorial to learn more about asynchronous messaging using MQTT."
      }
    ],
    "svgs": [
      {
        "id": "svg_0",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_1",
        "content": "<svg class=\"-mt-0.5 mr-2 inline-block h-8\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\" fill=\"currentColor\" clip-rule=\"evenodd\" viewBox=\"0 0 22 25\"><path d=\"M13 24h-2c-.288 0-.563-.125-.753-.341l-.576-.659h4.658l-.576.659c-.19.216-.465.341-.753.341zm1.867-3c.287 0 .52.224.52.5s-.233.5-.52.5h-5.734c-.287 0-.52-.224-.52-.5s.233-.5.52-.5h5.734zm-2.871-17c2.983 0 6.004 1.97 6.004 5.734 0 1.937-.97 3.622-1.907 5.252-.907 1.574-1.843 3.201-1.844 5.014h1.001c0-3.286 3.75-6.103 3.75-10.266 0-4.34-3.502-6.734-7.004-6.734-3.498 0-6.996 2.391-6.996 6.734 0 4.163 3.75 6.98 3.75 10.266h.999c.001-1.813-.936-3.44-1.841-5.014-.938-1.63-1.908-3.315-1.908-5.252 0-3.764 3.017-5.734 5.996-5.734zm9.428 7.958c.251.114.362.411.248.662-.114.251-.41.363-.662.249l-.91-.414c-.252-.114-.363-.41-.249-.662.114-.251.411-.362.662-.248l.911.413zm-18.848 0c-.251.114-.362.411-.248.662.114.251.41.363.662.249l.91-.414c.252-.114.363-.41.249-.662-.114-.251-.411-.362-.662-.248l-.911.413zm18.924-2.958h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1c.276 0 .5.224.5.5s-.224.5-.5.5zm-18-1c.276 0 .5.224.5.5s-.224.5-.5.5h-1c-.276 0-.5-.224-.5-.5s.224-.5.5-.5h1zm16.818-3.089c.227-.158.284-.469.126-.696-.157-.227-.469-.283-.696-.126l-.821.57c-.227.158-.283.469-.126.696.157.227.469.283.696.126l.821-.57zm-16.636 0c-.227-.158-.284-.469-.126-.696.157-.227.469-.283.696-.126l.821.57c.227.158.283.469.126.696-.157.227-.469.283-.696.126l-.821-.57zm13.333-3.033c.134-.241.048-.546-.193-.68-.241-.135-.546-.048-.68.192l-.488.873c-.135.241-.048.546.192.681.241.134.546.048.681-.193l.488-.873zm-10.03 0c-.134-.241-.048-.546.193-.68.241-.135.546-.048.68.192l.488.873c.135.241.048.546-.192.681-.241.134-.546.048-.681-.193l-.488-.873zm5.515-1.378c0-.276-.224-.5-.5-.5s-.5.224-.5.5v1c0 .276.224.5.5.5s.5-.224.5-.5v-1z\"></path></svg>",
        "context": "Remember",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_2",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_3",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_4",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_5",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_6",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_7",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_8",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_9",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_10",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_11",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_12",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_13",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_14",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_15",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_16",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_17",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_18",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_19",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_20",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_21",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_22",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_23",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_24",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_25",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      },
      {
        "id": "svg_26",
        "content": "<svg class=\"-mt-0.5 inline-block size-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\"><path d=\"M15.6 2l-1.2 3H5.6L4.4 2C3.629 2 3 2.629 3 3.4v15.2c0 .77.629 1.4 1.399 1.4h11.2c.77 0 1.4-.631 1.4-1.4V3.4C17 2.629 16.369 2 15.6 2zm-2 2l.9-2h-2.181L11.6 0H8.4l-.72 2H5.5l.899 2H13.6z\"></path></svg>",
        "context": "",
        "description": "SVG containing 1 paths, 0 circles, and 0 rectangles."
      }
    ],
    "codeBlocks": [
      {
        "id": "code_0",
        "content": "1\n2asyncapi: 2.6.0\n3\n4info:\n5  title: Temperature Service\n6  version: 1.0.0\n7  description: This service is in charge of processing all the events related to temperature.\n8\n9servers:\n10  dev:\n11    url: test.mosquitto.org\n12    protocol: mqtt\n13\n14channels:\n15  temperature/changed:\n16    description: Updates the bedroom temperature in the database when the temperatures drops or goes up.\n17    publish:\n18      operationId: temperatureChange\n19      message:\n20        description: Message that is being sent when the temperature in the bedroom changes.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string\n27components:\n28  schemas:\n29    temperatureId:\n30      type: object\n31      additionalProperties: false\n32      properties:\n33        temperatureId:\n34          type: string",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#7edcda\">asyncapi:</span><span> </span><span style=\"color:#d8da68\">2.6</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#7edcda\">info:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  </span><span style=\"color:#7edcda\">title:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Service</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>  </span><span style=\"color:#7edcda\">version:</span><span> </span><span style=\"color:#d8da68\">1.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>  </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">This</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">service</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">charge</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">of</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">processing</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">all</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">events</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">related</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">to</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span></span><span style=\"color:#7edcda\">servers:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>  </span><span style=\"color:#7edcda\">dev:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>    </span><span style=\"color:#7edcda\">url:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test.mosquitto.org</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>    </span><span style=\"color:#7edcda\">protocol:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">mqtt</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span></span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>  </span><span style=\"color:#7edcda\">temperature/changed:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Updates</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">bedroom</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">database</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperatures</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">drops</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">or</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">goes</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">up.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>    </span><span style=\"color:#7edcda\">publish:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>      </span><span style=\"color:#7edcda\">operationId:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperatureChange</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>      </span><span style=\"color:#7edcda\">message:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>        </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">being</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">in</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">bedroom</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">changes.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span><span>          </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span><span>            </span><span style=\"color:#7edcda\">temperatureId:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">26</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">27</span><span></span><span style=\"color:#7edcda\">components:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">28</span><span>  </span><span style=\"color:#7edcda\">schemas:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">29</span><span>    </span><span style=\"color:#7edcda\">temperatureId:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">30</span><span>      </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">31</span><span>      </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">32</span><span>      </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">33</span><span>        </span><span style=\"color:#7edcda\">temperatureId:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">34</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_1",
        "content": "1python-mqtt-client-template \n2├── template\n3│   └── index.js\n4├── test\n5│   └── fixtures\n6│       └── asyncapi.yml\n7└── package.json",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#c0e2a3;font-weight:500\">python-mqtt-client-template</span><span> \n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">template</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">index.js</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">fixtures</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>       </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">asyncapi.yml</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">package.json</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_2",
        "content": "1{\n2  \"name\": \"python-mqtt-client-template\",\n3  \"version\": \"0.0.1\",\n4  \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5  \"generator\": {\n6    \"renderer\": \"react\",\n7    \"apiVersion\": \"v1\",\n8    \"generator\": \">=1.10.0 <2.0.0\",\n9    \"supportedProtocols\": [\"mqtt\"]\n10  },\n11  \"dependencies\": {\n12    \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n13  },\n14  \"devDependencies\": {\n15    \"rimraf\": \"^5.0.0\"\n16  }\n17}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">\"name\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"python-mqtt-client-template\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  </span><span style=\"color:#7edcda\">\"version\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"0.0.1\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#7edcda\">\"description\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"A template that generates a Python MQTT client using MQTT.\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  </span><span style=\"color:#7edcda\">\"generator\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>    </span><span style=\"color:#7edcda\">\"renderer\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"react\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    </span><span style=\"color:#7edcda\">\"apiVersion\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"v1\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>    </span><span style=\"color:#7edcda\">\"generator\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"&gt;=1.10.0 &lt;2.0.0\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#7edcda\">\"supportedProtocols\"</span><span>: [</span><span style=\"color:#c0e2a3;font-weight:500\">\"mqtt\"</span><span>]\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>  },\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>  </span><span style=\"color:#7edcda\">\"dependencies\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>    </span><span style=\"color:#7edcda\">\"@asyncapi/generator-react-sdk\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"^0.2.25\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>  },\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>  </span><span style=\"color:#7edcda\">\"devDependencies\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>    </span><span style=\"color:#7edcda\">\"rimraf\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"^5.0.0\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>  }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_3",
        "content": "1//1\n2import { File } from '@asyncapi/generator-react-sdk'\n3//2\n4export default function ({ asyncapi }) {\n5//3\n6  return <File name=\"client.py\">{asyncapi.info().title()}</File>\n7}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#797f8c\">//1</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">import</span><span> { File } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/generator-react-sdk'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#797f8c\">//2</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#64a0dc\">export</span><span> </span><span style=\"color:#64a0dc\">default</span><span> </span><span style=\"color:#64a0dc\">function</span><span style=\"color:#74e287\"> (</span><span style=\"color:#d6deeb\">{ asyncapi }</span><span style=\"color:#74e287\">) </span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#797f8c\">//3</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">name</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">\"client.py\"</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">{asyncapi.info().title()}</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_4",
        "content": "1info:\n2  title: Temperature Service\n3  version: 1.0.0\n4  description: This service is in charge of processing all the events related to temperature.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>info:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>  title: Temperature Service\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>  version: </span><span style=\"color:#d8da68\">1.0</span><span style=\"color:#d8da68\">.0</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span>  description: This service is in charge of processing all the events related to temperature.</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_5",
        "content": "1Generation in progress. Keep calm and wait a bit... done\n2Check out your shiny new generated files at test/project.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>Generation in progress. Keep calm and wait a bit... done\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">Check</span><span> </span><span style=\"color:#64a0dc\">out</span><span> your shiny </span><span style=\"color:#64a0dc\">new</span><span> </span><span style=\"color:#64a0dc\">generated</span><span> files </span><span style=\"color:#64a0dc\">at</span><span> </span><span style=\"color:#64a0dc\">test</span><span>/project.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_6",
        "content": "1# 1\n2import paho.mqtt.client as mqtt\n3# 2\n4mqttBroker = \"test.mosquitto.org\"\n5\n6class TemperatureServiceClient:\n7    def __init__(self):\n8      # 3 \n9        self.client = mqtt.Client()\n10      # 4\n11        self.client.connect(mqttBroker)\n12\n13\n14    def sendTemperatureChange(self, id):\n15      # 5\n16        topic = \"temperature/changed\"\n17      # 6 \n18        self.client.publish(topic, id)",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#797f8c\"># 1</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">import</span><span> paho.mqtt.client </span><span style=\"color:#64a0dc\">as</span><span> mqtt\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#797f8c\"># 2</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>mqttBroker = </span><span style=\"color:#c0e2a3;font-weight:500\">\"test.mosquitto.org\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span></span><span style=\"color:#64a0dc\">class</span><span style=\"color:#7edcda\"> </span><span style=\"color:#7edcda\">TemperatureServiceClient</span><span style=\"color:#7edcda\">:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    </span><span style=\"color:#64a0dc\">def</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">__init__</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">self</span><span style=\"color:#74e287\">):</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>      </span><span style=\"color:#797f8c\"># 3 </span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>        self.client = mqtt.Client()\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>      </span><span style=\"color:#797f8c\"># 4</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span>        self.client.connect(mqttBroker)\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>    </span><span style=\"color:#64a0dc\">def</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">sendTemperatureChange</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">self, </span><span style=\"color:#7edcda\">id</span><span style=\"color:#74e287\">):</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>      </span><span style=\"color:#797f8c\"># 5</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>        topic = </span><span style=\"color:#c0e2a3;font-weight:500\">\"temperature/changed\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>      </span><span style=\"color:#797f8c\"># 6 </span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>        self.client.publish(topic, </span><span style=\"color:#7edcda\">id</span><span>)</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_7",
        "content": "1python-mqtt-client-template\n2├── template\n3│   └── index.js\n4└── test\n5    ├── fixtures\n6    │   └── asyncapi.yml\n7    └── project\n8        ├── client.py\n9        └── test.py",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#c0e2a3;font-weight:500\">python-mqtt-client-template</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">template</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">index.js</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">fixtures</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">asyncapi.yml</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">project</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">client.py</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test.py</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_8",
        "content": "1from client import TemperatureServiceClient\n2from random import randrange\n3import time\n4\n5client = TemperatureServiceClient()\n6\n7id_length = 8\n8min_value = 10**(id_length-1)  # Minimum value with 8 digits (e.g., 10000000)\n9max_value = 10**id_length - 1  # Maximum value with 8 digits (e.g., 99999999)\n10\n11while True:\n12    randomId = randrange(min_value, max_value + 1)\n13    client.sendTemperatureChange(randomId)\n14    print(\"New temperature detected \" + str(randomId) + \" sent to temperature/changed\")\n15    time.sleep(1)\n16",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">from</span><span> client </span><span style=\"color:#64a0dc\">import</span><span> TemperatureServiceClient\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">from</span><span> random </span><span style=\"color:#64a0dc\">import</span><span> randrange\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">import</span><span> time\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span>client = TemperatureServiceClient()\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>id_length = </span><span style=\"color:#d8da68\">8</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>min_value = </span><span style=\"color:#d8da68\">10</span><span>**(id_length-</span><span style=\"color:#d8da68\">1</span><span>)  </span><span style=\"color:#797f8c\"># Minimum value with 8 digits (e.g., 10000000)</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>max_value = </span><span style=\"color:#d8da68\">10</span><span>**id_length - </span><span style=\"color:#d8da68\">1</span><span>  </span><span style=\"color:#797f8c\"># Maximum value with 8 digits (e.g., 99999999)</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span></span><span style=\"color:#64a0dc\">while</span><span> </span><span style=\"color:#64a0dc\">True</span><span>:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>    randomId = randrange(min_value, max_value + </span><span style=\"color:#d8da68\">1</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>    client.sendTemperatureChange(randomId)\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>    </span><span style=\"color:#7edcda\">print</span><span>(</span><span style=\"color:#c0e2a3;font-weight:500\">\"New temperature detected \"</span><span> + </span><span style=\"color:#7edcda\">str</span><span>(randomId) + </span><span style=\"color:#c0e2a3;font-weight:500\">\" sent to temperature/changed\"</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>    time.sleep(</span><span style=\"color:#d8da68\">1</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_9",
        "content": "1New temperature detected 64250266 sent to temperature/changed\n2New temperature detected 36947728 sent to temperature/changed\n3New temperature detected 72955029 sent to temperature/changed",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">New</span><span> temperature detected </span><span style=\"color:#d8da68\">64250266</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/changed\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">New</span><span> temperature detected </span><span style=\"color:#d8da68\">36947728</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/changed\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">New</span><span> temperature detected </span><span style=\"color:#d8da68\">72955029</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/changed</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_10",
        "content": "1import { File } from '@asyncapi/generator-react-sdk';\n2\n3export default function ({ asyncapi }) {\n4  return (\n5    <File name=\"client.py\">\n6      {`import paho.mqtt.client as mqtt\n7\n8mqttBroker = \"test.mosquitto.org\"\n9\n10class TemperatureServiceClient:\n11    def __init__(self):\n12        self.client = mqtt.Client()\n13        self.client.connect(mqttBroker)\n14\n15\n16    def sendTemperatureChange(self, id):\n17        topic = \"temperature/changed\"\n18        self.client.publish(topic, id)`}\n19    </File>\n20  )\n21}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">import</span><span> { File } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/generator-react-sdk'</span><span>;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>export </span><span style=\"color:#64a0dc\">default</span><span> function ({ asyncapi }) {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> (\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>    &lt;File name=</span><span style=\"color:#c0e2a3;font-weight:500\">\"client.py\"</span><span>&gt;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>      {`</span><span style=\"color:#64a0dc\">import</span><span> paho.mqtt.client as mqtt\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>mqttBroker = </span><span style=\"color:#c0e2a3;font-weight:500\">\"test.mosquitto.org\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span></span><span style=\"color:#64a0dc\">class</span><span> </span><span style=\"color:#64a0dc\">TemperatureServiceClient:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span style=\"color:#64a0dc\">    </span><span style=\"color:#64a0dc\">def</span><span> </span><span style=\"color:#64a0dc\">__init__</span><span>(</span><span style=\"color:#64a0dc\">self</span><span>):\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span> = </span><span style=\"color:#64a0dc\">mqtt</span><span>.</span><span style=\"color:#64a0dc\">Client</span><span>()\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span>.</span><span style=\"color:#64a0dc\">connect</span><span>(</span><span style=\"color:#64a0dc\">mqttBroker</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>    </span><span style=\"color:#64a0dc\">def</span><span> </span><span style=\"color:#64a0dc\">sendTemperatureChange</span><span>(</span><span style=\"color:#64a0dc\">self, </span><span style=\"color:#64a0dc\">id</span><span>):\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>        </span><span style=\"color:#64a0dc\">topic</span><span> = \"</span><span style=\"color:#64a0dc\">temperature</span><span>/</span><span style=\"color:#64a0dc\">changed</span><span>\"\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span>.</span><span style=\"color:#64a0dc\">publish</span><span>(</span><span style=\"color:#64a0dc\">topic, </span><span style=\"color:#64a0dc\">id</span><span>)`}\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>    &lt;/</span><span style=\"color:#64a0dc\">File</span><span>&gt;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span>  )\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_11",
        "content": "1    {\n2      \"name\": \"python-mqtt-client-template\",\n3      \"version\": \"0.0.1\",\n4      \"description\": \"A template that generates a Python MQTT client using MQTT.\",\n5      \"scripts\": {\n6        \"test:clean\": \"rimraf test/project/client.py\",\n7        \"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\",\n8        \"test:start\": \"python test/project/test.py\",\n9        \"test\": \"npm run test:clean && npm run test:generate && npm run test:start\"\n10      },\n11      \"generator\": {\n12        \"renderer\": \"react\",\n13        \"apiVersion\": \"v1\",\n14        \"generator\": \">=1.10.0 <2.0.0\",\n15        \"supportedProtocols\": [\"mqtt\"]\n16      },\n17      \"dependencies\": {\n18        \"@asyncapi/generator-react-sdk\": \"^0.2.25\"\n19      },\n20      \"devDependencies\": {\n21        \"rimraf\": \"^5.0.0\"\n22      }\n23    }",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>    {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>      </span><span style=\"color:#7edcda\">\"name\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"python-mqtt-client-template\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>      </span><span style=\"color:#7edcda\">\"version\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"0.0.1\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>      </span><span style=\"color:#7edcda\">\"description\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"A template that generates a Python MQTT client using MQTT.\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">\"scripts\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>        </span><span style=\"color:#7edcda\">\"test:clean\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"rimraf test/project/client.py\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#7edcda\">\"test:generate\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>        </span><span style=\"color:#7edcda\">\"test:start\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"python test/project/test.py\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>        </span><span style=\"color:#7edcda\">\"test\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"npm run test:clean &amp;&amp; npm run test:generate &amp;&amp; npm run test:start\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>      },\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>      </span><span style=\"color:#7edcda\">\"generator\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>        </span><span style=\"color:#7edcda\">\"renderer\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"react\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>        </span><span style=\"color:#7edcda\">\"apiVersion\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"v1\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>        </span><span style=\"color:#7edcda\">\"generator\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"&gt;=1.10.0 &lt;2.0.0\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>        </span><span style=\"color:#7edcda\">\"supportedProtocols\"</span><span>: [</span><span style=\"color:#c0e2a3;font-weight:500\">\"mqtt\"</span><span>]\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>      },\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>      </span><span style=\"color:#7edcda\">\"dependencies\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>        </span><span style=\"color:#7edcda\">\"@asyncapi/generator-react-sdk\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"^0.2.25\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span>      },\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>      </span><span style=\"color:#7edcda\">\"devDependencies\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>        </span><span style=\"color:#7edcda\">\"rimraf\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"^5.0.0\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span>      }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span>    }</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_12",
        "content": "1servers:\n2  dev:\n3    url: test.mosquitto.org\n4    protocol: mqtt",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">servers:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">  dev:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">    url:</span><span> test.mosquitto.org\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#64a0dc\">    protocol:</span><span> mqtt</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_13",
        "content": "1    \"generator\": {\n2        # ...(redacted for brevity)\n3        \"parameters\": {\n4            \"server\": {\n5              \"description\": \"The server you want to use in the code.\",\n6              \"required\": true\n7            }\n8        }\n9    }",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">\"generator\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>        # ...(redacted for brevity)\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>        </span><span style=\"color:#7edcda\">\"parameters\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>            </span><span style=\"color:#7edcda\">\"server\"</span><span>: {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>              </span><span style=\"color:#7edcda\">\"description\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"The server you want to use in the code.\"</span><span>,\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>              </span><span style=\"color:#7edcda\">\"required\"</span><span>: </span><span style=\"color:#64a0dc\">true</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span>            }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>        }\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>    }</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_14",
        "content": "Generator Error: This template requires the following missing params: server.",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span>Generator Error: This </span><span style=\"color:#64a0dc\">template</span><span> requires the </span><span style=\"color:#64a0dc\">following</span><span> missing params: </span><span style=\"color:#64a0dc\">server</span><span>.</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_15",
        "content": "\"test:generate\": \"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span style=\"color:#c0e2a3;font-weight:500\">\"test:generate\"</span><span>: </span><span style=\"color:#c0e2a3;font-weight:500\">\"asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ --output test/project --force-write --param server=dev\"</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_16",
        "content": "1import { File } from '@asyncapi/generator-react-sdk';\n2\n3// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters\n4export default function ({ asyncapi, params }) {\n5 \n6  return (\n7    <File name=\"client.py\">\n8      {`import paho.mqtt.client as mqtt\n9\n10mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"\n11\n12class TemperatureServiceClient:\n13    def __init__(self):\n14        self.client = mqtt.Client()\n15        self.client.connect(mqttBroker)\n16\n17\n18    def sendTemperatureChange(self, id):\n19        topic = \"temperature/changed\"\n20        self.client.publish(topic, id)`}\n21    </File>\n22  )\n23}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">import</span><span> { File } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/generator-react-sdk'</span><span>;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#797f8c\">// notice that now the template not only gets the instance of parsed AsyncAPI document but also the parameters</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>export </span><span style=\"color:#64a0dc\">default</span><span> function ({ asyncapi, params }) {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span> \n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> (\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    &lt;File name=</span><span style=\"color:#c0e2a3;font-weight:500\">\"client.py\"</span><span>&gt;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>      {`</span><span style=\"color:#64a0dc\">import</span><span> paho.mqtt.client as mqtt\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>mqttBroker = </span><span style=\"color:#c0e2a3;font-weight:500\">\"${asyncapi.servers().get(params.server).url()}\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span></span><span style=\"color:#64a0dc\">class</span><span> </span><span style=\"color:#64a0dc\">TemperatureServiceClient:\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span style=\"color:#64a0dc\">    </span><span style=\"color:#64a0dc\">def</span><span> </span><span style=\"color:#64a0dc\">__init__</span><span>(</span><span style=\"color:#64a0dc\">self</span><span>):\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span> = </span><span style=\"color:#64a0dc\">mqtt</span><span>.</span><span style=\"color:#64a0dc\">Client</span><span>()\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span>.</span><span style=\"color:#64a0dc\">connect</span><span>(</span><span style=\"color:#64a0dc\">mqttBroker</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>    </span><span style=\"color:#64a0dc\">def</span><span> </span><span style=\"color:#64a0dc\">sendTemperatureChange</span><span>(</span><span style=\"color:#64a0dc\">self, </span><span style=\"color:#64a0dc\">id</span><span>):\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>        </span><span style=\"color:#64a0dc\">topic</span><span> = \"</span><span style=\"color:#64a0dc\">temperature</span><span>/</span><span style=\"color:#64a0dc\">changed</span><span>\"\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>        </span><span style=\"color:#64a0dc\">self</span><span>.</span><span style=\"color:#64a0dc\">client</span><span>.</span><span style=\"color:#64a0dc\">publish</span><span>(</span><span style=\"color:#64a0dc\">topic, </span><span style=\"color:#64a0dc\">id</span><span>)`}\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>    &lt;/</span><span style=\"color:#64a0dc\">File</span><span>&gt;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span>  )\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_17",
        "content": "1// 1\n2import { File, Text } from '@asyncapi/generator-react-sdk'\n3export default function ({ asyncapi, params }) {\n4  return (\n5    <File name=\"client.py\">\n6    // 2\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8    // 3\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10    // 4\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12    // 5\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18      </File>\n19  )\n20}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#797f8c\">// 1</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">import</span><span> { File, Text } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/generator-react-sdk'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">export</span><span> </span><span style=\"color:#64a0dc\">default</span><span> </span><span style=\"color:#64a0dc\">function</span><span style=\"color:#74e287\"> (</span><span style=\"color:#d6deeb\">{ asyncapi, params }</span><span style=\"color:#74e287\">) </span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> (\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>    </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">name</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">\"client.py\"</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>    // 2\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">import paho.mqtt.client as mqtt</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>    // 3\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>    // 4\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">class {asyncapi.info().title().replaceAll(' ', '')}Client:</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span>    // 5\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">indent</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>        {`def __init__(self):\n</span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>            self.client = mqtt.Client()\n</span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>            self.client.connect(mqttBroker)`}\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span>  )\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_18",
        "content": "1import paho.mqtt.client as mqtt\n2\n3mqttBroker = \"test.mosquitto.org\"\n4\n5class TemperatureServiceClient:\n6\n7  def __init__(self):\n8              self.client = mqtt.Client()\n9              self.client.connect(mqttBroker)\n10\n11  def sendTemperatureDrop(self, id):\n12          topic = \"temperature/dropped\"\n13          self.client.publish(topic, id)\n14  def sendTemperatureRise(self, id):\n15          topic = \"temperature/risen\"\n16          self.client.publish(topic, id)\n17",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">import</span><span> paho.mqtt.client </span><span style=\"color:#64a0dc\">as</span><span> mqtt\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>mqttBroker = </span><span style=\"color:#c0e2a3;font-weight:500\">\"test.mosquitto.org\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#64a0dc\">class</span><span style=\"color:#7edcda\"> </span><span style=\"color:#7edcda\">TemperatureServiceClient</span><span style=\"color:#7edcda\">:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>  </span><span style=\"color:#64a0dc\">def</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">__init__</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">self</span><span style=\"color:#74e287\">):</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>              self.client = mqtt.Client()\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span>              self.client.connect(mqttBroker)\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>  </span><span style=\"color:#64a0dc\">def</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">sendTemperatureDrop</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">self, </span><span style=\"color:#7edcda\">id</span><span style=\"color:#74e287\">):</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>          topic = </span><span style=\"color:#c0e2a3;font-weight:500\">\"temperature/dropped\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>          self.client.publish(topic, </span><span style=\"color:#7edcda\">id</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span><span>  </span><span style=\"color:#64a0dc\">def</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">sendTemperatureRise</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">self, </span><span style=\"color:#7edcda\">id</span><span style=\"color:#74e287\">):</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>          topic = </span><span style=\"color:#c0e2a3;font-weight:500\">\"temperature/risen\"</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>          self.client.publish(topic, </span><span style=\"color:#7edcda\">id</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_19",
        "content": "1<Text newLines={2}>\n2  <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n3</Text>",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">&lt;</span><span style=\"color:#64a0dc\">Text</span><span style=\"color:#64a0dc\"> </span><span style=\"color:#7edcda\">newLines</span><span style=\"color:#64a0dc\">=</span><span style=\"color:#c0e2a3;font-weight:500\">{2}</span><span style=\"color:#64a0dc\">&gt;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#64a0dc\">&lt;</span><span style=\"color:#64a0dc\">TopicFunction</span><span style=\"color:#64a0dc\"> </span><span style=\"color:#7edcda\">channels</span><span style=\"color:#64a0dc\">=</span><span style=\"color:#c0e2a3;font-weight:500\">{asyncapi.channels().filterByReceive()}</span><span style=\"color:#64a0dc\"> /&gt;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:1.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#64a0dc\">&lt;/</span><span style=\"color:#64a0dc\">Text</span><span style=\"color:#64a0dc\">&gt;</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_20",
        "content": "1/*\n2 * This component returns a block of functions that user can use to send messages to specific topic.\n3 * As input it requires a list of Channel models from the parsed AsyncAPI document\n4 */\n5export function TopicFunction({ channels }) {\n6  const topicsDetails = getTopics(channels);\n7  let functions = '';\n8\n9  topicsDetails.forEach((t) => {\n10    functions += `def send${t.name}(self, id):\n11        topic = \"${t.topic}\"\n12        self.client.publish(topic, id)\\n`\n13  });\n14\n15  return functions;\n16}\n17\n18/*\n19 * This function returns a list of objects, one for each channel with two properties, name and topic\n20 * name - holds information about the operationId provided in the AsyncAPI document\n21 * topic - holds information about the address of the topic\n22 *\n23 * As input it requires a list of Channel models from the parsed AsyncAPI document\n24 */\n25function getTopics(channels) {\n26  const channelsCanSendTo = channels;\n27  let topicsDetails = [];\n28\n29  channelsCanSendTo.forEach((ch) => {\n30    const topic = {};\n31    const operationId = ch.operations().filterByReceive()[0].id();\n32    topic.name = operationId.charAt(0).toUpperCase() + operationId.slice(1);\n33    topic.topic = ch.address();\n34\n35    topicsDetails.push(topic);\n36  })\n37\n38  return topicsDetails;\n39}",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#797f8c\">/*\n</span></span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span> * This component returns a block of functions that user can use to send messages to specific topic.\n</span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span> * As input it requires a list of Channel models from the parsed AsyncAPI document\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span style=\"color:#797f8c\"> */</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#64a0dc\">export</span><span> </span><span style=\"color:#64a0dc\">function</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">TopicFunction</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">{ channels }</span><span style=\"color:#74e287\">) </span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>  </span><span style=\"color:#64a0dc\">const</span><span> topicsDetails = getTopics(channels);\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>  </span><span style=\"color:#64a0dc\">let</span><span> functions = </span><span style=\"color:#c0e2a3;font-weight:500\">''</span><span>;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>  topicsDetails.forEach(</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">t</span><span style=\"color:#74e287\">) =&gt;</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>    functions += </span><span style=\"color:#c0e2a3;font-weight:500\">`def send</span><span style=\"color:#d6deeb;font-weight:500\">${t.name}</span><span style=\"color:#c0e2a3;font-weight:500\">(self, id):\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span style=\"color:#c0e2a3;font-weight:500\">        topic = \"</span><span style=\"color:#d6deeb;font-weight:500\">${t.topic}</span><span style=\"color:#c0e2a3;font-weight:500\">\"\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span style=\"color:#c0e2a3;font-weight:500\">        self.client.publish(topic, id)\\n`</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span>  });\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> functions;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>}\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span></span><span style=\"color:#797f8c\">/*\n</span></span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span> * This function returns a list of objects, one for each channel with two properties, name and topic\n</span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span> * name - holds information about the operationId provided in the AsyncAPI document\n</span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span> * topic - holds information about the address of the topic\n</span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span> *\n</span><span style=\"padding-right:2rem;color:#797f8c\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span> * As input it requires a list of Channel models from the parsed AsyncAPI document\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span style=\"color:#797f8c\"> */</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span><span></span><span style=\"color:#64a0dc\">function</span><span style=\"color:#74e287\"> </span><span style=\"color:#7edcda\">getTopics</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">channels</span><span style=\"color:#74e287\">) </span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">26</span><span>  </span><span style=\"color:#64a0dc\">const</span><span> channelsCanSendTo = channels;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">27</span><span>  </span><span style=\"color:#64a0dc\">let</span><span> topicsDetails = [];\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">28</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">29</span><span>  channelsCanSendTo.forEach(</span><span style=\"color:#74e287\">(</span><span style=\"color:#d6deeb\">ch</span><span style=\"color:#74e287\">) =&gt;</span><span> {\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">30</span><span>    </span><span style=\"color:#64a0dc\">const</span><span> topic = {};\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">31</span><span>    </span><span style=\"color:#64a0dc\">const</span><span> operationId = ch.operations().filterByReceive()[</span><span style=\"color:#d8da68\">0</span><span>].id();\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">32</span><span>    topic.name = operationId.charAt(</span><span style=\"color:#d8da68\">0</span><span>).toUpperCase() + operationId.slice(</span><span style=\"color:#d8da68\">1</span><span>);\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">33</span>    topic.topic = ch.address();\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">34</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">35</span>    topicsDetails.push(topic);\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">36</span>  })\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">37</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">38</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> topicsDetails;\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">39</span>}</span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_21",
        "content": "1import { File, Text } from '@asyncapi/generator-react-sdk'\n2import { TopicFunction } from '../components/TopicFunction'\n3\n4export default function ({ asyncapi, params }) {\n5  return (\n6    <File name=\"client.py\">\n7      <Text newLines={2}>import paho.mqtt.client as mqtt</Text>\n8\n9      <Text newLines={2}>mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</Text>\n10\n11      <Text newLines={2}>class {asyncapi.info().title().replaceAll(' ', '')}Client:</Text>\n12\n13      <Text indent={2} newLines={2}>\n14        {`def __init__(self):\n15            self.client = mqtt.Client()\n16            self.client.connect(mqttBroker)`}\n17      </Text>\n18\n19      <Text indent={2}>\n20        <TopicFunction channels={asyncapi.channels().filterByReceive()} />\n21      </Text>\n22    </File>\n23  )\n24}\n25",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#64a0dc\">import</span><span> { File, Text } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'@asyncapi/generator-react-sdk'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#64a0dc\">import</span><span> { TopicFunction } </span><span style=\"color:#64a0dc\">from</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">'../components/TopicFunction'</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#64a0dc\">export</span><span> </span><span style=\"color:#64a0dc\">default</span><span> </span><span style=\"color:#64a0dc\">function</span><span style=\"color:#74e287\"> (</span><span style=\"color:#d6deeb\">{ asyncapi, params }</span><span style=\"color:#74e287\">) </span><span>{\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>  </span><span style=\"color:#64a0dc\">return</span><span> (\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>    </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">name</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">\"client.py\"</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">import paho.mqtt.client as mqtt</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">mqttBroker = \"{asyncapi.servers().get(params.server).url()}\"</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">class {asyncapi.info().title().replaceAll(' ', '')}Client:</span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">indent</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">newLines</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>        {`def __init__(self):\n</span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span>            self.client = mqtt.Client()\n</span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span>            self.client.connect(mqttBroker)`}\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\" class=\"xml\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">indent</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{2}</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span class=\"xml\">        </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;</span><span class=\"xml\" style=\"color:#64a0dc\">TopicFunction</span><span class=\"xml\" style=\"color:#64a0dc\"> </span><span class=\"xml\" style=\"color:#7edcda\">channels</span><span class=\"xml\" style=\"color:#64a0dc\">=</span><span class=\"xml\" style=\"color:#c0e2a3;font-weight:500\">{asyncapi.channels().filterByReceive()}</span><span class=\"xml\" style=\"color:#64a0dc\"> /&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span class=\"xml\">      </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">Text</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span class=\"xml\">\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span class=\"xml\">    </span><span class=\"xml\" style=\"color:#64a0dc\">&lt;/</span><span class=\"xml\" style=\"color:#64a0dc\">File</span><span class=\"xml\" style=\"color:#64a0dc\">&gt;</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span>  )\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span>}\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_22",
        "content": "1python-mqtt-client-template\n2├── components\n3│   └── TopicFunction.js\n4├── template\n5│   └── index.js\n6└── test\n7    ├── fixtures\n8    │   └── asyncapi.yml\n9    └── project\n10        ├── client.py\n11        └── test.py",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#c0e2a3;font-weight:500\">python-mqtt-client-template</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">components</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">TopicFunction.js</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">template</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">index.js</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span></span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">fixtures</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">│</span><span>   </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">asyncapi.yml</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>    </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">project</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">├──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">client.py</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>        </span><span style=\"color:#c0e2a3;font-weight:500\">└──</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">test.py</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_23",
        "content": "1channels:\n2  temperature/dropped:\n3    description:  Notifies the user when the temperature drops past a certain point.\n4    publish:\n5      operationId: temperatureDrop\n6      message:\n7        description: Message that is being sent when the temperature drops past a certain point.\n8        payload:\n9          type: object\n10          additionalProperties: false\n11          properties:\n12            temperatureId:\n13              type: string\n14\n15  temperature/risen:\n16    description: Notifies the user when the temperature rises past a certain point.\n17    publish:\n18      operationId: temperatureRise\n19      message:\n20        description: Message that is being sent when the temperature rises past a certain point.\n21        payload:\n22          type: object\n23          additionalProperties: false\n24          properties:\n25            temperatureId:\n26              type: string",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span style=\"color:#7edcda\">channels:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>  </span><span style=\"color:#7edcda\">temperature/dropped:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#7edcda\">description:</span><span>  </span><span style=\"color:#c0e2a3;font-weight:500\">Notifies</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">user</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">drops</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">past</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">certain</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">point.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#7edcda\">publish:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">5</span><span>      </span><span style=\"color:#7edcda\">operationId:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperatureDrop</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">6</span><span>      </span><span style=\"color:#7edcda\">message:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">7</span><span>        </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">being</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">drops</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">past</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">certain</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">point.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">8</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">9</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">10</span><span>          </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">11</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">12</span><span>            </span><span style=\"color:#7edcda\">temperatureId:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">13</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">14</span>\n</span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">15</span><span>  </span><span style=\"color:#7edcda\">temperature/risen:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">16</span><span>    </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Notifies</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">user</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">rises</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">past</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">certain</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">point.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">17</span><span>    </span><span style=\"color:#7edcda\">publish:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">18</span><span>      </span><span style=\"color:#7edcda\">operationId:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperatureRise</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">19</span><span>      </span><span style=\"color:#7edcda\">message:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">20</span><span>        </span><span style=\"color:#7edcda\">description:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">Message</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">that</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">is</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">being</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">sent</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">when</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">the</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">temperature</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">rises</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">past</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">a</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">certain</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">point.</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">21</span><span>        </span><span style=\"color:#7edcda\">payload:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">22</span><span>          </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">object</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">23</span><span>          </span><span style=\"color:#7edcda\">additionalProperties:</span><span> </span><span style=\"color:#64a0dc\">false</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">24</span><span>          </span><span style=\"color:#7edcda\">properties:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">25</span><span>            </span><span style=\"color:#7edcda\">temperatureId:</span><span>\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:3.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">26</span><span>              </span><span style=\"color:#7edcda\">type:</span><span> </span><span style=\"color:#c0e2a3;font-weight:500\">string</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_24",
        "content": "1    client.sendTemperatureDrop(randomId)\n2    print(\"Temperature drop detected \" + str(randomId) + \" sent to temperature/dropped\")\n3    client.sendTemperatureRise(randomId)\n4    print(\"Temperature rise detected \" + str(randomId) + \" sent to temperature/risen\")",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>    </span><span style=\"color:#64a0dc\">client</span><span>.sendTemperatureDrop(randomId)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>    </span><span style=\"color:#64a0dc\">print</span><span>(</span><span style=\"color:#c0e2a3;font-weight:500\">\"Temperature drop detected \"</span><span> + </span><span style=\"color:#7edcda\">str</span><span>(randomId) + </span><span style=\"color:#c0e2a3;font-weight:500\">\" sent to temperature/dropped\"</span><span>)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>    </span><span style=\"color:#64a0dc\">client</span><span>.sendTemperatureRise(randomId)\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>    </span><span style=\"color:#64a0dc\">print</span><span>(</span><span style=\"color:#c0e2a3;font-weight:500\">\"Temperature rise detected \"</span><span> + </span><span style=\"color:#7edcda\">str</span><span>(randomId) + </span><span style=\"color:#c0e2a3;font-weight:500\">\" sent to temperature/risen\"</span><span>)</span></span></code>",
        "language": "unknown",
        "context": ""
      },
      {
        "id": "code_25",
        "content": "1Temperature drop detected 49040460 sent to temperature/dropped\n2Temperature rise detected 49040460 sent to temperature/risen\n3Temperature drop detected 66943992 sent to temperature/dropped\n4Temperature rise detected 66943992 sent to temperature/risen",
        "rawHtml": "<code class=\"mr-8\" style=\"white-space:pre\"><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">1</span><span>Temperature </span><span style=\"color:#64a0dc\">drop</span><span> detected </span><span style=\"color:#d8da68\">49040460</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/dropped\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">2</span><span>Temperature rise detected </span><span style=\"color:#d8da68\">49040460</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/risen\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">3</span><span>Temperature </span><span style=\"color:#64a0dc\">drop</span><span> detected </span><span style=\"color:#d8da68\">66943992</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/dropped\n</span></span><span style=\"padding-right:2rem\"><span class=\"comment linenumber react-syntax-highlighter-line-number\" style=\"display:inline-block;min-width:2.25em;padding-right:16px;text-align:right;user-select:none;margin-left:16px;background-color:#252f3f;color:#8B9394\">4</span><span>Temperature rise detected </span><span style=\"color:#d8da68\">66943992</span><span> sent </span><span style=\"color:#64a0dc\">to</span><span> temperature/risen</span></span></code>",
        "language": "unknown",
        "context": ""
      }
    ],
    "tables": [],
    "highlights": [
      {
        "id": "highlight_0",
        "content": "sendTemperatureDrop",
        "context": "Lastly, create a reusable component for the output code's sendTemperatureDrop and sendTemperatureRise functions."
      },
      {
        "id": "highlight_1",
        "content": "sendTemperatureRise",
        "context": "Lastly, create a reusable component for the output code's sendTemperatureDrop and sendTemperatureRise functions."
      },
      {
        "id": "highlight_2",
        "content": "npm install -g @asyncapi/cli",
        "context": "Install the AsyncAPI CLI using the command npm install -g @asyncapi/cli."
      },
      {
        "id": "highlight_3",
        "content": "react",
        "context": "react"
      },
      {
        "id": "highlight_4",
        "content": "nunjucks",
        "context": "nunjucks"
      },
      {
        "id": "highlight_5",
        "content": "@asyncapi/generator-react-sdk",
        "context": "@asyncapi/generator-react-sdk"
      },
      {
        "id": "highlight_6",
        "content": "npm install",
        "context": "Navigate to the python-mqtt-client-template directory. Run the command npm install on your terminal to install the dependencies specified in package.json."
      },
      {
        "id": "highlight_7",
        "content": "generator-react-sdk",
        "context": "Import the generator-react-sdk dependency."
      },
      {
        "id": "highlight_8",
        "content": "asyncapi",
        "context": "The asyncapi argument is an instance of the AsyncAPI Parser. It will allow you to access the content of the AsyncAPI document in your template using helper functions."
      },
      {
        "id": "highlight_9",
        "content": "asyncapi.info().title()",
        "context": "The asyncapi.info().title() is using the info() helper function to return the info object from the AsyncAPI document illustrated in the code snippet below:"
      },
      {
        "id": "highlight_10",
        "content": "asyncapi.info().title()",
        "context": "The asyncapi.info().title() returns Temperature Service."
      },
      {
        "id": "highlight_11",
        "content": "Temperature Service",
        "context": "The asyncapi.info().title() returns Temperature Service."
      },
      {
        "id": "highlight_12",
        "content": "asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project",
        "context": "To see this in action, navigate to the python-mqtt-client-template directory. Then, run asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command on your terminal. If successful, you'll see the message below on your terminal:"
      },
      {
        "id": "highlight_13",
        "content": "Temperature Service",
        "context": "Navigating to the test/project directory. You should see a client.py file; the only content is Temperature Service."
      },
      {
        "id": "highlight_14",
        "content": "asyncapi generate fromTemplate",
        "context": "asyncapi generate fromTemplate is how you use AsyncAPI generator via the AsyncAPI CLI."
      },
      {
        "id": "highlight_15",
        "content": "test/fixtures/asyncapi.yml",
        "context": "test/fixtures/asyncapi.yml points to your AsyncAPI document."
      },
      {
        "id": "highlight_16",
        "content": "./",
        "context": "./ specifies the location of your template."
      },
      {
        "id": "highlight_17",
        "content": "-o",
        "context": "-o specifies where to output the result."
      },
      {
        "id": "highlight_18",
        "content": "asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project",
        "context": "Here is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package."
      },
      {
        "id": "highlight_19",
        "content": "paho-mqtt",
        "context": "Here is the sample code to be pasted in the client.py you generated above running the asyncapi generate fromTemplate test/fixtures/asyncapi.yml ./ -o test/project command. It uses the paho-mqtt package."
      },
      {
        "id": "highlight_20",
        "content": "pip install paho-mqtt==1.6.1",
        "context": "Make sure you have the Paho-MQTT library installed. You can install it using pip with the pip install paho-mqtt==1.6.1 command. Please note that this tutorial is based on Paho-MQTT version 1.6.1. The Paho-MQTT library has since been updated to version 2.0.0, which includes changes that are not covered in this tutorial. To ensure compatibility and to follow along without any issues, please install version 1.6.1 of the Paho-MQTT library."
      },
      {
        "id": "highlight_21",
        "content": "test.mosquitto.org",
        "context": "Assigns the MQTT broker address test.mosquitto.org to the variable MQTT broker. This specifies the location where the MQTT client will connect to."
      },
      {
        "id": "highlight_22",
        "content": "sendTemperatureChange",
        "context": "The sendTemperatureChange is a function the client user invokes to publish a message to the broker, and its specific topic."
      },
      {
        "id": "highlight_23",
        "content": "test.mosquitto.org",
        "context": "In summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called."
      },
      {
        "id": "highlight_24",
        "content": "sendTemperatureChange()",
        "context": "In summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called."
      },
      {
        "id": "highlight_25",
        "content": "temperature/changed",
        "context": "In summary, this code sets up an MQTT client using the Paho-MQTT library. It connects to the test.mosquitto.org MQTT broker, and the sendTemperatureChange() method publishes temperature change information to the temperature/changed topic whenever called."
      },
      {
        "id": "highlight_26",
        "content": "client = TemperatureServiceClient()",
        "context": "You'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:"
      },
      {
        "id": "highlight_27",
        "content": "client.sendTemperatureChange",
        "context": "You'll interact with the Temperature Service using the client module you created above. You'll create an instance of the client using client = TemperatureServiceClient() and then use client.sendTemperatureChange function to publish messages that Temperature Service is subscribed to.\nCreate a test/project/test.py file in your project and add the code snippet below:"
      },
      {
        "id": "highlight_28",
        "content": "python test.py",
        "context": "Navigate to the python-mqtt-client-template/test/project directory. Run the command python test.py on your terminal. You should see output similar to the snippet below logged on your terminal:"
      },
      {
        "id": "highlight_29",
        "content": "docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org",
        "context": "To make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal."
      },
      {
        "id": "highlight_30",
        "content": "temperature/changed",
        "context": "To make sure your test.py and client code works check if the broker really receives temperature-related messages. You can do it using an MQTT CLI using docker. Run the command docker run hivemq/mqtt-cli sub -t temperature/changed -h test.mosquitto.org in your terminal. It will download the image if you don't have it locally, then the CLI will connect to the broker, subscribe to the temperature/changed topic and then output the temperature ids on the terminal."
      },
      {
        "id": "highlight_31",
        "content": "{asyncapi.info().title()}",
        "context": "Open index.js and copy the content of client.py and replace {asyncapi.info().title()} with it. It should look like the code snippet below now:"
      },
      {
        "id": "highlight_32",
        "content": "npm run <your_script>",
        "context": "In package.json you can have the scripts property that you invoke by calling npm run <your_script>. After adding these scripts in package.json, it will look like the following code snippet:"
      },
      {
        "id": "highlight_33",
        "content": "test:clean",
        "context": "test:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test."
      },
      {
        "id": "highlight_34",
        "content": "rimraf",
        "context": "test:clean: This script uses the rimraf package to remove the old version of the file test/project/client.py every time you run your test."
      },
      {
        "id": "highlight_35",
        "content": "test:generate",
        "context": "test:generate: This script uses the AsyncAPI CLI to generate a new version of client.py."
      },
      {
        "id": "highlight_36",
        "content": "test:start",
        "context": "test:start: This script runs the python code using client.py."
      },
      {
        "id": "highlight_37",
        "content": "test",
        "context": "test: This script runs all the other scripts in proper order."
      },
      {
        "id": "highlight_38",
        "content": "npm test",
        "context": "Run npm test on your terminal to ensure everything works as expected."
      },
      {
        "id": "highlight_39",
        "content": "mqttBroker = 'test.mosquitto.org'",
        "context": "This will allow you to also define the broker you will use in production in the servers section above.\nTherefore, we can template the code mqttBroker = 'test.mosquitto.org' in index.js so the value is populated dynamically at runtime depending on the specified server environment."
      },
      {
        "id": "highlight_40",
        "content": "\"required\": true",
        "context": "\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:"
      },
      {
        "id": "highlight_41",
        "content": "--param server=dev",
        "context": "\"required\": true: makes the parameter mandatory and once user forgets to add it to the cli command, a proper error message is yielded.\nYou'll pass the server to be used to generate your code using --param server=dev in the AsyncAPI CLI command. Failure to which you'll get an error:"
      },
      {
        "id": "highlight_42",
        "content": "test:generate",
        "context": "Update your test:generate script in package.json to include the server param"
      },
      {
        "id": "highlight_43",
        "content": "mqttBroker = 'test.mosquitto.org'",
        "context": "You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js."
      },
      {
        "id": "highlight_44",
        "content": "mqttBroker = \"${asyncapi.servers().get(params.server).url()}\"",
        "context": "You can now replace the static broker from mqttBroker = 'test.mosquitto.org' to mqttBroker = \"${asyncapi.servers().get(params.server).url()}\" in index.js."
      },
      {
        "id": "highlight_45",
        "content": "npm test",
        "context": "Run npm test to validate that your code still works as expected."
      },
      {
        "id": "highlight_46",
        "content": "import { File, Text } from '@asyncapi/generator-react-sdk'",
        "context": "Import the Text component that will wrap strings so they are indented properly in the output. Your import statement should now look like this: import { File, Text } from '@asyncapi/generator-react-sdk'."
      },
      {
        "id": "highlight_47",
        "content": "Text",
        "context": "The broker url is templated in a Text component removing the $ from the string template."
      },
      {
        "id": "highlight_48",
        "content": "$",
        "context": "The broker url is templated in a Text component removing the $ from the string template."
      },
      {
        "id": "highlight_49",
        "content": "asyncapi.info().title()",
        "context": "Dynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix."
      },
      {
        "id": "highlight_50",
        "content": "Temperature Service",
        "context": "Dynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix."
      },
      {
        "id": "highlight_51",
        "content": "Client",
        "context": "Dynamically get the class name TemperatureServiceClient from the AsyncAPI document from the info object using the Parser API using the code: asyncapi.info().title() . It will return Temperature Service, then remove the spaces and add Client as a suffix."
      },
      {
        "id": "highlight_52",
        "content": "__init__",
        "context": "There is no templating needed in the __init__ function, there is only hardcoded information."
      },
      {
        "id": "highlight_53",
        "content": "sendTemperatureDrop",
        "context": "You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:"
      },
      {
        "id": "highlight_54",
        "content": "sendTemperatureRise",
        "context": "You'll then need to template to dynamically generate sendTemperatureDrop and sendTemperatureRise functions in the generated code based off the AsyncAPI document content. The goal is to write template code that returns functions for channels that the Temperature Service application is subscribed to. The template code to generate these functions will look like this:"
      },
      {
        "id": "highlight_55",
        "content": "publish",
        "context": "It's recommended to put reusable components outside the template directory in a new directory called components. You'll create a component that will dynamically generate functions in the output for as many channels as there are in your AsyncAPI document that contains a publish operation. Add the following code in the python-mqtt-client-template/components/TopicFunction.js file, after creating the python-mqtt-client-template/components/ directory:"
      },
      {
        "id": "highlight_56",
        "content": "{ channels }",
        "context": "{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic."
      },
      {
        "id": "highlight_57",
        "content": "TopicFunction",
        "context": "{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic."
      },
      {
        "id": "highlight_58",
        "content": "getTopics(channels)",
        "context": "{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic."
      },
      {
        "id": "highlight_59",
        "content": "operationId",
        "context": "{ channels }: the TopicFunction component accepts a custom prop called channels and in your template code\ngetTopics(channels): Returns a list of objects, one for each channel with two properties; name and topic. The name holds information about the operationId provided in the AsyncAPI document while the topic holds information about the address of the topic."
      },
      {
        "id": "highlight_60",
        "content": "TopicFunction",
        "context": "Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:"
      },
      {
        "id": "highlight_61",
        "content": "Temperature Service",
        "context": "Import the TopicFunction component in your template code in index.js and add the template code to generate the functions to topics that the Temperature Service application is subscribed to. In your case, the final version of your template code should look like this:"
      },
      {
        "id": "highlight_62",
        "content": "npm test",
        "context": "Run npm test on your terminal to ensure everything works as expected."
      },
      {
        "id": "highlight_63",
        "content": "temperature/dropped",
        "context": "In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected."
      },
      {
        "id": "highlight_64",
        "content": "temperature/risen",
        "context": "In the next section, you'll add another channel to asyncapi.yml file called temperature/dropped and temperature/risen then run the template again to make sure it still works as expected."
      },
      {
        "id": "highlight_65",
        "content": "npm test",
        "context": "Run npm test to validate that everything works as expected. You should see logs similar to the snippet below in your terminal:"
      }
    ]
  }
}